<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dnSpy.Contracts.DnSpy</name>
    </assembly>
    <members>
        <member name="T:dnSpy.Contracts.App.AppDirectories">
            <summary>
            Application directories
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.AppDirectories.BinDirectory">
            <summary>
            Base directory of dnSpy binaries
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.AppDirectories.DataDirectory">
            <summary>
            Base directory of data directory. Usually %APPDATA%\dnSpy but could be identical to
            <see cref="P:dnSpy.Contracts.App.AppDirectories.BinDirectory"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.AppDirectories.SettingsFilename">
            <summary>
            dnSpy settings filename
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.AppDirectories.GetDirectories(System.String)">
            <summary>
            Returns directories relative to <see cref="P:dnSpy.Contracts.App.AppDirectories.BinDirectory"/> and <see cref="P:dnSpy.Contracts.App.AppDirectories.DataDirectory"/>
            in that order. If they're identical, only one path is returned.
            </summary>
            <param name="subDir">Sub directory</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppCommandLineArgs">
            <summary>
            Application command line arguments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SettingsFilename">
            <summary>Settings filename</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Filenames">
            <summary>Filenames to load</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SingleInstance">
            <summary>true if single-instance</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Activate">
            <summary>true to activate the window</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Language">
            <summary>Language, either human readable or a language guid
            (<see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.GenericGuid"/> or <see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.UniqueGuid"/>)</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Culture">
            <summary>Culture</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SelectMember">
            <summary>Member to select, either an MD token or an XML doc name</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.NewTab">
            <summary>Show the file in a new tab</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SearchText">
            <summary>Search string or null if none</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SearchFor">
            <summary>Search type</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.SearchIn">
            <summary>Search location</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.Theme">
            <summary>Theme name (<see cref="P:dnSpy.Contracts.Themes.ITheme.Guid"/> or <see cref="P:dnSpy.Contracts.Themes.ITheme.Name"/>)</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.LoadFiles">
            <summary>true to load all saved files at startup</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.FullScreen">
            <summary>Full screen</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.ShowToolWindow">
            <summary>Tool windows to show</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgs.HideToolWindow">
            <summary>Tool windows to hide</summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgs.HasArgument(System.String)">
            <summary>
            Returns true if the argument is present
            </summary>
            <param name="argName">Argument name, eg. <c>--my-arg</c></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgs.GetArgumentValue(System.String)">
            <summary>
            Gets the argument value or null if the argument isn't present
            </summary>
            <param name="argName">Argument name, eg. <c>--my-arg</c></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgs.GetArguments">
            <summary>
            Gets all user arguments and values
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppCommandLineArgsHandler">
            <summary>
            Gets notified when new command line arguments have been passed to dnSpy
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppCommandLineArgsHandler.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppCommandLineArgsHandler.OnNewArgs(dnSpy.Contracts.App.IAppCommandLineArgs)">
            <summary>
            Called whenever there are new command line arguments
            </summary>
            <param name="args">Command line arguments</param>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppSettings">
            <summary>
            Application settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppSettings.UseNewRenderer_TextEditor">
            <summary>
            Text Editor: true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppSettings.UseNewRenderer_HexEditor">
            <summary>
            Hex Editor: true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppSettings.UseNewRenderer_DocumentTreeView">
            <summary>
            File TreeView: true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppStatusBar">
            <summary>
            App status bar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppStatusBar.Open">
            <summary>
            Opens the status bar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppStatusBar.Show(System.String)">
            <summary>
            Shows text in the status bar
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppStatusBar.Close">
            <summary>
            Closes the status bar
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IAppWindow">
            <summary>
            App window
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.App.IAppWindow.MainWindowClosing">
            <summary>
            Raised when the main window is closing
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.App.IAppWindow.MainWindowClosed">
            <summary>
            Raised when the main window has closed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.MainWindow">
            <summary>
            Gets the main window
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.MainWindowCommands">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Controls.IWpfCommands"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.StatusBar">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.App.IAppStatusBar"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.AppLoaded">
            <summary>
            true if the app has been loaded
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppWindow.AddTitleInfo(System.String)">
            <summary>
            Adds <paramref name="info"/> to the window title
            </summary>
            <param name="info">Some text</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppWindow.RemoveTitleInfo(System.String)">
            <summary>
            Removes <paramref name="info"/> from the window title
            </summary>
            <param name="info">Some text</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IAppWindow.RefreshToolBar">
            <summary>
            Refreshes the toolbar
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.AssemblyInformationalVersion">
            <summary>
            Gets the version (stored in an <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> attribute)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IAppWindow.CommandLineArgs">
            <summary>
            Gets the command line args
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IDsLoader">
            <summary>
            Called at startup and exit. Use <see cref="T:dnSpy.Contracts.App.ExportDsLoaderAttribute"/> to export an
            instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IDsLoader.Save(dnSpy.Contracts.Settings.ISettingsService)">
            <summary>
            Called when dnSpy exits
            </summary>
            <param name="settingsService">Settings manager</param>
        </member>
        <member name="M:dnSpy.Contracts.App.IDsLoader.Load(dnSpy.Contracts.Settings.ISettingsService,dnSpy.Contracts.App.IAppCommandLineArgs)">
            <summary>
            Called when dnSpy has just started. If the method takes too long to execute, give control
            back to dnSpy by using yield return. Only values in <see cref="T:dnSpy.Contracts.App.LoaderConstants"/>
            are used by the loader, anything else is ignored.
            </summary>
            <param name="settingsService">Settings manager</param>
            <param name="args">Command line arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IDsLoader.OnAppLoaded">
            <summary>
            Called when everything has been loaded
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IDsLoaderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.IDsLoaderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.App.ExportDsLoaderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.App.ExportDsLoaderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.App.IDsLoader"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.ExportDsLoaderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.App.ExportDsLoaderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.IMessageBoxService">
            <summary>
            Shows message boxes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxService.ShowIgnorableMessage(System.Guid,System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)">
            <summary>
            Shows a message box unless the user has disabled showing this particular message. null
            is returned if the message was ignored and no message box was shown. Otherwise, the
            return value is the same as <see cref="M:dnSpy.Contracts.App.IMessageBoxService.Show(System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)"/>.
            </summary>
            <param name="guid">Unique guid for this message</param>
            <param name="message">Message to show</param>
            <param name="buttons">Buttons that should be present</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxService.Show(System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)">
            <summary>
            Shows a message box
            </summary>
            <param name="message">Message to show</param>
            <param name="buttons">Buttons that should be present</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxService.Ask``1(System.String,System.String,System.String,System.Func{System.String,``0},System.Func{System.String,System.String},System.Windows.Window)">
            <summary>
            Asks the user for a value and returns it or the default value (eg. null or 0) if the
            user canceled the dialog box.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="labelMessage">Label</param>
            <param name="defaultText">Default text to write to the textbox or null</param>
            <param name="title">Title or null</param>
            <param name="converter">Converts a string to the type, or null to use the default
            converter.</param>
            <param name="verifier">Verifies the typed message. Returns null or an empty string if
            it's a valid value, else an error message to show to the user.</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IMessageBoxService.Show(System.Exception,System.String,System.Windows.Window)">
            <summary>
            Shows an exception message
            </summary>
            <param name="exception">Exception</param>
            <param name="msg">Message to show or null</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
        </member>
        <member name="T:dnSpy.Contracts.App.IOpenFromGAC">
            <summary>
            Opens a file from the GAC (Global Assembly Cache)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.App.IOpenFromGAC.GetPaths(System.Windows.Window)">
            <summary>
            Returns an array of selected GAC assemblies
            </summary>
            <param name="ownerWindow">Owner window or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.App.IOpenFromGAC.OpenAssemblies(System.Boolean,System.Windows.Window)">
            <summary>
            Returns an array of selected GAC assemblies
            </summary>
            <param name="selectAssembly">true to select the assembly in <c>Assembly Explorer</c></param>
            <param name="ownerWindow">Owner window or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.App.LoaderConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.App.LoaderConstants.Delay">
            <summary>
            Delays the loading a short while
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.App.LoaderConstants.ORDER_DOCUMENTTABMANAGER">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabService"/>'s <see cref="T:dnSpy.Contracts.App.IDsLoader"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.MsgBox">
            <summary>
            Contains an <see cref="T:dnSpy.Contracts.App.IMessageBoxService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.App.MsgBox.Instance">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.App.IMessageBoxService"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.App.MsgBoxButton">
            <summary>
            Buttons
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.None">
            <summary>None, eg. the user pressed Alt+F4 to close the message box</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.OK">
            <summary>OK-button</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.Yes">
            <summary>Yes-button</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.No">
            <summary>No-button</summary>
        </member>
        <member name="F:dnSpy.Contracts.App.MsgBoxButton.Cancel">
            <summary>Cancel-button</summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.CompilationKind">
            <summary>
            Compilation kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilationKind.Assembly">
            <summary>
            Edit assembly and module attributes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilationKind.Method">
            <summary>
            Edit method
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilationKind.AddClass">
            <summary>
            Add class
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilationKind.EditClass">
            <summary>
            Edit an existing class
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult">
            <summary>
            Compilation result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult.Success">
            <summary>
            true if the compilation succeeded
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult.RawFile">
            <summary>
            Result of compilation or null if compilation failed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult.DebugFile">
            <summary>
            Debug file data (eg. PDB data)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult.Diagnostics">
            <summary>
            Gets the diagnostics
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult.#ctor(System.Byte[],System.Nullable{dnSpy.Contracts.AsmEditor.Compiler.DebugFileResult},dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic[])">
            <summary>
            Constructor
            </summary>
            <param name="rawFile">Raw file data</param>
            <param name="debugFile">Debug file result or null</param>
            <param name="diagnostics">Diagnostics or null</param>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.CompilationResult.#ctor(dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic[])">
            <summary>
            Constructor
            </summary>
            <param name="diagnostics">Diagnostics</param>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic">
            <summary>
            Compiler diagnostic
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.Severity">
            <summary>
            Gets the severity
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.Id">
            <summary>
            Id, eg. CS0001
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.Filename">
            <summary>
            Filename or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.LineLocationSpan">
            <summary>
            Location in the file or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.#ctor(dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnosticSeverity,System.String,System.String,System.String,System.Nullable{dnSpy.Contracts.AsmEditor.Compiler.LineLocationSpan})">
            <summary>
            Constructor
            </summary>
            <param name="severity">Severity</param>
            <param name="description">Description</param>
            <param name="id">Id</param>
            <param name="filename">Filename</param>
            <param name="lineLocationSpan">Line location or null</param>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnostic.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnosticSeverity">
            <summary>
            Severity
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnosticSeverity.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnosticSeverity.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnosticSeverity.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.CompilerDiagnosticSeverity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference">
            <summary>
            Metadata reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference.Data">
            <summary>
            Raw bytes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference.Assembly">
            <summary>
            Gets the assembly or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference.Filename">
            <summary>
            Gets the filename or null if it doesn't exist on disk
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference.IsAssemblyReference">
            <summary>
            true if it's an assembly reference, false if it's a module reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference.CreateAssemblyReference(System.Byte[],dnlib.DotNet.IAssembly,System.String)">
            <summary>
            Creates an assembly metadata reference
            </summary>
            <param name="data">File data</param>
            <param name="assembly">Assembly owner or null</param>
            <param name="filename">Filename or null if it doesn't exist on disk</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference.CreateModuleReference(System.Byte[],dnlib.DotNet.IAssembly,System.String)">
            <summary>
            Creates a module metadata reference
            </summary>
            <param name="data">File data</param>
            <param name="assembly">Assembly owner or null</param>
            <param name="filename">Filename or null if it doesn't exist on disk</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat">
            <summary>
            Debug file format
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat.Pdb">
            <summary>
            PDB
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat.PortablePdb">
            <summary>
            Portable PDB
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat.Embedded">
            <summary>
            <see cref="F:dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat.PortablePdb"/> embedded in metadata
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.DebugFileResult">
            <summary>
            PDB file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.DebugFileResult.RawFile">
            <summary>
            PDB file or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.DebugFileResult.Format">
            <summary>
            Debug file format
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.DebugFileResult.#ctor(dnSpy.Contracts.AsmEditor.Compiler.DebugFileFormat,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="format">Debug file format</param>
            <param name="rawFile">Debug file data</param>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.IAssemblyReferenceResolver">
            <summary>
            Resolves assemblies
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.IAssemblyReferenceResolver.Resolve(dnlib.DotNet.IAssembly)">
            <summary>
            Resolves a reference
            </summary>
            <param name="asmRef">Assembly reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.ICodeDocument">
            <summary>
            Code document
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ICodeDocument.Name">
            <summary>
            Name of document
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ICodeDocument.NameNoExtension">
            <summary>
            Name of document without the extension. Identical to <see cref="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledDocument.NameNoExtension"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ICodeDocument.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ICodeDocument.TextViewHost">
            <summary>
            Gets the text view host
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult">
            <summary>
            Decompiled code result, passed to <see cref="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler.AddDecompiledCode(dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult.Documents">
            <summary>
            Gets the documents
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult.AssemblyReferences">
            <summary>
            Assembly and module references
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult.AssemblyReferenceResolver">
            <summary>
            Reference resolver
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult.Platform">
            <summary>
            Platform
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledDocument">
            <summary>
            Decompiled code document
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledDocument.Code">
            <summary>
            All code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.IDecompiledDocument.NameNoExtension">
            <summary>
            Name of document, without the extension
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler">
            <summary>
            Compiles source code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler.RequiredAssemblyReferences">
            <summary>
            Assembly references that must be included when compiling the code, even if the
            references aren't part of the edited assembly. This is usually empty unless the
            language uses types from certain language specific assemblies, eg. Visual Basic
            usually needs <c>Microsoft.VisualBasic</c>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler.AddDecompiledCode(dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult)">
            <summary>
            Called after the code has been decompiled
            </summary>
            <param name="decompiledCodeResult">Decompiled code</param>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler.CompileAsync(System.Threading.CancellationToken)">
            <summary>
            Compiles the code
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler.AddMetadataReferences(dnSpy.Contracts.AsmEditor.Compiler.CompilerMetadataReference[])">
            <summary>
            Adds new metadata references. Called after <see cref="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler.AddDecompiledCode(dnSpy.Contracts.AsmEditor.Compiler.IDecompiledCodeResult)"/>
            has been called.
            </summary>
            <param name="metadataReferences">Metadata references</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompilerProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompilerProvider.Order">
            <summary>
            Order of this provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompilerProvider.Icon">
            <summary>
            Gets the icon shown in menus or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompilerProvider.Language">
            <summary>
            Language it supports, eg. <see cref="F:dnSpy.Contracts.Decompiler.DecompilerConstants.LANGUAGE_CSHARP"/>.
            This property is compared against <see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.GenericGuid"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompilerProvider.CanCompile(dnSpy.Contracts.AsmEditor.Compiler.CompilationKind)">
            <summary>
            Returns true if it supports <paramref name="kind"/>
            </summary>
            <param name="kind">Compilation kind</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompilerProvider.Create(dnSpy.Contracts.AsmEditor.Compiler.CompilationKind)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.AsmEditor.Compiler.ILanguageCompiler"/> instance
            </summary>
            <param name="kind">Compilation kind</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.LineLocation">
            <summary>
            Line location
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.LineLocation.Line">
            <summary>
            Line, 0-based
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.LineLocation.Character">
            <summary>
            Column, 0-based
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.LineLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="line">Line, 0-based</param>
            <param name="character">Column, 0-based</param>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.LineLocation.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.LineLocationSpan">
            <summary>
            Line location span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.LineLocationSpan.StartLinePosition">
            <summary>
            Start line position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.AsmEditor.Compiler.LineLocationSpan.EndLinePosition">
            <summary>
            End line position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.LineLocationSpan.#ctor(dnSpy.Contracts.AsmEditor.Compiler.LineLocation,dnSpy.Contracts.AsmEditor.Compiler.LineLocation)">
            <summary>
            Constructor
            </summary>
            <param name="startLinePosition">Start line position</param>
            <param name="endLinePosition">End line position</param>
        </member>
        <member name="M:dnSpy.Contracts.AsmEditor.Compiler.LineLocationSpan.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform">
            <summary>
            Platform
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform.AnyCpu">
            <summary>
            Any CPU
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform.X86">
            <summary>
            x86
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform.X64">
            <summary>
            x64
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform.Itanium">
            <summary>
            IA-64
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform.AnyCpu32BitPreferred">
            <summary>
            Any CPU, but prefer 32-bit
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.AsmEditor.Compiler.TargetPlatform.Arm">
            <summary>
            ARM
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants">
            <summary>
            <see cref="T:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_Default">
            <summary>
            Default order
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_DocumentViewer">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_Repl">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_CodeEditor">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/> definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_Logger">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/> definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_HexEditor">
            <summary>
            Order of hex editor definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_HexEditorDebuggerMemory">
            <summary>
            Order of hex editor (Debugger / Process Memory) definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.UIOrder_DocumentViewer">
            <summary>
            UI order of <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.UIOrder_Repl">
            <summary>
            UI order of <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.UIOrder_CodeEditor">
            <summary>
            UI order of <see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.UIOrder_Logger">
            <summary>
            UI order of <see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.UIOrder_HexEditor">
            <summary>
            UI order of hex editor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.UIOrder_HexEditorDebuggerMemory">
            <summary>
            UI order of hex editor (Debugger / Process Memory)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.DefaultImageSettings">
            <summary>
            Default image settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.Images">
            <summary>
            All images or null to use the default value. This can be filenames, folders, or pack:// URIs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.Stretch">
            <summary>
            Stretch value or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.StretchDirection">
            <summary>
            Stretch direction value or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.Opacity">
            <summary>
            Opacity or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.HorizontalOffset">
            <summary>
            Horizontal offset or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.VerticalOffset">
            <summary>
            Vertical offset or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.LeftMarginWidthPercent">
            <summary>
            Left margin width (%) or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.RightMarginWidthPercent">
            <summary>
            Right margin width (%) or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.TopMarginHeightPercent">
            <summary>
            Top margin height (%) or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.BottomMarginHeightPercent">
            <summary>
            Bottom margin height (%) or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.MaxHeight">
            <summary>
            Max height or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.MaxWidth">
            <summary>
            Max width or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.Zoom">
            <summary>
            Zoom (%) or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.ImagePlacement">
            <summary>
            Image placement or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.IsRandom">
            <summary>
            True if images are picked in random order
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.IsEnabled">
            <summary>
            true if it's enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.DefaultImageSettings.Interval">
            <summary>
            Time interval until next image is shown or null to use the default value
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition">
            <summary>
            Defines background image options. Use <see cref="T:dnSpy.Contracts.BackgroundImage.ExportBackgroundImageOptionDefinitionAttribute"/>
            to export an instance. See also <see cref="T:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition2"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition.Id">
            <summary>
            Unique settings id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition.DisplayName">
            <summary>
            Name shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition.UIOrder">
            <summary>
            Order of this option when shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition.UserVisible">
            <summary>
            true if the user can change the settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition.GetDefaultImageSettings">
            <summary>
            Gets the default settings or null if none
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition.IsSupported(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns true if the text view should use this instance's background image settings
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition2">
            <summary>
            Defines background image options. Use <see cref="T:dnSpy.Contracts.BackgroundImage.ExportBackgroundImageOptionDefinitionAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition2.IsSupported(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Returns true if the hex view should use this instance's background image settings
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinitionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinitionMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.BackgroundImage.ExportBackgroundImageOptionDefinitionAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.ExportBackgroundImageOptionDefinitionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.BackgroundImage.IBackgroundImageOptionDefinition"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.BackgroundImage.ExportBackgroundImageOptionDefinitionAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order of this instance, eg. <see cref="F:dnSpy.Contracts.BackgroundImage.BackgroundImageOptionDefinitionConstants.AttrOrder_Default"/></param>
        </member>
        <member name="P:dnSpy.Contracts.BackgroundImage.ExportBackgroundImageOptionDefinitionAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.BackgroundImage.ImagePlacement">
            <summary>
            Image placement
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.TopLeft">
            <summary>
            Top left corner
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.TopRight">
            <summary>
            Top right corner
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.BottomLeft">
            <summary>
            Bottom left corner
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.BottomRight">
            <summary>
            Bottom right corner
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.BackgroundImage.ImagePlacement.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandConstants">
            <summary>
            Command constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup">
            <summary>Standard command IDs (<see cref="T:dnSpy.Contracts.Command.StandardIds"/>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandConstants.TextEditorGroup">
            <summary>Text editor command IDs (<see cref="T:dnSpy.Contracts.Command.TextEditorIds"/>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandConstants.ReplGroup">
            <summary>REPL command IDs (<see cref="T:dnSpy.Contracts.Command.ReplIds"/>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandConstants.OutputTextPaneGroup">
            <summary>Output logger text pane command IDs (<see cref="T:dnSpy.Contracts.Command.OutputTextPaneIds"/>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandConstants.TextReferenceGroup">
            <summary>Text reference command IDs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandConstants.HexEditorGroup">
            <summary>Hex editor command IDs (<see cref="T:dnSpy.Contracts.Command.HexEditorIds"/>)</summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandInfo">
            <summary>
            Command data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.CommandInfo.Group">
            <summary>
            Gets the group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.CommandInfo.ID">
            <summary>
            Gets the command id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.CommandInfo.Arguments">
            <summary>
            Gets the arguments or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.CommandInfo.#ctor(System.Guid,System.Int32,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="id">Command id</param>
            <param name="arguments">Command arguments or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandInfoProviderOrder">
            <summary>
            <see cref="T:dnSpy.Contracts.Command.ICommandInfoProvider"/> order constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.Default">
            <summary>Default</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.TextEditor">
            <summary>Text editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.TextReferences">
            <summary>Text references</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.DocumentViewer">
            <summary>Document viewer</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.REPL">
            <summary>REPL editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.OutputTextPane">
            <summary>Output logger text pane</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.EditCode">
            <summary>Edit Code</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.HexEditor">
            <summary>Hex editor</summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandShortcut">
            <summary>
            Keyboard shortcut and command
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandTargetCommand">
            <summary>
            Implements <see cref="T:System.Windows.Input.ICommand"/> by using a <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.CommandTargetCommand.#ctor(dnSpy.Contracts.Command.ICommandTarget,dnSpy.Contracts.Command.StandardIds)">
            <summary>
            Constructor
            </summary>
            <param name="commandTarget">Command target</param>
            <param name="cmdId">Command ID</param>
        </member>
        <member name="M:dnSpy.Contracts.Command.CommandTargetCommand.#ctor(dnSpy.Contracts.Command.ICommandTarget,dnSpy.Contracts.Command.TextEditorIds)">
            <summary>
            Constructor
            </summary>
            <param name="commandTarget">Command target</param>
            <param name="cmdId">Command ID</param>
        </member>
        <member name="M:dnSpy.Contracts.Command.CommandTargetCommand.#ctor(dnSpy.Contracts.Command.ICommandTarget,System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="commandTarget">Command target</param>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="cmdId">Command ID</param>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandTargetFilterOrder">
            <summary>
            <see cref="T:dnSpy.Contracts.Command.ICommandTargetFilter"/> order constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.TextEditor">
            <summary>Text editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.UndoRedo">
            <summary>Undo/redo</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.SearchServiceFocused">
            <summary>Search service when UI is visible</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.SearchService">
            <summary>Search service</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.DocumentViewer">
            <summary>Document viewer</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.REPL">
            <summary>REPL editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.OutputTextPane">
            <summary>Output logger text pane</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.EditCode">
            <summary>Edit Code</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.IntellisenseSessionStack">
            <summary>Intellisense session stack</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.IntellisenseDefaultStatmentCompletion">
            <summary>Default statement completion</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.IntellisenseRoslynStatmentCompletion">
            <summary>Roslyn statement completion</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.IntellisenseRoslynSignatureHelp">
            <summary>Roslyn signature help</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.IntellisenseRoslynQuickInfo">
            <summary>Roslyn quick info</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.HexEditor">
            <summary>Hex editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.HexIntellisenseSessionStack">
            <summary>Intellisense session stack</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.HexDefaultIntellisenseQuickInfo">
            <summary>Default quick info</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.HexViewSearchServiceFocused">
            <summary>Search service when UI is visible</summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.HexViewSearchService">
            <summary>Search service</summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.CommandTargetStatus">
            <summary>
            <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> result
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetStatus.Handled">
            <summary>
            Command was handled, don't call the next <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> in the chain
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetStatus.NotHandled">
            <summary>
            Command was not handled, call the next <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> in the chain
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.CommandTargetStatus.LetWpfHandleCommand">
            <summary>
            Let WPF handle the command, don't pass it to the next <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> handler
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.HexEditorIds">
            <summary>
            Text editor command IDs (group = <see cref="F:dnSpy.Contracts.Command.CommandConstants.HexEditorGroup"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.TYPECHAR">
            <summary>
            Type character. The argument is the string to add.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.BACKSPACE">
            <summary>
            Backspace
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.RETURN">
            <summary>
            ENTER
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.TAB">
            <summary>
            Tab
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.BACKTAB">
            <summary>
            Tab Left
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DELETE">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.LEFT">
            <summary>
            Char Left; Move the caret left one character.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.LEFT_EXT">
            <summary>
            Char Left Extend; Move the caret left one character, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.RIGHT">
            <summary>
            Char Right; Move the caret right one character.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.RIGHT_EXT">
            <summary>
            Char Right Extend; Move the caret right one character, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.UP">
            <summary>
            Line Up.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.UP_EXT">
            <summary>
            Line Up Extend; Move the caret up one line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DOWN">
            <summary>
            Line Down; Move the caret down one line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DOWN_EXT">
            <summary>
            Line Down Extend; Move the caret down one line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.HOME">
            <summary>
            Document Start; Move the caret to the start of the document.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.HOME_EXT">
            <summary>
            Document Start Extend; Move the caret to the start of the document, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.END">
            <summary>
            Document End; Move the caret to the end of the document.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.END_EXT">
            <summary>
            Document End Extend; Move the caret to the end of the document, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.BOL">
            <summary>
            Line Start; Move the caret to the start of the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.BOL_EXT">
            <summary>
            Line Start Extend; Move the caret to the start of the line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.EOL">
            <summary>
            Line End; Move the caret to the end of the line..
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.EOL_EXT">
            <summary>
            Line End Extend; Move the caret to the end of the line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PAGEUP">
            <summary>
            Page Up; Move the caret up one page.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PAGEUP_EXT">
            <summary>
            Page Up Extend; Move the caret up one page, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PAGEDN">
            <summary>
            Page Down; Move the caret down one page.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PAGEDN_EXT">
            <summary>
            Page Down Extend; Move the caret down one page, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.TOPLINE">
            <summary>
            View Top; Move the caret to the top line in view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.TOPLINE_EXT">
            <summary>
            View Top Extend; Move the caret to the top line in view, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.BOTTOMLINE">
            <summary>
            View Bottom; Move the caret to the last line in view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.BOTTOMLINE_EXT">
            <summary>
            View Bottom Extend; Move the caret to the last line in view, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLUP">
            <summary>
            Scroll Line Up: Scroll the document up one line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLDN">
            <summary>
            Scroll Line Down; Scroll the document down one line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLPAGEUP">
            <summary>
            Scroll Page Up: Scroll the document up one page..
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLPAGEDN">
            <summary>
            Scroll Page Down: Scroll the document down one page.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLLEFT">
            <summary>
            Scroll Column Left; Scroll the document left one column.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLRIGHT">
            <summary>
            Scroll Column Right; Scroll the document right one column.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLBOTTOM">
            <summary>
            Scroll Line Bottom; Scroll the current line to the bottom of the view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLCENTER">
            <summary>
            Scroll Line Center; Scroll the current line to the center of the view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SCROLLTOP">
            <summary>
            Scroll Line Top: Scroll the current line to the top of the view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SELECTALL">
            <summary>
            Select All; Select all of the document.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SELSWAPANCHOR">
            <summary>
            Swap Anchor; Swap the anchor and end points of the current selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.TOGGLE_OVERTYPE_MODE">
            <summary>
            Overtype Mode; Toggle between insert and overtype insertion modes.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DELETELINE">
            <summary>
            Delete Line; Delete all selected lines, or the current line if no selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DELETETOEOL">
            <summary>
            Delete To EOL; Delete from the caret position to the end of the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DELETETOBOL">
            <summary>
            Delete To BOL; Delete from the caret position to the beginning of the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SELECTCURRENTWORD">
            <summary>
            Select Current Word; Select the word under the caret.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.WORDPREV">
            <summary>
            Word Previous; Move the caret left one word.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.WORDPREV_EXT">
            <summary>
            Word Previous Extend; Move the caret left one word, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.WORDNEXT">
            <summary>
            Word Next; Move the caret right one word.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.WORDNEXT_EXT">
            <summary>
            Word Next Extend; Move the caret right one word, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CANCEL">
            <summary>
            Selection Cancel; Cancel the current selection moving the caret to the anchor point.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.ZoomReset">
            <summary>
            Resets the zoom level to the default zoom level
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.QUICKINFO">
            <summary>
            Quick Info; Display Quick Info based on the current language.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.DECREASEFILTER">
            <summary>
            Decrease filter
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.INCREASEFILTER">
            <summary>
            Increase filter
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyText">
            <summary>
            Copies the text shown in the UI
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUtf8String">
            <summary>
            Copies data (UTF-8)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUnicodeString">
            <summary>
            Copies data (Unicode)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyCSharpArray">
            <summary>
            Copies data (C# array)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyVisualBasicArray">
            <summary>
            Copies data (Visual Basic array)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyOffset">
            <summary>
            Copies the offset
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyValue">
            <summary>
            Copies data (Value)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUInt16">
            <summary>
            Copies data (<see cref="T:System.UInt16"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUInt16BigEndian">
            <summary>
            Copies data (<see cref="T:System.UInt16"/> Big Endian)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUInt32">
            <summary>
            Copies data (<see cref="T:System.UInt32"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUInt32BigEndian">
            <summary>
            Copies data (<see cref="T:System.UInt32"/> Big Endian)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUInt64">
            <summary>
            Copies data (<see cref="T:System.UInt64"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyUInt64BigEndian">
            <summary>
            Copies data (<see cref="T:System.UInt64"/> Big Endian)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyFileOffset">
            <summary>
            Copies file offset. If it's a PE file, the position is converted to a position
            within the PE file on disk. If it's not a PE file, it's the offset relative
            to the start of the file.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyAbsoluteFileOffset">
            <summary>
            Copies absolute file offset (the position in the buffer)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.CopyRVA">
            <summary>
            Copies RVA
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PasteUtf8String">
            <summary>
            Pastes UTF-8 data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PasteUtf8String7BitEncodedLengthPrefix">
            <summary>
            Pastes 7-bit encoded length followed by UTF-8 bytes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PasteUnicodeString">
            <summary>
            Pastes Unicode (UTF-16) data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PasteUnicodeString7BitEncodedLengthPrefix">
            <summary>
            Pastes 7-bit encoded length followed by Unicode (UTF-16) bytes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.PasteBlob">
            <summary>
            Pastes blob data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.ShowAllBytes">
            <summary>
            Shows all bytes (<see cref="P:dnSpy.Contracts.Hex.HexBuffer.Span"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.ShowOnlySelectedBytes">
            <summary>
            Shows only the selected bytes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.Refresh">
            <summary>
            Refreshes the screen and clears any read caches
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SelectAllBytesBlock">
            <summary>
            Selects all bytes in the current block, unless the caret is in a memory hole
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.MoveToNextValidStartEnd">
            <summary>
            Move to the next closest start/end position of a block of memory
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.MoveToNextValidStartEndExt">
            <summary>
            Move to the next closest start/end position of a block of memory; extend selection
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.MoveToPreviousValidStartEnd">
            <summary>
            Move to the previous closest start/end position of a block of memory
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.MoveToPreviousValidStartEndExt">
            <summary>
            Move to the previous closest start/end position of a block of memory; extend selection
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.GoToCodeOrStructure">
            <summary>
            Go to high-level code (eg. decompiled code) or other high level structure
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.FollowFieldValueReference">
            <summary>
            Follows the field reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SelectNestedFile">
            <summary>
            Select the most nested file at current position
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SelectFile">
            <summary>
            Select the non-nested file at current position
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.HexEditorIds.SelectStructure">
            <summary>
            Selects the current structure
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.HexEditorIdsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.HexEditorIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.HexEditorIds)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.HexEditorIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.HexEditorIds,System.Object)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <param name="arguments">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandHolder">
            <summary>
            Implement this interface to return the original <see cref="T:System.Windows.Input.ICommand"/> instance, eg. a <see cref="T:System.Windows.Input.RoutedCommand"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.ICommandHolder.Command">
            <summary>
            Returns the original <see cref="T:System.Windows.Input.ICommand"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandInfoProvider">
            <summary>
            Converts raw input to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>. Use
            <see cref="T:dnSpy.Contracts.Command.ExportCommandInfoProviderAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandInfoProvider.GetCommandShortcuts(System.Object)">
            <summary>
            Gets all keyboard shortcuts
            </summary>
            <param name="target">Target object</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandInfoProvider2">
            <summary>
            Converts user input to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandInfoProvider2.CreateFromTextInput(System.Object,System.String)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/> created from user text
            </summary>
            <param name="target">Target object</param>
            <param name="text">Text typed by the user</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandInfoProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.ICommandInfoProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Command.ExportCommandInfoProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ExportCommandInfoProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Command.ICommandInfoProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ExportCommandInfoProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance, eg. <see cref="F:dnSpy.Contracts.Command.CommandInfoProviderOrder.Default"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Command.ExportCommandInfoProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandService">
            <summary>
            Converts raw input to commands and sends them to <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandService.Register(System.Windows.UIElement,System.Object)">
            <summary>
            Registers an element
            </summary>
            <param name="sourceElement">Source element that provides the keyboard input</param>
            <param name="target">Target object</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandTarget">
            <summary>
            Handles commands
            </summary>
            <remarks>IOleCommandTarget</remarks>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTarget.Execute(System.Guid,System.Int32,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="cmdId">Command ID</param>
            <param name="args">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTarget.Execute(System.Guid,System.Int32,System.Object,System.Object@)">
            <summary>
            Executes the command
            </summary>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="cmdId">Command ID</param>
            <param name="args">Arguments or null</param>
            <param name="result">Updated with the result</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTarget.CanExecute(System.Guid,System.Int32)">
            <summary>
            Checks whether the command can execute. If it can execute, it must return <see cref="F:dnSpy.Contracts.Command.CommandTargetStatus.Handled"/>
            </summary>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="cmdId">Command ID</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandTargetCollection">
            <summary>
            Allows adding and removing <see cref="T:dnSpy.Contracts.Command.ICommandTargetFilter"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTargetCollection.AddFilter(dnSpy.Contracts.Command.ICommandTargetFilter,System.Double)">
            <summary>
            Adds a new filter
            </summary>
            <param name="filter">Filter to add</param>
            <param name="order">Order, eg. <see cref="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.TextEditor"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTargetCollection.RemoveFilter(dnSpy.Contracts.Command.ICommandTargetFilter)">
            <summary>
            Removes an added filter
            </summary>
            <param name="filter">Filter to remove</param>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandTargetCollectionProvider">
            <summary>
            <see cref="T:dnSpy.Contracts.Command.ICommandTargetCollection"/> provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.ICommandTargetCollectionProvider.CommandTarget">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Command.ICommandTargetCollection"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandTargetFilter">
            <summary>
            Handles commands
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTargetFilter.SetNextCommandTarget(dnSpy.Contracts.Command.ICommandTarget)">
            <summary>
            Called once to set its next handler
            </summary>
            <param name="commandTarget">Next command target</param>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandTargetFilterProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Command.ICommandTargetFilter"/> instances. Use
            <see cref="T:dnSpy.Contracts.Command.ExportCommandTargetFilterProviderAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ICommandTargetFilterProvider.Create(System.Object)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Command.ICommandTargetFilter"/> instance or returns null
            </summary>
            <param name="target">Target object</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ICommandTargetFilterProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Command.ICommandTargetFilterProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Command.ExportCommandTargetFilterProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ExportCommandTargetFilterProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Command.ICommandTargetFilterProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ExportCommandTargetFilterProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance, eg. <see cref="F:dnSpy.Contracts.Command.CommandTargetFilterOrder.TextEditor"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Command.ExportCommandTargetFilterProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.IRegisteredCommandElement">
            <summary>
            Created by <see cref="M:dnSpy.Contracts.Command.ICommandService.Register(System.Windows.UIElement,System.Object)"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.IRegisteredCommandElement.Unregister">
            <summary>
            Unregisters it from <see cref="T:dnSpy.Contracts.Command.ICommandService"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.OutputTextPaneIds">
            <summary>
            <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/> command IDs
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.OutputTextPaneIds.ClearAll">
            <summary>
            Clears all text
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.OutputTextPaneIdsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.OutputTextPaneIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.OutputTextPaneIds)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.OutputTextPaneIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.OutputTextPaneIds,System.Object)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <param name="arguments">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.ReplIds">
            <summary>
            REPL command IDs
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.CopyCode">
            <summary>
            Copies only the code, but not the prompts or script output
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.Submit">
            <summary>
            Submits current user input
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.NewLineDontSubmit">
            <summary>
            Adds a new line without submitting the current input
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.ClearInput">
            <summary>
            Clears the user input
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.ClearScreen">
            <summary>
            Clears the screen
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.Reset">
            <summary>
            Resets the REPL editor (but not the owner, eg. C# scripting state)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.SelectPreviousCommand">
            <summary>
            Selects the previous command
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.SelectNextCommand">
            <summary>
            Selects the next command
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.SelectSameTextPreviousCommand">
            <summary>
            Selects the previous command matching the current input text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.ReplIds.SelectSameTextNextCommand">
            <summary>
            Selects the next command matching the current input text
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.ReplIdsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.ReplIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.ReplIds)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.ReplIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.ReplIds,System.Object)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <param name="arguments">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.StandardIds">
            <summary>
            Standard command IDs (group = <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Unknown">
            <summary>
            Unknown command, if no other command is found
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Cut">
            <summary>
            Cut
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Paste">
            <summary>
            Paste
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Undo">
            <summary>
            Undo
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Redo">
            <summary>
            Redo
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Find">
            <summary>
            Find (eg. Ctrl+F)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.Replace">
            <summary>
            Replace (eg. Ctrl+H)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.IncrementalSearchForward">
            <summary>
            Forward incremental search (eg. Ctrl+I)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.IncrementalSearchBackward">
            <summary>
            Backward incremental search (eg. Ctrl+Shift+I)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.FindNext">
            <summary>
            Find next (eg. F3)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.FindPrevious">
            <summary>
            Find previous (eg. Shift+F3)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.FindNextSelected">
            <summary>
            Find next selected (eg. Ctrl+F3)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.StandardIds.FindPreviousSelected">
            <summary>
            Find previous selected (eg. Ctrl+Shift+F3)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.StandardIdsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.StandardIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.StandardIds)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.StandardIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.StandardIds,System.Object)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <param name="arguments">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.TextEditorIds">
            <summary>
            Text editor command IDs (group = <see cref="F:dnSpy.Contracts.Command.CommandConstants.TextEditorGroup"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TYPECHAR">
            <summary>
            Type character. The argument is the string to add.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BACKSPACE">
            <summary>
            Delete Backwards; Delete the current selection, or if no selection, the previous character.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.RETURN">
            <summary>
            Break Line; Insert a line break at the current caret position.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TAB">
            <summary>
            Insert Tab; Insert a tab character at the current caret position.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BACKTAB">
            <summary>
            Tab Left; Move the caret back one tab stop.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETE">
            <summary>
            Delete; Delete the current selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.LEFT">
            <summary>
            Char Left; Move the caret left one character.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.LEFT_EXT">
            <summary>
            Char Left Extend; Move the caret left one character, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.RIGHT">
            <summary>
            Char Right; Move the caret right one character.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.RIGHT_EXT">
            <summary>
            Char Right Extend; Move the caret right one character, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.UP">
            <summary>
            Line Up.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.UP_EXT">
            <summary>
            Line Up Extend; Move the caret up one line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DOWN">
            <summary>
            Line Down; Move the caret down one line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DOWN_EXT">
            <summary>
            Line Down Extend; Move the caret down one line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.HOME">
            <summary>
            Document Start; Move the caret to the start of the document.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.HOME_EXT">
            <summary>
            Document Start Extend; Move the caret to the start of the document, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.END">
            <summary>
            Document End; Move the caret to the end of the document.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.END_EXT">
            <summary>
            Document End Extend; Move the caret to the end of the document, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BOL">
            <summary>
            Line Start; Move the caret to the start of the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BOL_EXT">
            <summary>
            Line Start Extend; Move the caret to the start of the line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.FIRSTCHAR">
            <summary>
            Line Start After Indentation; Move the caret to first non-white space character on the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.FIRSTCHAR_EXT">
            <summary>
            Line Start After Indentation Extend; Move the caret to first non-white space character on the line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.EOL">
            <summary>
            Line End; Move the caret to the end of the line..
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.EOL_EXT">
            <summary>
            Line End Extend; Move the caret to the end of the line, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.LASTCHAR">
            <summary>
            Line Last Char; Move the caret after the last non-white space character on the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.LASTCHAR_EXT">
            <summary>
            Line Last Char Extend; Move the caret after the last non-white space character on the line, extending the selection..
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.PAGEUP">
            <summary>
            Page Up; Move the caret up one page.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.PAGEUP_EXT">
            <summary>
            Page Up Extend; Move the caret up one page, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.PAGEDN">
            <summary>
            Page Down; Move the caret down one page.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.PAGEDN_EXT">
            <summary>
            Page Down Extend; Move the caret down one page, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TOPLINE">
            <summary>
            View Top; Move the caret to the top line in view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TOPLINE_EXT">
            <summary>
            View Top Extend; Move the caret to the top line in view, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BOTTOMLINE">
            <summary>
            View Bottom; Move the caret to the last line in view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BOTTOMLINE_EXT">
            <summary>
            View Bottom Extend; Move the caret to the last line in view, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLUP">
            <summary>
            Scroll Line Up: Scroll the document up one line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLDN">
            <summary>
            Scroll Line Down; Scroll the document down one line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLPAGEUP">
            <summary>
            Scroll Page Up: Scroll the document up one page..
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLPAGEDN">
            <summary>
            Scroll Page Down: Scroll the document down one page.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLLEFT">
            <summary>
            Scroll Column Left; Scroll the document left one column.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLRIGHT">
            <summary>
            Scroll Column Right; Scroll the document right one column.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLBOTTOM">
            <summary>
            Scroll Line Bottom; Scroll the current line to the bottom of the view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLCENTER">
            <summary>
            Scroll Line Center; Scroll the current line to the center of the view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SCROLLTOP">
            <summary>
            Scroll Line Top: Scroll the current line to the top of the view.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELECTALL">
            <summary>
            Select All; Select all of the document.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELTABIFY">
            <summary>
            Tabify Selection: Replace spaces in the current selection with tabs.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELUNTABIFY">
            <summary>
            Untabify Selection; Replace tabs in the current selection with spaces.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELLOWCASE">
            <summary>
            Make Lowercase; Change the text in the current selection to all lower case.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELUPCASE">
            <summary>
            Make Uppercase; Change the text in the current selection to all upper case.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELTOGGLECASE">
            <summary>
            Toggle Case: Toggle the case of the text in the current selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELTITLECASE">
            <summary>
            Capitalize; Capitalize the first letter of words in the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELSWAPANCHOR">
            <summary>
            Swap Anchor; Swap the anchor and end points of the current selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.GOTOLINE">
            <summary>
            Go To Line; Go to the indicated line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.GOTOBRACE">
            <summary>
            Goto Brace; Move the caret forward to the matching brace.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.GOTOBRACE_EXT">
            <summary>
            Goto Brace Extend; Move the caret forward to the matching brace, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TOGGLE_OVERTYPE_MODE">
            <summary>
            Overtype Mode; Toggle between insert and overtype insertion modes.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.CUTLINE">
            <summary>
            Line Cut; Cut all selected lines, or the current line if no selection, to the clipboard.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETELINE">
            <summary>
            Delete Line; Delete all selected lines, or the current line if no selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETEBLANKLINES">
            <summary>
            Delete Blank Lines; Delete all blank lines in the selection, or the current blank line if no selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETEWHITESPACE">
            <summary>
            Delete Horizontal White Space; Collapse white space in the selection, or delete white space adjacent to the caret if no selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETETOEOL">
            <summary>
            Delete To EOL; Delete from the caret position to the end of the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETETOBOL">
            <summary>
            Delete To BOL; Delete from the caret position to the beginning of the line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.OPENLINEABOVE">
            <summary>
            Line Open Above; Open a new line above the current line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.OPENLINEBELOW">
            <summary>
            Line Open Below: Open a new line below the current line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.INDENT">
            <summary>
            Increase Line Indent; Increase Indent.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.UNINDENT">
            <summary>
            Decrease Line Indent; Line Unindent.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TRANSPOSECHAR">
            <summary>
            Char Transpose: Transpose the characters on either side of the caret.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TRANSPOSEWORD">
            <summary>
            Word Transpose; Transpose the words on either side of the caret.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TRANSPOSELINE">
            <summary>
            Line Transpose; Transpose the current line and the line below.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SELECTCURRENTWORD">
            <summary>
            Select Current Word; Select the word under the caret.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETEWORDRIGHT">
            <summary>
            Word Delete To End; Delete the word to the right of the caret.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DELETEWORDLEFT">
            <summary>
            Word Delete To Start; Delete the word to the left of the caret.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.WORDPREV">
            <summary>
            Word Previous; Move the caret left one word.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.WORDPREV_EXT">
            <summary>
            Word Previous Extend; Move the caret left one word, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.WORDNEXT">
            <summary>
            Word Next; Move the caret right one word.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.WORDNEXT_EXT">
            <summary>
            Word Next Extend; Move the caret right one word, extending the selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.CANCEL">
            <summary>
            Selection Cancel; Cancel the current selection moving the caret to the anchor point.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TOGGLEVISSPACE">
            <summary>
            View White Space; Toggle the visibility of white space characters.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.COMPLETEWORD">
            <summary>
            Complete Word; Display Word Completion based on the current language.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SHOWMEMBERLIST">
            <summary>
            Show Member List; Display an object Member List based on the current language.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.FIRSTNONWHITEPREV">
            <summary>
            Line Start After Indentation Next; Move the caret to the first non-white-space character on the previous line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.FIRSTNONWHITENEXT">
            <summary>
            Line Start After Indentation Next; Move the caret to the first non-white-space character on the next line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.LEFT_EXT_COL">
            <summary>
            Char Left Extend Column; Move the caret left one character, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.RIGHT_EXT_COL">
            <summary>
            Char Right Extend Column; Move the caret right one character, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.UP_EXT_COL">
            <summary>
            Line Up Extend Column; Move the caret up one line, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DOWN_EXT_COL">
            <summary>
            Line Down Extend Column; Move the caret down one line, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.TOGGLEWORDWRAP">
            <summary>
            Toggle Word Wrap; Toggle Word Wrap mode.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.BOL_EXT_COL">
            <summary>
            Line Start Extend Column; Move the caret to the start of the line, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.EOL_EXT_COL">
            <summary>
            Line End Extend Column; Move the caret to the end of the line, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.WORDPREV_EXT_COL">
            <summary>
            Word Previous Extend Column; Move the caret left one word, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.WORDNEXT_EXT_COL">
            <summary>
            Word Next Extend Column; Move the caret right one word, extending the column selection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.ECMD_CONVERTTABSTOSPACES">
            <summary>
            Convert tabs to spaces
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.ECMD_CONVERTSPACESTOTABS">
            <summary>
            Convert spaces to tabs
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.EditorLineFirstColumn">
            <summary>
            Editor line first column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.EditorLineFirstColumnExtend">
            <summary>
            Editor line first column extended
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.ToggleConsumeFirstCompletionMode">
            <summary>
            Toggle consume first completion mode
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.ZoomReset">
            <summary>
            Resets the zoom level to the default zoom level
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.MoveSelLinesUp">
            <summary>
            Move selected lines up
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.MoveSelLinesDown">
            <summary>
            Move seleted lines down
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.SmartBreakLine">
            <summary>
            Smart Break Line
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.DECREASEFILTER">
            <summary>
            Decrease filter
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.INCREASEFILTER">
            <summary>
            Increase filter
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.QUICKINFO">
            <summary>
            Quick Info; Display Quick Info based on the current language.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextEditorIds.PARAMINFO">
            <summary>
            Parameter Info; Display Parameter Info based on the current language.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.TextEditorIdsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.TextEditorIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.TextEditorIds)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.TextEditorIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.TextEditorIds,System.Object)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <param name="arguments">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Command.TextReferenceIds">
            <summary>
            Reference IDs
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextReferenceIds.MoveToNextReference">
            <summary>
            Move the caret to the next reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextReferenceIds.MoveToPreviousReference">
            <summary>
            Move the caret to the previous reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextReferenceIds.MoveToNextDefinition">
            <summary>
            Move the caret to the next definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextReferenceIds.MoveToPreviousDefinition">
            <summary>
            Move the caret to the previous definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextReferenceIds.FollowReference">
            <summary>
            Move the caret to the definition the reference references
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Command.TextReferenceIds.FollowReferenceNewTab">
            <summary>
            Move the caret to the definition the reference references, use a new tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Command.TextReferenceIdsExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Command.TextReferenceIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.TextReferenceIds)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Command.TextReferenceIdsExtensions.ToCommandInfo(dnSpy.Contracts.Command.TextReferenceIds,System.Object)">
            <summary>
            Converts <paramref name="id"/> to a <see cref="T:dnSpy.Contracts.Command.CommandInfo"/>
            </summary>
            <param name="id">ID</param>
            <param name="arguments">Arguments or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Controls.ControlConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_MAINWINDOW">
            <summary>Guid of main window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DOCUMENTVIEWER_UICONTEXT">
            <summary>Guid of <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> UI control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DOCUMENT_TREEVIEW">
            <summary>Guid of document <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_ANALYZER_TREEVIEW">
            <summary>Guid of analyzer <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_SEARCH_CONTROL">
            <summary>Guid of search control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_SEARCH_LISTBOX">
            <summary>Guid of search <see cref="T:System.Windows.Controls.ListBox"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_BREAKPOINTS_CONTROL">
            <summary>Guid of debugger breakpoints control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_BREAKPOINTS_LISTVIEW">
            <summary>Guid of debugger breakpoints <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_CALLSTACK_CONTROL">
            <summary>Guid of debugger call stack control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_CALLSTACK_LISTVIEW">
            <summary>Guid of debugger call stack <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_LOCALS_CONTROL">
            <summary>Guid of debugger locals control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_LOCALS_LISTVIEW">
            <summary>Guid of debugger locals <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_EXCEPTIONS_CONTROL">
            <summary>Guid of debugger exceptions control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_EXCEPTIONS_LISTVIEW">
            <summary>Guid of debugger exceptions <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_THREADS_CONTROL">
            <summary>Guid of debugger threads control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_THREADS_LISTVIEW">
            <summary>Guid of debugger threads <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_MODULES_CONTROL">
            <summary>Guid of debugger modules control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_MODULES_LISTVIEW">
            <summary>Guid of debugger modules <see cref="T:System.Windows.Controls.ListView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_MEMORY_CONTROL">
            <summary>Guid of debugger memory control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_MEMORY_WPFHEXVIEWHOST">
            <summary>Guid of debugger memory <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewHost"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_DEBUGGER_MEMORY_HEXBOX">
            <summary>Guid of debugger memory <c>HexBox</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.ControlConstants.GUID_OUTPUT_CONTROL">
            <summary>Guid of output control</summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.FontUtilities">
            <summary>
            Font methods
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.FontUtilities.DEFAULT_FONT_SIZE">
            <summary>
            Default font size
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.GetDefaultMonospacedFont">
            <summary>
            Returns the default monospaced font
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.GetDefaultTextEditorFont">
            <summary>
            Returns the default text editor font (usually a monospaced font, but no guarantee)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.Exists(System.String)">
            <summary>
            Checks whether a font exists
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.FilterFontSize(System.Double)">
            <summary>
            Filters font size
            </summary>
            <param name="size">Size</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.IsSymbol(System.Windows.Media.FontFamily)">
            <summary>
            Checks whether <paramref name="ff"/> is a symbol font
            </summary>
            <param name="ff">Font</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.GetMonospacedFonts">
            <summary>
            Gets all monospaced fonts
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Controls.FontUtilities.IsMonospacedFont(System.Windows.Media.FontFamily)">
            <summary>
            Checks whether <paramref name="ff"/> is a monospaced font. It currently only checks
            chars 0x20-0x7E whether they have the same width and height.
            </summary>
            <param name="ff">Font</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IFocusable">
            <summary>
            Can focus elements
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IFocusable.CanFocus">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Controls.IFocusable.Focus"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IFocusable.Focus">
            <summary>
            Sets focus. Only called if <see cref="P:dnSpy.Contracts.Controls.IFocusable.CanFocus"/> is true
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IUIObjectProvider">
            <summary>
            UI object provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IUIObjectProvider.UIObject">
            <summary>
            UI object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IUIObjectProvider.FocusedElement">
            <summary>
            Focused element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IUIObjectProvider.ZoomElement">
            <summary>
            Gets the element that gets the <see cref="T:System.Windows.Media.ScaleTransform"/> or null if none
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IUIObjectProvider2">
            <summary>
            UI object provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IUIObjectProvider2.Tag">
            <summary>
            Can be set to any value by the owner
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfCommands">
            <summary>
            Stores commands and bindings added to a control
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IWpfCommands.Guid">
            <summary>
            Gets the guid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommands.Add(System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key)">
            <summary>
            Adds a key binding
            </summary>
            <param name="command">Gets called when the key combination is pressed</param>
            <param name="modifiers">Modifiers</param>
            <param name="key">Key</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommands.Add(System.Windows.Input.RoutedCommand,System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key)">
            <summary>
            Adds a command and key binding
            </summary>
            <param name="command">The routed command</param>
            <param name="realCommand">The real command that will handle <paramref name="command"/> events</param>
            <param name="modifiers">Modifiers</param>
            <param name="key">Key</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommands.Add(System.Windows.Input.RoutedCommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Windows.Input.Key)">
            <summary>
            Adds a command and key binding(s)
            </summary>
            <param name="command">The routed command</param>
            <param name="exec">Executes the command</param>
            <param name="canExec">Can-execute handler</param>
            <param name="modifiers1">Modifiers</param>
            <param name="key1">Key</param>
            <param name="modifiers2">Modifiers</param>
            <param name="key2">Key</param>
            <param name="modifiers3">Modifiers</param>
            <param name="key3">Key</param>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfCommandService">
            <summary>
            WPF command service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommandService.Add(System.Guid,System.Windows.UIElement)">
            <summary>
            Adds an element. The element is stored in a <see cref="T:System.WeakReference"/>
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Controls.ControlConstants.GUID_MAINWINDOW"/></param>
            <param name="elem">Element</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommandService.Remove(System.Guid,System.Windows.UIElement)">
            <summary>
            Removes an element
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Controls.ControlConstants.GUID_MAINWINDOW"/></param>
            <param name="elem">Element</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfCommandService.GetCommands(System.Guid)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Controls.IWpfCommands"/> instance
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Controls.ControlConstants.GUID_MAINWINDOW"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfFocusChecker">
            <summary>
            Can prevent <see cref="T:dnSpy.Contracts.Controls.IWpfFocusService"/> from calling <see cref="M:System.Windows.UIElement.Focus"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IWpfFocusChecker.CanFocus">
            <summary>
            true if <see cref="T:dnSpy.Contracts.Controls.IWpfFocusService"/> can give focus to a <see cref="T:System.Windows.UIElement"/>,
            false otherwise
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IWpfFocusService">
            <summary>
            Focuses <see cref="T:System.Windows.UIElement"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IWpfFocusService.CanFocus">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Controls.IWpfFocusService.Focus(System.Windows.IInputElement)"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.IWpfFocusService.Focus(System.Windows.IInputElement)">
            <summary>
            Gives the focus to <paramref name="element"/> by calling its <see cref="M:System.Windows.UIElement.Focus"/>
            method unless some other code prevents it. Eg., a menu could be open which could prevent
            the focus from being stolen by <paramref name="element"/>. Export a <see cref="T:dnSpy.Contracts.Controls.IWpfFocusChecker"/>
            class to prevent Focus() from being called.
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IZoomable">
            <summary>
            Zoomable control
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IZoomable.ZoomValue">
            <summary>
            Gets the current scale value (1.0 == 100%)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.IZoomableProvider">
            <summary>
            <see cref="T:dnSpy.Contracts.Controls.IZoomable"/> provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.IZoomableProvider.Zoomable">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Controls.IZoomable"/> instance or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.MetroWindow">
            <summary>
            The window class used by all dnSpy windows
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.FullScreenCommand">
            <summary>
            Full screen command
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.MetroWindowCreated">
            <summary>
            Raised when a new <see cref="T:dnSpy.Contracts.Controls.MetroWindow"/> instance has been created
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.OnSourceInitialized(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.WindowDpi">
            <summary>
            Gets the DPI
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Controls.MetroWindow.WindowDpiChanged">
            <summary>
            Raised when the DPI (<see cref="P:dnSpy.Contracts.Controls.MetroWindow.WindowDpi"/>) has changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ShowSystemMenuCommand">
            <summary>
            Show system menu command
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Controls.MetroWindow.IsFullScreenChanged">
            <summary>
            Raised when full screen state has changed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.IsFullScreenProperty">
            <summary>
            Is full screen property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.IsFullScreen">
            <summary>
            Gets/sets the full screen state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.SystemMenuImageProperty">
            <summary>
            System menu image property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.SystemMenuImage">
            <summary>
            Gets/sets the system menu image
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.MaximizedElementProperty">
            <summary>
            Maximized element property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.SetMaximizedElement(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the maximized-element value
            </summary>
            <param name="element">Element</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.GetMaximizedElement(System.Windows.UIElement)">
            <summary>
            Gets the maximized-element value
            </summary>
            <param name="element">Element</param>
            <returns></returns>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.UseResizeBorderProperty">
            <summary>
            Use resize border property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.UseResizeBorder">
            <summary>
            Gets/sets whether a resize border should be used
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.SetUseResizeBorder(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets the use-resize-border value
            </summary>
            <param name="element">Element</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.GetUseResizeBorder(System.Windows.UIElement)">
            <summary>
            Gets the use-resize-border value
            </summary>
            <param name="element">Element</param>
            <returns></returns>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.IsDebuggingProperty">
            <summary>
            Is debugging property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.IsDebugging">
            <summary>
            Gets/sets whether debugging mode is enabled
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ActiveCaptionProperty">
            <summary>
            Active caption property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ActiveCaptionTextProperty">
            <summary>
            Active caption text property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ActiveDebuggingBorderProperty">
            <summary>
            Active debugging border property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ActiveDefaultBorderProperty">
            <summary>
            Active default border property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.InactiveBorderProperty">
            <summary>
            Inactive border property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.InactiveCaptionProperty">
            <summary>
            Inactive caption property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.InactiveCaptionTextProperty">
            <summary>
            Inactive caption text property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ButtonInactiveBorderProperty">
            <summary>
            Button inactive border property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ButtonInactiveGlyphProperty">
            <summary>
            Button inactive glyph property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ButtonHoverInactiveProperty">
            <summary>
            Button hover inactive property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ButtonHoverInactiveBorderProperty">
            <summary>
            Button hover inactive border property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ButtonHoverInactiveGlyphProperty">
            <summary>
            Button hover inactive glyph property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ActiveCaption">
            <summary>
            Gets/sets the active caption brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ActiveCaptionText">
            <summary>
            Gets/sets the active caption text brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ActiveDebuggingBorder">
            <summary>
            Gets/sets the active debugging border brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ActiveDefaultBorder">
            <summary>
            Gets/sets the active default border brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.InactiveBorder">
            <summary>
            Gets/sets the inactive border brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.InactiveCaption">
            <summary>
            Gets/sets the inactive caption brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.InactiveCaptionText">
            <summary>
            Gets/sets the inactive caption text brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ButtonInactiveBorder">
            <summary>
            Gets/sets the button inactive border brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ButtonInactiveGlyph">
            <summary>
            Gets/stes the button inactive glyph brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ButtonHoverInactive">
            <summary>
            Gets/sets the button hover inactive brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ButtonHoverInactiveBorder">
            <summary>
            Gets/sets the button hover inactive border brush
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ButtonHoverInactiveGlyph">
            <summary>
            Gets/sets the button hover inactive glyph brush
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ShowMenuButtonProperty">
            <summary>
            Show menu button property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ShowMinimizeButtonProperty">
            <summary>
            Show minimize button property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ShowMaximizeButtonProperty">
            <summary>
            Show maximize button property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.ShowCloseButtonProperty">
            <summary>
            Show close button property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ShowMenuButton">
            <summary>
            Gets/sets whether to show the menu button
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ShowMinimizeButton">
            <summary>
            Gets/sets whether to show the minimize button
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ShowMaximizeButton">
            <summary>
            Gets/sets whether to show the maximize button
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindow.ShowCloseButton">
            <summary>
            Gets/sets whether to show the close button
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.MetroWindow.GridCaptionHeight">
            <summary>
            Gets the grid caption height
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.OnStateChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindow.SetScaleTransform(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the scale transform
            </summary>
            <param name="target">Target that gets the scale transform</param>
            <param name="scale">Scale to use where 1.0 is 100%</param>
        </member>
        <member name="T:dnSpy.Contracts.Controls.MetroWindowCreatedEventArgs">
            <summary>
            <see cref="P:dnSpy.Contracts.Controls.MetroWindowCreatedEventArgs.MetroWindow"/> created event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.MetroWindowCreatedEventArgs.MetroWindow">
            <summary>
            Gets the created instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.MetroWindowCreatedEventArgs.#ctor(dnSpy.Contracts.Controls.MetroWindow)">
            <summary>
            Constructor
            </summary>
            <param name="metroWindow">Created instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Controls.TextControl">
            <summary>
            Simple text control. Should be used in the options dialog box instead of <see cref="T:System.Windows.Controls.TextBlock"/>
            so the text can be highlighted.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.TextControl.TextWrappingProperty">
            <summary>
            Text wrapping dependency property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.TextControl.TextWrapping">
            <summary>
            Gets/sets the text wrapping
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Controls.TextControl.TextTrimmingProperty">
            <summary>
            Text trimming dependency property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Controls.TextControl.TextTrimming">
            <summary>
            Gets/sets the text trimming
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Controls.WindowBase">
            <summary>
            Window base class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.WindowBase.ClickOK">
            <summary>
            Clicks the OK button
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.WindowBase.ClickCancel">
            <summary>
            Clicks the Cancel button
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Controls.WindowBase.okButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            OK button handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dnSpy.Contracts.Controls.WindowBase.cancelButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancel button handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.IDecompilerService">
            <summary>
            Decompiler manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Decompiler.IDecompilerService.AllDecompilers">
            <summary>
            Gets all languages
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Decompiler.IDecompilerService.Decompiler">
            <summary>
            Current default decompiler
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Decompiler.IDecompilerService.DecompilerChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Decompiler.IDecompilerService.Decompiler"/> has been updated
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IDecompilerService.Find(System.Guid)">
            <summary>
            Finds a <see cref="T:dnSpy.Contracts.Decompiler.IDecompiler"/> instance. null is returned if it wasn't found
            </summary>
            <param name="guid">Language guid, see <see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.UniqueGuid"/> and <see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.GenericGuid"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IDecompilerService.FindOrDefault(System.Guid)">
            <summary>
            Finds a <see cref="T:dnSpy.Contracts.Decompiler.IDecompiler"/> instance. Returns the first one if the language wasn't found
            </summary>
            <param name="guid">Language guid, see <see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.UniqueGuid"/> and <see cref="P:dnSpy.Contracts.Decompiler.IDecompiler.GenericGuid"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.IMethodDebugService">
            <summary>
            Method debug info service
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Decompiler.IMethodDebugService.Count">
            <summary>
            Gets the number of <see cref="T:dnSpy.Contracts.Decompiler.MethodDebugInfo"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IMethodDebugService.FindByTextPosition(System.Int32,System.Boolean)">
            <summary>
            Gets <see cref="T:dnSpy.Contracts.Decompiler.MethodSourceStatement"/>s
            </summary>
            <param name="textPosition">Text position</param>
            <param name="sameMethod">true to only return statements within the method that contains <paramref name="textPosition"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IMethodDebugService.FindByCodeOffset(dnlib.DotNet.MethodDef,System.UInt32)">
            <summary>
            Gets a code <see cref="T:dnSpy.Contracts.Decompiler.MethodSourceStatement"/>
            </summary>
            <param name="method">Method</param>
            <param name="codeOffset">Code offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IMethodDebugService.FindByCodeOffset(dnSpy.Contracts.Metadata.ModuleTokenId,System.UInt32)">
            <summary>
            Gets a code <see cref="T:dnSpy.Contracts.Decompiler.MethodSourceStatement"/>
            </summary>
            <param name="token">Token</param>
            <param name="codeOffset">Code offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IMethodDebugService.TryGetMethodDebugInfo(dnlib.DotNet.MethodDef)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Decompiler.MethodDebugInfo"/> or null if it doesn't exist
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IMethodDebugService.TryGetMethodDebugInfo(dnSpy.Contracts.Metadata.ModuleTokenId)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Decompiler.MethodDebugInfo"/> or null if it doesn't exist
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.IMethodDebugService.GetStatementsByTextSpan(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Decompiler.MethodSourceStatement"/>s that intersect a span
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.MethodDebugServiceConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Decompiler.MethodDebugServiceConstants.MethodDebugServiceKey">
            <summary>
            <see cref="T:dnSpy.Contracts.Decompiler.IMethodDebugService"/> key
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Decompiler.MethodDebugServiceExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.MethodDebugServiceExtensions.GetMethodDebugService(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Decompiler.IMethodDebugService"/> instance
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Decompiler.MethodDebugServiceExtensions.TryGetMethodDebugService(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Decompiler.IMethodDebugService"/> or null if none exists
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DocumentConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.DocumentConstants.ORDER_DEFAULT_DOCUMENT_PROVIDER">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Documents.IDsDocumentProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.DocumentConstants.DOCUMENTTYPE_FILE">
            <summary>
            A normal <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> created from a file. <see cref="P:dnSpy.Contracts.Documents.DsDocumentInfo.Name"/>
            is the filename.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.DocumentConstants.DOCUMENTTYPE_GAC">
            <summary>
            A <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> created from a file in the GAC. <see cref="P:dnSpy.Contracts.Documents.DsDocumentInfo.Name"/>
            is the assembly name.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.DocumentConstants.DOCUMENTTYPE_REFASM">
            <summary>
            A <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> created from a file in the GAC or the reference assemblies
            folder. <see cref="P:dnSpy.Contracts.Documents.DsDocumentInfo.Name"/> is the assembly name followed by 
            <see cref="F:dnSpy.Contracts.Documents.DocumentConstants.REFERENCE_ASSEMBLY_SEPARATOR"/> followed by the path to the reference file in
            case it's not found in the GAC.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.DocumentConstants.REFERENCE_ASSEMBLY_SEPARATOR">
            <summary>
            String separating assembly full name and reference assembly path
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsDocument">
            <summary>
            Document base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.SerializedDocument">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.Key">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.AssemblyDef">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.ModuleDef">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.PEImage">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.Filename">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.OnPropertyChanged(System.String)">
            <summary>
            Gets called when a property has changed
            </summary>
            <param name="propName">Name of property</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.IsAutoLoaded">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.Children">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocument.ChildrenLoaded">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.CreateChildren">
            <summary>
            Creates the children
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.AddAnnotation``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.Annotation``1">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.Annotations``1">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocument.RemoveAnnotations``1">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsUnknownDocument">
            <summary>
            Unknown type of file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsUnknownDocument.SerializedDocument">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsUnknownDocument.Key">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsUnknownDocument.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsPEDocument">
            <summary>
            PE file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsPEDocument.SerializedDocument">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsPEDocument.Key">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsPEDocument.PEImage">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsPEDocument.#ctor(dnlib.PE.IPEImage)">
            <summary>
            Constructor
            </summary>
            <param name="peImage">PE image</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsPEDocument.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsDotNetDocumentBase">
            <summary>
            .NET file base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDotNetDocumentBase.ModuleDef">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDotNetDocumentBase.IsActive">
            <inheritdoc/>
        </member>
        <member name="F:dnSpy.Contracts.Documents.DsDotNetDocumentBase.loadedSymbols">
            <summary>true if the symbols have been loaded</summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocumentBase.#ctor(dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="loadSyms">true if symbols should be loaded</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocumentBase.CreateModuleContext(dnlib.DotNet.IAssemblyResolver)">
            <summary>
            Creates a module context
            </summary>
            <param name="asmResolver">Assembly resolver</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsDotNetDocument">
            <summary>
            .NET file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDotNetDocument.Key">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDotNetDocument.SerializedDocument">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.#ctor(dnSpy.Contracts.Documents.DsDocumentInfo,dnlib.DotNet.ModuleDef,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="documentInfo">Document info</param>
            <param name="module">Module</param>
            <param name="loadSyms">true to load symbols</param>
            <param name="isAsmNode">true if it's an assembly node, false if it's a module node</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.OnPropertyChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.CreateAssembly(dnSpy.Contracts.Documents.DsDocumentInfo,dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Creates an assembly
            </summary>
            <param name="documentInfo">Document info</param>
            <param name="module">Module</param>
            <param name="loadSyms">true to load symbols</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.CreateModule(dnSpy.Contracts.Documents.DsDocumentInfo,dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Creates a module
            </summary>
            <param name="documentInfo">Document info</param>
            <param name="module">Module</param>
            <param name="loadSyms">true to load symbols</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.CreateAssembly(dnSpy.Contracts.Documents.IDsDotNetDocument)">
            <summary>
            Creates an assembly
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.CreateChildren">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDotNetDocument.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Documents.MemoryMappedIOHelper">
            <summary>
            mmap'd I/O helper methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.MemoryMappedIOHelper.DisableMemoryMappedIO(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Disable memory mapped I/O
            </summary>
            <param name="document">Document</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.MemoryMappedIOHelper.DisableMemoryMappedIO(dnlib.PE.IPEImage)">
            <summary>
            Disable memory mapped I/O
            </summary>
            <param name="peImage">PE image</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsDocumentInfo">
            <summary>
            Document info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocumentInfo.Name">
            <summary>
            Name, eg. filename if <see cref="P:dnSpy.Contracts.Documents.DsDocumentInfo.Type"/> is <see cref="F:dnSpy.Contracts.Documents.DocumentConstants.DOCUMENTTYPE_FILE"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.DsDocumentInfo.Type">
            <summary>
            Document type, eg. <see cref="F:dnSpy.Contracts.Documents.DocumentConstants.DOCUMENTTYPE_FILE"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentInfo.CreateDocument(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.DsDocumentInfo"/> used by files on disk
            </summary>
            <param name="filename">Filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentInfo.CreateGacDocument(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.DsDocumentInfo"/> used by files in the GAC
            </summary>
            <param name="asmFullName">Full name of assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentInfo.CreateReferenceAssembly(System.String,System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.DsDocumentInfo"/> used by reference assemblies
            </summary>
            <param name="asmFullName">Full name of assembly</param>
            <param name="refFilePath">Path to the reference assembly. It's used if it's not found
            in the GAC.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentInfo.#ctor(System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name, see <see cref="P:dnSpy.Contracts.Documents.DsDocumentInfo.Name"/></param>
            <param name="type">Type, see <see cref="P:dnSpy.Contracts.Documents.DsDocumentInfo.Type"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentInfo.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.FilenameKey">
            <summary>
            Compares filenames
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.FilenameKey.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.FilenameKey.Equals(dnSpy.Contracts.Documents.FilenameKey)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.FilenameKey.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.FilenameKey.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.FilenameKey.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IAnnotations">
            <summary>
            Add/remove annotations
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IAnnotations.AddAnnotation``1(``0)">
            <summary>
            Adds an annotation and returns it
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="annotation">Value to add</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IAnnotations.Annotation``1">
            <summary>
            Gets the first annotation of a certain type or null if none was found
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IAnnotations.Annotations``1">
            <summary>
            Gets all annotations of a certain type
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IAnnotations.RemoveAnnotations``1">
            <summary>
            Removes all annotations of a certain type
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsDocument">
            <summary>
            A document, see also <see cref="T:dnSpy.Contracts.Documents.IDsDotNetDocument"/> and <see cref="T:dnSpy.Contracts.Documents.IDsPEDocument"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.SerializedDocument">
            <summary>
            Used to serialize this instance. Null if it can't be serialized.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.Key">
            <summary>
            Gets a key for this document. Eg. a <see cref="T:dnSpy.Contracts.Documents.FilenameKey"/> instance if it's a file
            loaded from disk. It's used to detect duplicate documents when adding a new document.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.AssemblyDef">
            <summary>
            Gets the assembly or null if it's not a .NET file or if it's a netmodule
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.ModuleDef">
            <summary>
            Gets the module or null if it's not a .NET file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.PEImage">
            <summary>
            Gets the PE image or null if it's not available
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.Filename">
            <summary>
            Gets/sets the filename
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.IsAutoLoaded">
            <summary>
            true if it was not loaded by the user
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.Children">
            <summary>
            Gets any children. Eg. if it's a .NET assembly, the children would be modules of the
            assembly.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocument.ChildrenLoaded">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Documents.IDsDocument.Children"/> has been initialized
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.DsDocumentExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentExtensionMethods.GetShortName(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Gets the short name of <paramref name="document"/>, which is usually the filename without
            the extension.
            </summary>
            <param name="document">Document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentExtensionMethods.NonLoadedDescendantsAndSelf(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Gets self and all descendants that have been loaded
            </summary>
            <param name="document">Document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentExtensionMethods.GetModules``1(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Gets all modules in this instance and any children
            </summary>
            <typeparam name="T"><see cref="T:dnlib.DotNet.ModuleDefMD"/> or <see cref="T:dnlib.DotNet.ModuleDefMD"/></typeparam>
            <param name="document">Document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentExtensionMethods.GetModules``1(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Documents.IDsDocument})">
            <summary>
            Gets all modules in this instance and any children
            </summary>
            <typeparam name="T"><see cref="T:dnlib.DotNet.ModuleDefMD"/> or <see cref="T:dnlib.DotNet.ModuleDefMD"/></typeparam>
            <param name="documents">Documents</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentExtensionMethods.GetAllChildrenAndSelf(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Gets self and all its children
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.DsDocumentExtensionMethods.GetAllChildren(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Gets all its children and their children
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsDocumentNameKey">
            <summary>
            A document name key
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsDocumentProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocumentProvider.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentProvider.Create(dnSpy.Contracts.Documents.IDsDocumentService,dnSpy.Contracts.Documents.DsDocumentInfo)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance or returns null. This method can be
            called in <c>any</c> thread so the code must be thread safe.
            </summary>
            <param name="documentService">Document manager</param>
            <param name="documentInfo">Document to create</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentProvider.CreateKey(dnSpy.Contracts.Documents.IDsDocumentService,dnSpy.Contracts.Documents.DsDocumentInfo)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.IDsDocumentNameKey"/> instance
            </summary>
            <param name="documentService">Document manager</param>
            <param name="documentInfo">Document to create</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsDocumentService">
            <summary>
            Manages all loaded documents (which are shown in the treeview)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.DisableAssemblyLoad">
            <summary>
            Call this to disable loading assemblies in the document list until the return value's
            <see cref="M:System.IDisposable.Dispose"/> method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Documents.IDsDocumentService.CollectionChanged">
            <summary>
            Notified when the collection gets changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.GetDocuments">
            <summary>
            Gets all documents. Doesn't include any children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.GetOrAdd(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Adds a new <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance if it hasn't already been added. Returns
            the input or the existing instance.
            </summary>
            <param name="document">Document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.ForceAdd(dnSpy.Contracts.Documents.IDsDocument,System.Boolean,System.Object)">
            <summary>
            Adds <paramref name="document"/> to the list, even if another instance has already been
            inserted. Returns the input.
            </summary>
            <param name="document">Document</param>
            <param name="delayLoad">true to delay load</param>
            <param name="data">Data passed to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.TryGetOrCreate(dnSpy.Contracts.Documents.DsDocumentInfo,System.Boolean)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance or returns an existing one. null is
            returned if it couldn't be created.
            </summary>
            <param name="info">Document info</param>
            <param name="isAutoLoaded">New value of <see cref="P:dnSpy.Contracts.Documents.IDsDocument.IsAutoLoaded"/> if the
            document gets created.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.TryCreateOnly(dnSpy.Contracts.Documents.DsDocumentInfo)">
            <summary>
            Tries to create a new <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> without adding it to the list. null is
            returned if it couldn't be created.
            </summary>
            <param name="info">Document info</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.Resolve(dnlib.DotNet.IAssembly,dnlib.DotNet.ModuleDef)">
            <summary>
            Resolves an assembly. Returns null if it couldn't be resolved.
            </summary>
            <param name="asm">Assembly</param>
            <param name="sourceModule">The module that needs to resolve an assembly or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.FindAssembly(dnlib.DotNet.IAssembly)">
            <summary>
            Returns an assembly or null if it's not in the list
            </summary>
            <param name="assembly">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.Find(dnSpy.Contracts.Documents.IDsDocumentNameKey)">
            <summary>
            Returns an inserted <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance or null
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.Remove(dnSpy.Contracts.Documents.IDsDocumentNameKey)">
            <summary>
            Removes a document
            </summary>
            <param name="key">Key of document to remove. See <see cref="P:dnSpy.Contracts.Documents.IDsDocument.Key"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.Remove(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Documents.IDsDocument})">
            <summary>
            Removes documents
            </summary>
            <param name="documents">Documents</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.Clear">
            <summary>
            Clears all documents
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.SetDispatcher(System.Action{System.Action})">
            <summary>
            Can be called once to set a delegate instance that will execute code in a certain
            thread. <see cref="E:dnSpy.Contracts.Documents.IDsDocumentService.CollectionChanged"/> can be called in any thread unless this method
            gets called.
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentService.CreateDocument(dnSpy.Contracts.Documents.DsDocumentInfo,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/>
            </summary>
            <param name="documentInfo">Document info</param>
            <param name="filename">Filename</param>
            <param name="isModule">true if it's a module, false if it's an assembly</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IDsDocumentService.AssemblyResolver">
            <summary>
            The assembly resolver it uses
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsDocumentServiceProvider">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.IDsDocumentService"/> creator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IDsDocumentServiceProvider.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.IDsDocumentService"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsDotNetDocument">
            <summary>
            A .NET file
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IDsPEDocument">
            <summary>
            A PE file (NOTE: not a .NET file, see <see cref="T:dnSpy.Contracts.Documents.IDsDotNetDocument"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IInMemoryDocument">
            <summary>
            In-memory document
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.IInMemoryDocument.IsActive">
            <summary>
            true if the document is still being used (eg. the user is debugging something and
            the document is loaded in the debugged process)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.IMethodAnnotations">
            <summary>
            Adds data to methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IMethodAnnotations.IsBodyModified(dnlib.DotNet.MethodDef)">
            <summary>
            Returns true if <paramref name="method"/> has been modified
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.IMethodAnnotations.SetBodyModified(dnlib.DotNet.MethodDef,System.Boolean)">
            <summary>
            Sets the is-modified state
            </summary>
            <param name="method">Method</param>
            <param name="isModified">New value</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs">
            <summary>
            Event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.Documents">
            <summary>
            All documents
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.Data">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.CreateClear(dnSpy.Contracts.Documents.IDsDocument[],System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Clear"/> instance
            </summary>
            <param name="clearedDocuments">All cleared documents</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.CreateAdd(dnSpy.Contracts.Documents.IDsDocument,System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Add"/> instance
            </summary>
            <param name="document">Added document</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.CreateRemove(dnSpy.Contracts.Documents.IDsDocument,System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Remove"/> instance
            </summary>
            <param name="document">Removed document</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.NotifyDocumentCollectionChangedEventArgs.CreateRemove(dnSpy.Contracts.Documents.IDsDocument[],System.Object)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Remove"/> instance
            </summary>
            <param name="documents">Removed documents</param>
            <param name="data">Data to send to listeners</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.NotifyDocumentCollectionType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Clear">
            <summary>
            All documents have been cleared
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Add">
            <summary>
            A new document was added
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.NotifyDocumentCollectionType.Remove">
            <summary>
            A document was removed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> that creates its output asynchronously in another thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent.NeedAsyncWork(dnSpy.Contracts.Documents.Tabs.IShowContext)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent.CreateContentAsync(dnSpy.Contracts.Documents.Tabs.IAsyncShowContext)"/>
            should be called
            </summary>
            <param name="ctx">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent.CreateContentAsync(dnSpy.Contracts.Documents.Tabs.IAsyncShowContext)">
            <summary>
            Called in the worker thread
            </summary>
            <param name="ctx">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent.OnShowAsync(dnSpy.Contracts.Documents.Tabs.IShowContext,dnSpy.Contracts.Documents.Tabs.IAsyncShowResult)">
            <summary>
            Called in the main UI thread after the worker thread has exited or was interrupted
            </summary>
            <param name="ctx">Context</param>
            <param name="result">Result</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DefaultDocumentTabContentProviderConstants">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProvider"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DefaultDocumentTabContentProviderConstants.DEFAULT_HANDLER">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProvider"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocumentModifiedEventArgs">
            <summary>
            Document modified event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentModifiedEventArgs.Documents">
            <summary>
            Gets the modified documents
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentModifiedEventArgs.#ctor(dnSpy.Contracts.Documents.IDsDocument[])">
            <summary>
            Constructor
            </summary>
            <param name="documents">Documents</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent">
            <summary>
            Contains the data used to generate the content shown in a tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.Nodes">
            <summary>
            Gets all nodes used to generate the content
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.OnShow(dnSpy.Contracts.Documents.Tabs.IShowContext)">
            <summary>
            Called to show its content in the UI. Derive from <see cref="T:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent"/> to
            create the content in a worker thread.
            </summary>
            <param name="ctx">UI Context created by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.CreateUIContext(dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator)"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.OnHide">
            <summary>
            Called when the content is hidden
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.OnSelected">
            <summary>
            Called when its tab has been selected. Only called if this is the tab's active content.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.OnUnselected">
            <summary>
            Called when its tab has been unselected. Only called if this is the tab's active content.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.ToolTip">
            <summary>
            Gets the tooltip or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.CanClone">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.Clone"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.Clone">
            <summary>
            Clones this instance. Can only be called if <see cref="P:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.CanClone"/> is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.CreateUIContext(dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator)">
            <summary>
            Creates the <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/> instance needed by this instance. This
            instance will only be used in this tab.
            </summary>
            <param name="locator">Can be used to get a per-tab shared instance</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.DocumentTab">
            <summary>
            Written by the owner <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTab"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocumentTabReferenceResult">
            <summary>
            Created by <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabReferenceResult.DocumentTabContent">
            <summary>
            New tab content, never null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabReferenceResult.UIState">
            <summary>
            UI state (passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.RestoreUIState(System.Object)"/>) or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabReferenceResult.OnShownHandler">
            <summary>
            Called when the output has been shown, can be null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabReferenceResult.#ctor(dnSpy.Contracts.Documents.Tabs.DocumentTabContent,System.Object,System.Action{dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="documentTabContent">New content</param>
            <param name="uiState">UI state (passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.RestoreUIState(System.Object)"/>) or null</param>
            <param name="onShownHandler">Handler or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext">
            <summary>
            UI content shared by some <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instances, eg. it could contain
            the text editor. Only one instance per tab is allocated and stored in a <see cref="T:System.WeakReference"/>.
            Implement <see cref="T:System.IDisposable"/> to get called when the tab is removed (only called if
            this instance hasn't been GC'd)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.FocusedElement">
            <summary>
            Gets the element that gets focused or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.ZoomElement">
            <summary>
            Gets the element that gets zoomed or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.CreateUIState">
            <summary>
            Saves UI state, eg. line number, caret position, etc
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.RestoreUIState(System.Object)">
            <summary>
            Restores UI state. <paramref name="obj"/> was created by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.CreateUIState"/> but
            could also be null or an invalid value. The callee is responsible for verifying
            <paramref name="obj"/>.
            </summary>
            <param name="obj">Serialized UI state</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.DeserializeUIState(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Creates UI state from serialized data
            </summary>
            <param name="section">Serialized data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.SerializeUIState(dnSpy.Contracts.Settings.ISettingsSection,System.Object)">
            <summary>
            Saves UI state to <paramref name="section"/>. <paramref name="obj"/> was created
            by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.CreateUIState"/> but should be verified by the callee.
            </summary>
            <param name="section">Destination</param>
            <param name="obj">UI state, created by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.CreateUIState"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.OnShow">
            <summary>
            Called when this instance will be shown in a tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.OnHide">
            <summary>
            Called when another <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/> instance will be shown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.DocumentTab">
            <summary>
            Gets the owner tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.Text">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.ColorCollection">
            <summary>
            Gets the colors
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.ReferenceCollection">
            <summary>
            Gets the references
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.MethodDebugInfos">
            <summary>
            Gets the method debug info collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.#ctor(System.String,dnSpy.Contracts.Text.CachedTextColorsCollection,dnSpy.Contracts.Text.SpanDataCollection{dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
            <param name="colorCollection">Colors</param>
            <param name="referenceCollection">References</param>
            <param name="customDataDict">Custom data dictionary</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.TryGetCustomData``1(System.String,``0@)">
            <summary>
            Gets custom data. Returns false if it doesn't exist.
            </summary>
            <typeparam name="TData">Type of data</typeparam>
            <param name="id">Key, eg., <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.DebugInfo"/></param>
            <param name="data">Updated with data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.GetCustomData``1(System.String)">
            <summary>
            Gets custom data
            </summary>
            <typeparam name="TData">Type of data</typeparam>
            <param name="id">Key, eg., <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.DebugInfo"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds">
            <summary>
            Custom data IDs passed to eg. <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.GetCustomData``1(System.String)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.DebugInfo">
            <summary>
            Data is a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> collection (<see cref="T:dnSpy.Contracts.Decompiler.MethodDebugInfo"/> elements)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.SpanReference">
            <summary>
            Data is a <see cref="T:dnSpy.Contracts.Text.SpanDataCollection`1"/> (<see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceAndId"/> elements)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.BracePair">
            <summary>
            Brace pair data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.BlockStructure">
            <summary>
            Block structure data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.LineSeparator">
            <summary>
            <see cref="T:dnSpy.Contracts.Decompiler.LineSeparator"/> data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerExtensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerExtensions.TryGetDocumentViewer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> or null
            </summary>
            <param name="textBuffer">Text buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListener"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_DEFAULT">
            <summary>Default order</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_GLYPHTEXTMARKERSERVICE">
            <summary>Glyph text marker service</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_METHODDEBUGSERVICE">
            <summary>create <see cref="T:dnSpy.Contracts.Decompiler.IMethodDebugService"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_DEBUGGER_METHODLOCALPROVIDER">
            <summary>Debugger: locals (<c>MethodLocalProvider</c>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_BRACEPAIRSERVICE">
            <summary>Brace pair service</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_BLOCKSTRUCTURESERVICE">
            <summary>Block structure service</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_LINESEPARATORSERVICE">
            <summary>Line separator service</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_UIELEMENTSERVICE">
            <summary><see cref="T:System.Windows.UIElement"/> service</summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNode">
            <summary>
            Decompiles <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> instances. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNode.Decompile(dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext,dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData)">
            <summary>
            Decompiles <paramref name="node"/> or returns false if someone else should have a try.
            This method can be called in any thread.
            </summary>
            <param name="context">Context</param>
            <param name="node">Node to decompile</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNode"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeCollection">
            <summary>
            Decompiles <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> instances. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeCollectionAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeCollection.Decompile(dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext,dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData[])">
            <summary>
            Decompiles <paramref name="nodes"/> or returns false if someone else should have a try.
            This method can be called in any thread
            </summary>
            <param name="context">Context</param>
            <param name="nodes">Nodes to decompile</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeCollectionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeCollectionMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeCollectionAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeCollectionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeCollection"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeCollectionAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDecompileNodeCollectionAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNode"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.Output">
            <summary>
            Output to use
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.DocumentWriterService">
            <summary>
            Writes some known documents
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.Decompiler">
            <summary>
            Language to use
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.DecompilationContext">
            <summary>
            Gets the decompilation context
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.UIThread``1(System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> in the UI thread and waits for it to complete, then
            returns the result to the caller. This can be used to load the node's
            <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/> property since it can only be loaded in the UI thread.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="func">Delegate to execute</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.ContentType">
            <summary>
            Sets the content type. See also <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.ContentTypeString"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.ContentTypeString">
            <summary>
            Sets the content type. See also <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext.ContentType"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileSelf">
            <summary>
            Decompiles itself. Can be implemented by <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> nodes.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileSelf.Decompile(dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext)">
            <summary>
            Decompiles itself or returns false if someone else should have a try. This method can be
            called in any thread.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer">
            <summary>
            Document viewer, it also derives from <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.DocumentTab">
            <summary>
            Gets the owner tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.UIObject">
            <summary>
            Gets the document viewer control
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Sets new content. Returns true if the content got updated, false if the input was identical
            to the current content.
            </summary>
            <param name="content">New content</param>
            <param name="contentType">Content type or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.AddContentData(System.Object,System.Object)">
            <summary>
            Adds data that is removed each time <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/>
            gets called with new content.
            </summary>
            <param name="key">Key</param>
            <param name="data">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.GetContentData(System.Object)">
            <summary>
            Returns data added by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.AddContentData(System.Object,System.Object)"/> or null if not found
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.ShowCancelButton(System.String,System.Action)">
            <summary>
            Shows a cancel button. Can be used when decompiling in another thread
            </summary>
            <param name="message">Message to show to the user or null</param>
            <param name="onCancel">Called if the user clicks the cancel button</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.HideCancelButton">
            <summary>
            Hides the cancel button shown by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.ShowCancelButton(System.String,System.Action)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.TextViewHost">
            <summary>
            Gets the text view host. Don't write to the text buffer directly, use
            <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/> to write new text.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.TextView">
            <summary>
            Gets the text view. Don't write to the text buffer directly, use
            <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/> to write new text.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.Caret">
            <summary>
            Gets the caret
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.Selection">
            <summary>
            Gets the selection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.Content">
            <summary>
            Gets the current content (set by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.ReferenceCollection">
            <summary>
            Gets the reference collection (<see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent.ReferenceCollection"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SelectedReference">
            <summary>
            Gets the reference at the caret or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.GetSelectedReferences">
            <summary>
            Gets all references intersecting with the selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.MoveCaretToReference(System.Object,dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions)">
            <summary>
            Moves the caret to a reference, this can be a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference"/>,
            or a <see cref="T:dnlib.DotNet.IMemberDef"/>. Anything else isn't currently supported.
            </summary>
            <param name="ref">Reference</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.MoveCaretToPosition(System.Int32,dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions)">
            <summary>
            Moves the caret to a position in the document
            </summary>
            <param name="position">Position</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.MoveCaretToSpan(System.Int32,System.Int32,dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions)">
            <summary>
            Moves the caret to a span in the document and selects it
            </summary>
            <param name="position">Position</param>
            <param name="length">Length of span</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.MoveCaretToSpan(Microsoft.VisualStudio.Text.Span,dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions)">
            <summary>
            Moves the caret to a span in the document and selects it
            </summary>
            <param name="span">Span</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.MoveCaretToSpan(dnSpy.Contracts.Text.SpanData{dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo},dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions)">
            <summary>
            Moves the caret to a span in the document and selects it
            </summary>
            <param name="refInfo">Reference and span</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SaveReferencePosition">
            <summary>
            Saves current location relative to some reference in the code. Return value can be
            passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.RestoreReferencePosition(System.Object)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.RestoreReferencePosition(System.Object)">
            <summary>
            Restores location saved by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SaveReferencePosition"/>
            </summary>
            <param name="obj">Saved position</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.GotNewContent">
            <summary>
            Raised after this instance got new content (its <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/>
            method was called). It's only raised if the new content is different from the current
            content. I.e., calling it twice in a row with the same content won't raise this event
            the second time. This event is raised before <see cref="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerService.GotNewContent"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.Removed">
            <summary>
            Raised when this instance has been closed. This event is raised before
            <see cref="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerService.Removed"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext">
            <summary>
            Context passed to <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProvider"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext.DocumentViewer">
            <summary>
            Gets the document viewer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext.Text">
            <summary>
            Gets the new text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext.ContentType">
            <summary>
            Gets the content type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext.GetData``1(System.String)">
            <summary>
            Gets data added by <see cref="M:dnSpy.Contracts.Decompiler.IDecompilerOutput.AddCustomData``1(System.String,``0)"/>
            </summary>
            <typeparam name="TData">Type of data</typeparam>
            <param name="id">Key, eg. <see cref="F:dnSpy.Contracts.Decompiler.PredefinedCustomDataIds.DebugInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext.AddCustomData(System.String,System.Object)">
            <summary>
            Adds data that gets stored in <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent"/>
            </summary>
            <param name="id">Key, eg. <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContentDataIds.DebugInfo"/></param>
            <param name="data">Data</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProvider">
            <summary>
            Uses custom data created by the decompiler and transforms it to some other data. Use
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerCustomDataProviderAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProvider.OnCustomData(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataContext)">
            <summary>
            Gets called to create data that gets stored in an <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent"/> instance
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerCustomDataProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerCustomDataProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerCustomDataProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerCustomDataProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerCustomDataProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerOutput">
            <summary>
            dnSpy text output
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerOutput.CanBeCached">
            <summary>
            true if the output can be cached
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerOutput.DisableCaching">
            <summary>
            Called to disable caching of the result
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerOutput.AddUIElement(System.Func{System.Windows.UIElement})">
            <summary>
            Adds a UI element
            </summary>
            <param name="createElement">Creates the UI element. Only called on the UI thread</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerOutput.AddButton(System.String,System.Action)">
            <summary>
            Adds a button
            </summary>
            <param name="buttonText">Button text</param>
            <param name="clickHandler">Button click handler</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessor">
            <summary>
            Gets a chance to add custom data before creating the content. Use
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerPostProcessorAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessor.PostProcess(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorContext)">
            <summary>
            Gets called just before all <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerCustomDataProvider"/> instances
            get called. It's possible to call <see cref="M:dnSpy.Contracts.Decompiler.IDecompilerOutput.AddCustomData``1(System.String,``0)"/>
            but not to add any text.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerPostProcessorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerPostProcessorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessor"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerPostProcessorAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerPostProcessorAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerPostProcessorAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorContext">
            <summary>
            Context passed to <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessor"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorContext.DocumentViewerOutput">
            <summary>
            Gets the output. It's not possible to write new text, but custom data can be added.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorContext.DocumentViewer">
            <summary>
            Gets the document viewer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorContext.Text">
            <summary>
            Gets the new text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerPostProcessorContext.ContentType">
            <summary>
            Gets the content type
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnablerProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnabler"/>s. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerReferenceEnablerProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnablerProvider.Create(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnabler"/> or returns null
            </summary>
            <param name="documentViewer">Document viewer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnablerProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnablerProviderMetadata.Id">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerReferenceEnablerProviderAttribute.Id"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerReferenceEnablerProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnablerProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerReferenceEnablerProviderAttribute.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="id">Reference id, eg. <see cref="F:dnSpy.Contracts.Decompiler.PredefinedSpanReferenceIds.HighlightRelatedKeywords"/>. This id
            must equal an id stored in <see cref="P:dnSpy.Contracts.Decompiler.SpanReference.Id"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerReferenceEnablerProviderAttribute.Id">
            <summary>
            Reference id, eg. <see cref="F:dnSpy.Contracts.Decompiler.PredefinedSpanReferenceIds.HighlightRelatedKeywords"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnabler">
            <summary>
            Enables or disables highlighting of <see cref="T:dnSpy.Contracts.Decompiler.SpanReference"/> references
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnabler.IsEnabledChanged">
            <summary>
            Raised whenever <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnabler.IsEnabled"/> has changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerReferenceEnabler.IsEnabled">
            <summary>
            true if the reference is enabled and can be highlighted, false if the reference
            is disabled and can't be highlighted.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerService">
            <summary>
            Notifies listeners when certain <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> events occur. You can
            manually import this instance and hook the events or you can export an <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListener"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerService.Added">
            <summary>
            Raised when a new <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance has been created
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerService.Removed">
            <summary>
            Raised when a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance has been closed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerService.GotNewContent">
            <summary>
            Raised when the <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance gets new content
            (its <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/>
            method was called). It's only raised if the new content is different from the current
            content. I.e., calling it twice in a row with the same content won't raise this event
            the second time.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListener">
            <summary>
            Gets notified when a document viewer event occurs. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerListenerAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListener.OnEvent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEventArgs)">
            <summary>
            Raised when some event occurred
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListenerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListenerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerListenerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerListenerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListener"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerListenerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerListenerAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance, eg. <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerListenerConstants.ORDER_GLYPHTEXTMARKERSERVICE"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ExportDocumentViewerListenerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewerListener"/> event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent.Added">
            <summary>
            Raised when a new <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance has been created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent.Removed">
            <summary>
            Raised when a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance has been closed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent.GotNewContent">
            <summary>
            Raised after the <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance got new content
            (its <see cref="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer.SetContent(dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)"/>
            method was called). It's only raised if the new content is different from the current
            content. I.e., calling it twice in a row with the same content won't raise this event
            the second time.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEventArgs">
            <summary>
            Document viewer event args base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEventArgs.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEventArgs.DocumentViewer">
            <summary>
            Gets the instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEventArgs.#ctor(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer)">
            <summary>
            Constructor
            </summary>
            <param name="documentViewer"><see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerAddedEventArgs">
            <summary>
            Document viewer added event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerAddedEventArgs.EventType">
            <summary>
            Returns the event type, which is <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent.Added"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerAddedEventArgs.#ctor(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer)">
            <summary>
            Constructor
            </summary>
            <param name="documentViewer"><see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerRemovedEventArgs">
            <summary>
            Document viewer removed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerRemovedEventArgs.EventType">
            <summary>
            Returns the event type, which is <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent.Removed"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerRemovedEventArgs.#ctor(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer)">
            <summary>
            Constructor
            </summary>
            <param name="documentViewer"><see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerGotNewContentEventArgs">
            <summary>
            New content event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerGotNewContentEventArgs.EventType">
            <summary>
            Returns the event type, which is <see cref="F:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerEvent.GotNewContent"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerGotNewContentEventArgs.Content">
            <summary>
            New content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerGotNewContentEventArgs.ContentType">
            <summary>
            New content type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerGotNewContentEventArgs.#ctor(dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer,dnSpy.Contracts.Documents.Tabs.DocViewer.DocumentViewerContent,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Constructor
            </summary>
            <param name="documentViewer">Document viewer</param>
            <param name="content">New content</param>
            <param name="contentType">Content type</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriter">
            <summary>
            Writes documents
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriter.Write(dnSpy.Contracts.Decompiler.IDecompilerOutput,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="output">Output</param>
            <param name="text">Text</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriterProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriter"/>s. Export an instance with at least
            one <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute"/>, a <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> and
            optional <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>s.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriterProvider.Create(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriter"/> or returns null
            </summary>
            <param name="contentType">Content type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriterService">
            <summary>
            Writes text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriterService.Write(dnSpy.Contracts.Decompiler.IDecompilerOutput,System.String,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="output">Output</param>
            <param name="text">Text</param>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.Xml"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions">
            <summary>
            Move caret options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions.Select">
            <summary>
            Select the span
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions.Focus">
            <summary>
            Give the text viewer focus
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.MoveCaretOptions.Center">
            <summary>
            Always center the caret in the view
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.PredefinedDocumentWriterProviderNames">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentWriterProvider"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.DocViewer.PredefinedDocumentWriterProviderNames.DefaultXmlXaml">
            <summary>
            Default XML/XAML writer
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceAndId">
            <summary>
            Reference and id. Created from a <see cref="T:dnSpy.Contracts.Decompiler.SpanReference"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceAndId.Reference">
            <summary>
            Gets the reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceAndId.Id">
            <summary>
            Id or null (eg. <see cref="F:dnSpy.Contracts.Decompiler.PredefinedSpanReferenceIds.HighlightRelatedKeywords"/>). This is used to enable
            or disable the reference. If null, it's always enabled.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceAndId.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference</param>
            <param name="id">Reference id or null, eg. <see cref="F:dnSpy.Contracts.Decompiler.PredefinedSpanReferenceIds.HighlightRelatedKeywords"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo">
            <summary>
            Reference info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.Reference">
            <summary>
            Gets the reference or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.IsLocal">
            <summary>
            true if it's a local, parameter, or label
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.IsDefinition">
            <summary>
            true if it's a definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.IsWrite">
            <summary>
            true if it's a write to a reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.IsHidden">
            <summary>
            true if reference shouldn't be highlighted
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.#ctor(System.Object,dnSpy.Contracts.Decompiler.DecompilerReferenceFlags)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference or null</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.ToTextReference">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.ToTextReference(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference"/> instance
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.op_Equality(dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo,dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo)">
            <summary>
            operator ==()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.op_Inequality(dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo,dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo)">
            <summary>
            operator !=()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.Equals(dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo)">
            <summary>
            Equals()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.SpanDataReferenceInfoExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.SpanData`1"/> extensions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.SpanDataReferenceInfoExtensions.ToTextReference(dnSpy.Contracts.Text.SpanData{dnSpy.Contracts.Documents.Tabs.DocViewer.ReferenceInfo})">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference"/>
            </summary>
            <param name="spanData">Instance</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference">
            <summary>
            A reference in the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.Reference">
            <summary>
            Gets the reference or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.IsLocal">
            <summary>
            true if it's a local, parameter, or label
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.IsDefinition">
            <summary>
            true if it's a definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.IsWrite">
            <summary>
            true if it's a write to a reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.IsHidden">
            <summary>
            true if reference shouldn't be highlighted
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.Span">
            <summary>
            Gets the span or null if it's unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.#ctor(System.Object,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference or null</param>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.#ctor(System.Object,dnSpy.Contracts.Decompiler.DecompilerReferenceFlags)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference or null</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference.#ctor(System.Object,dnSpy.Contracts.Decompiler.DecompilerReferenceFlags,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference or null</param>
            <param name="flags">Flags</param>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider">
            <summary>
            Creates code tooltips
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider.Image">
            <summary>
            Sets the image that should be shown in the tooltip or null if none should be shown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider.SetImage(System.Object)">
            <summary>
            Initializes <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider.Image"/> with an image
            </summary>
            <param name="ref">A dnlib type, method, field, local, etc</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider.Output">
            <summary>
            Gets the current output
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider.CreateNewOutput">
            <summary>
            Creates a new output that is shown on a new line
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider.Create">
            <summary>
            Creates the tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipWriter">
            <summary>
            Writes tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipWriter.WriteXmlDoc(System.String)">
            <summary>
            Writes an XML doc comment. Returns true if it was written, false otherwise
            </summary>
            <param name="xmlDoc">XML doc</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipWriter.WriteXmlDocParameter(System.String,System.String)">
            <summary>
            Writes an XML doc parameter. Returns true if it was written, false otherwise
            </summary>
            <param name="xmlDoc">XML doc</param>
            <param name="paramName">Name of parameter</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipWriter.WriteXmlDocGeneric(System.String,System.String)">
            <summary>
            Writes an XML doc generic. Returns true if it was written, false otherwise
            </summary>
            <param name="xmlDoc">XML doc</param>
            <param name="gpName">Name of generic parameter</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipWriter.Write(Microsoft.VisualStudio.Text.Classification.IClassificationType,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="classificationType">Classification type</param>
            <param name="text">Text</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProvider">
            <summary>
            Creates tooltips. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ExportDocumentViewerToolTipProviderAttribute"/> to export an
            instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProvider.Create(dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderContext,System.Object)">
            <summary>
            Creates a tooltip or returns null
            </summary>
            <param name="context">Context</param>
            <param name="ref">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ExportDocumentViewerToolTipProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ExportDocumentViewerToolTipProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ExportDocumentViewerToolTipProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ExportDocumentViewerToolTipProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ExportDocumentViewerToolTipProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProvider"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderContext.DocumentViewer">
            <summary>
            Document viewer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderContext.Decompiler">
            <summary>
            Language to use
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProviderContext.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.ICodeToolTipProvider"/> instance that can be used to create the
            code tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IAsyncShowContext">
            <summary>
            Passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent.OnShowAsync(dnSpy.Contracts.Documents.Tabs.IShowContext,dnSpy.Contracts.Documents.Tabs.IAsyncShowResult)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IAsyncShowContext.CancellationToken">
            <summary>
            Gets the cancellation token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IAsyncShowContext.Cancel">
            <summary>
            Cancels the operation
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IAsyncShowResult">
            <summary>
            Result passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.AsyncDocumentTabContent.OnShowAsync(dnSpy.Contracts.Documents.Tabs.IShowContext,dnSpy.Contracts.Documents.Tabs.IAsyncShowResult)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IAsyncShowResult.Exception">
            <summary>
            The caught exception or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IAsyncShowResult.IsCanceled">
            <summary>
            true if it was canceled (the cancellation token threw an exception)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IAsyncShowResult.CanShowOutput">
            <summary>
            true if it's still the visible tab and the UI context can be written to. It can be false
            if the asynchronous operation got canceled by the user.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDecompilerTabContent">
            <summary>
            A <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> that uses a <see cref="T:dnSpy.Contracts.Decompiler.IDecompiler"/> to generate its content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDecompilerTabContent.Decompiler">
            <summary>
            Gets/sets the language used to generate the content
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProvider">
            <summary>
            Creates default document tab content. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportDefaultDocumentTabContentProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProvider.Create(dnSpy.Contracts.Documents.Tabs.IDocumentTabService)">
            <summary>
            Creates default content or returns null
            </summary>
            <param name="documentTabService">Owner</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportDefaultDocumentTabContentProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportDefaultDocumentTabContentProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.IDefaultDocumentTabContentProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportDefaultDocumentTabContentProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportDefaultDocumentTabContentProviderAttribute.Order">
            <summary>
            Order of this instance, eg. <see cref="F:dnSpy.Contracts.Documents.Tabs.DefaultDocumentTabContentProviderConstants.DEFAULT_HANDLER"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentListListener">
            <summary>
            Can cancel loading document lists. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportDocumentListListenerAttribute"/> to export
            an instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentListListener.CanLoad">
            <summary>
            true if we can load a new document list
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentListListener.CanReload">
            <summary>
            true if we can reload the current document list
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentListListener.BeforeLoad(System.Boolean)">
            <summary>
            Called before a new document list is loaded
            </summary>
            <param name="isReload">true if it's reload-list, false if it's load-list</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentListListener.AfterLoad(System.Boolean)">
            <summary>
            Called after a new document list has been loaded
            </summary>
            <param name="isReload">true if it's reload-list, false if it's load-list</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentListListener.CheckCanLoad(System.Boolean)">
            <summary>
            Returns true if the list can be loaded. It's called before <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentListListener.BeforeLoad(System.Boolean)"/>
            and can be used to show a message box to the user. If false is returned, the list isn't
            loaded.
            </summary>
            <param name="isReload">true if it's reload-list, false if it's load-list</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentListListenerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentListListenerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentListListenerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportDocumentListListenerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentListListener"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportDocumentListListenerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentListListenerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTab">
            <summary>
            A tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.Content">
            <summary>
            Current <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.UIContext">
            <summary>
            Current <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.DocumentTabService">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabService"/> owner
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.DeserializeUI(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Deserializes UI settings serialized by <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.SerializeUI(dnSpy.Contracts.Settings.ISettingsSection)"/>
            </summary>
            <param name="tabContentUI">Serialized data</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.SerializeUI(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Serializes UI settings
            </summary>
            <param name="tabContentUI">Target section</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.IsActiveTab">
            <summary>
            true if this is the active tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.CanNavigateBackward">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.NavigateBackward"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.NavigateBackward">
            <summary>
            Navigates backward in history
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.CanNavigateForward">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.NavigateForward"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.NavigateForward">
            <summary>
            Navigates forward in history
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.FollowReference(System.Object,dnSpy.Contracts.Documents.Tabs.DocumentTabContent,System.Action{dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows a reference
            </summary>
            <param name="ref">Reference</param>
            <param name="sourceContent">Source content or null</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.FollowReferenceNewTab(System.Object,System.Action{dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows a reference in a new tab
            </summary>
            <param name="ref">Reference</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.FollowReference(System.Object,System.Boolean,System.Action{dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows a reference
            </summary>
            <param name="ref">Reference</param>
            <param name="newTab">true to open a new tab</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.Show(dnSpy.Contracts.Documents.Tabs.DocumentTabContent,System.Object,System.Action{dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs})">
            <summary>
            Shows the tab content
            </summary>
            <param name="tabContent">Tab content</param>
            <param name="uiState">UI state (passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext.RestoreUIState(System.Object)"/>) or null</param>
            <param name="onShown">Called after the output has been shown on the screen</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.TrySetFocus">
            <summary>
            Sets focus to the focused element if this is the active tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.Close">
            <summary>
            Closes this tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTab.IsAsyncExecInProgress">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.AsyncExec(System.Action{System.Threading.CancellationTokenSource},System.Action,System.Action{dnSpy.Contracts.Documents.Tabs.IAsyncShowResult})"/> hasn't finished executing
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.AsyncExec(System.Action{System.Threading.CancellationTokenSource},System.Action,System.Action{dnSpy.Contracts.Documents.Tabs.IAsyncShowResult})">
            <summary>
            Executes new code, cancelling any other started <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTab.AsyncExec(System.Action{System.Threading.CancellationTokenSource},System.Action,System.Action{dnSpy.Contracts.Documents.Tabs.IAsyncShowResult})"/> call
            </summary>
            <param name="preExec">Executed in the current thread before the async code has started</param>
            <param name="asyncAction">Executed in a new thread</param>
            <param name="postExec">Executed in the current thread after <paramref name="asyncAction"/>
            has finished executing</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.DocumentTabExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.DocumentTabExtensions.TryGetDocumentViewer(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Returns the tab's <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> or null if it's not visible
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> factory. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabContentFactoryAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory.Create(dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactoryContext)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instance or returns null
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory.Serialize(dnSpy.Contracts.Documents.Tabs.DocumentTabContent,dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Serializes a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instance. Returns a unique guid if it was
            serialized, else null
            </summary>
            <param name="content">Content</param>
            <param name="section">Section to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory.Deserialize(System.Guid,dnSpy.Contracts.Settings.ISettingsSection,dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactoryContext)">
            <summary>
            Deserializes a <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instance. Returns null if <paramref name="guid"/>
            isn't supported.
            </summary>
            <param name="guid">Guid, this is the return value of <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory.Serialize(dnSpy.Contracts.Documents.Tabs.DocumentTabContent,dnSpy.Contracts.Settings.ISettingsSection)"/></param>
            <param name="section">Section with serialized content</param>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactoryMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactoryMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabContentFactoryAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabContentFactoryAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabContentFactoryAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabContentFactoryAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactoryContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactoryContext.Nodes">
            <summary>
            Gets all nodes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabService">
            <summary>
            Manages the document tabs and treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.DocumentTreeView">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.TabGroupService">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.SortedTabs">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTab"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.VisibleFirstTabs">
            <summary>
            Same as <see cref="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.SortedTabs"/> except that visible tabs are returned first
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.ActiveTab">
            <summary>
            Gets the active tab or null if none, see also <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.GetOrCreateActiveTab"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.GetOrCreateActiveTab">
            <summary>
            Gets the active tab or creates a new one if <see cref="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.ActiveTab"/> is null
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.OpenEmptyTab">
            <summary>
            Opens a new empty tab and sets it as the active tab (<see cref="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.ActiveTab"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.SetFocus(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Gives <paramref name="tab"/> keyboard focus
            </summary>
            <param name="tab">Tab</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.Refresh(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Documents.Tabs.IDocumentTab})">
            <summary>
            Forces a refresh of the selected tabs
            </summary>
            <param name="tabs">Tabs to refresh</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.Refresh``1">
            <summary>
            Refreshes all tabs that contain nodes of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Node type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.Refresh(System.Predicate{dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData})">
            <summary>
            Refreshes all tabs that contain certain nodes
            </summary>
            <param name="pred">Returns true if the node should be included</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.RefreshModifiedDocument(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Refreshes all tabs that use <paramref name="document"/>
            </summary>
            <param name="document">Modified document</param>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.DocumentModified">
            <summary>
            Raised when <see cref="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.RefreshModifiedDocument(dnSpy.Contracts.Documents.IDsDocument)"/> gets called
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.DocumentCollectionChanged">
            <summary>
            Notified when the document collection gets changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.Owns(dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Returns true if <paramref name="tabGroup"/> is owned by this instance
            </summary>
            <param name="tabGroup">Tab group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.Close(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Closes the tab
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.TryGetDocumentTab(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Tries to get the <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTab"/>
            </summary>
            <param name="content">Tab content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.CloseAll">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.FollowReference(System.Object,System.Boolean,System.Boolean,System.Action{dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs})">
            <summary>
            Follows the reference in the active tab or a new tab
            </summary>
            <param name="ref">Reference</param>
            <param name="newTab">true to open a new tab</param>
            <param name="setFocus">true to give the tab keyboard focus</param>
            <param name="onShown">Called after the content has been shown. Can be null.</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabService.TryCreateContent(dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData[])">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instance. Returns null if it couldn't be created
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator">
            <summary>
            Creates and caches <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/> instances. These are only used in a
            single tab.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator.Get``1">
            <summary>
            Creates or returns an existing cached instance of a certain type. This instance is
            cached per tab and is stored in either a <see cref="T:System.WeakReference"/> or a strong
            reference (see <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute.UseStrongReference"/>)
            </summary>
            <typeparam name="T">Type, eg. <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/>. There must be an exported
            <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProvider"/> that can create the type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator.Get``1(System.Object,System.Func{``0})">
            <summary>
            Creates or returns an existing cached instance of a certain type. This instance is
            cached per tab and is stored in a <see cref="T:System.WeakReference"/>.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">Key</param>
            <param name="creator">Called if the value hasn't been cached or if it has been GC'd</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator.Get``1(System.Object,System.Boolean,System.Func{``0})">
            <summary>
            Creates or returns an existing cached instance of a certain type. This instance is
            cached per tab and is stored in a <see cref="T:System.WeakReference"/> or a strong reference
            depending on the value of <paramref name="useStrongReference"/>.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">Key</param>
            <param name="useStrongReference">true to store the result in a strong reference instead of a weak reference</param>
            <param name="creator">Called if the value hasn't been cached or if it has been GC'd</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/> instances. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProvider.Create``1">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabUIContext"/> instance or returns null if someone else
            should create it.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProviderMetadata.UseStrongReference">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute.UseStrongReference"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportDocumentTabUIContextProviderAttribute.UseStrongReference">
            <summary>
            true to store the created instance in a strong reference
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instances. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportReferenceDocumentTabContentProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider.Create(dnSpy.Contracts.Documents.Tabs.IDocumentTabService,dnSpy.Contracts.Documents.Tabs.DocumentTabContent,System.Object)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabReferenceResult"/> or returns null
            </summary>
            <param name="documentTabService">Owner</param>
            <param name="sourceContent">Source content or null. It's used when showing the reference
            in a new tab. This would then be the older tab's content.</param>
            <param name="ref">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportReferenceDocumentTabContentProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportReferenceDocumentTabContentProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportReferenceDocumentTabContentProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportReferenceDocumentTabContentProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IReferenceHandler">
            <summary>
            Called when a reference is followed in a tab. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportReferenceHandlerAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.IReferenceHandler.OnFollowReference(dnSpy.Contracts.Documents.Tabs.IReferenceHandlerContext)">
            <summary>
            Called when a reference is followed. Returns true if it was handled, otherwise false.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IReferenceHandlerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IReferenceHandlerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportReferenceHandlerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportReferenceHandlerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceHandler"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportReferenceHandlerAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportReferenceHandlerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IReferenceHandlerContext">
            <summary>
            Context passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.IReferenceHandler.OnFollowReference(dnSpy.Contracts.Documents.Tabs.IReferenceHandlerContext)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IReferenceHandlerContext.Reference">
            <summary>
            Gets the reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IReferenceHandlerContext.Content">
            <summary>
            Gets the tab content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IReferenceHandlerContext.SourceContent">
            <summary>
            Gets the source tab content or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ISaveService">
            <summary>
            Saves tabs
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ISaveService.CanSave(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Returns true if the tab can be saved
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ISaveService.Save(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Saves the tab. See also <see cref="M:dnSpy.Contracts.Documents.Tabs.ISaveService.CanSave(dnSpy.Contracts.Documents.Tabs.IDocumentTab)"/>
            </summary>
            <param name="tab">Tab</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ISaveService.GetMenuHeader(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Returns the menu header content, eg. "_Save..."
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.IShowContext">
            <summary>
            Passed to <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.OnShow(dnSpy.Contracts.Documents.Tabs.IShowContext)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IShowContext.UIContext">
            <summary>
            UI Context created by <see cref="M:dnSpy.Contracts.Documents.Tabs.DocumentTabContent.CreateUIContext(dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextLocator)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IShowContext.IsRefresh">
            <summary>
            true if the view is being refreshed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IShowContext.OnShown">
            <summary>
            If non-null, gets called after the content has been shown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.IShowContext.Tag">
            <summary>
            Can be initialized by the <see cref="T:dnSpy.Contracts.Documents.Tabs.DocumentTabContent"/> instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ITabSaver">
            <summary>
            Saves tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ITabSaver.CanSave">
            <summary>
            true if it can be saved
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ITabSaver.MenuHeader">
            <summary>
            Gets the menu header, eg. "_Save..." or null to use the default "_Save..." string
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ITabSaver.Save">
            <summary>
            Saves the tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ITabSaverProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.Tabs.ITabSaver"/> instances. Use <see cref="T:dnSpy.Contracts.Documents.Tabs.ExportTabSaverProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ITabSaverProvider.Create(dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.Tabs.ITabSaver"/> instance or returns null
            </summary>
            <param name="tab">Tab</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ITabSaverProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ITabSaverProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.Tabs.ExportTabSaverProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ExportTabSaverProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.Tabs.ITabSaverProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ExportTabSaverProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ExportTabSaverProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ShowTabContentResult">
            <summary>
            Result
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.ShowTabContentResult.Failed">
            <summary>
            The content failed to be shown, eg. an exception occurred
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.ShowTabContentResult.ShowedContent">
            <summary>
            Content was shown
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.ShowTabContentResult.ReferenceHandler">
            <summary>
            A <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceHandler"/> handled it and no new content was shown
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs">
            <summary>
            Show tab content event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs.Result">
            <summary>
            Gets the result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs.Success">
            <summary>
            true if the content was shown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs.HasMovedCaret">
            <summary>
            Set to true if the caret has been moved by a previous handler
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs.Tab">
            <summary>
            Gets the tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.Tabs.ShowTabContentEventArgs.#ctor(dnSpy.Contracts.Documents.Tabs.ShowTabContentResult,dnSpy.Contracts.Documents.Tabs.IDocumentTab)">
            <summary>
            Constructor
            </summary>
            <param name="result">Result></param>
            <param name="tab">Tab</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.Tabs.TabConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_HEXDOCUMENTTABCONTENTFACTORY">
            <summary>
            Order of hex <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_ASMED_HEXVIEWDOCUMENTTABCONTENTFACTORY">
            <summary>
            Order of hex editor <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_HEXBOXDOCUMENTTABCONTENTFACTORY">
            <summary>
            Order of hex editor <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_DECOMPILEDOCUMENTTABCONTENTFACTORY">
            <summary>
            Order of decompile <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabContentFactory"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_DEFAULTDECOMPILENODE">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNode"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_DOCUMENTVIEWERPROVIDER">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Documents.Tabs.IDocumentTabUIContextProvider"/> instance that creates <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> instances
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_DNLIBREFTOOLTIPCONTENTPROVIDER">
            <summary>
            Order of dnlib reference <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.ToolTips.IDocumentViewerToolTipProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_DEFAULTTABSAVERPROVIDER">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Documents.Tabs.ITabSaverProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_BAMLTABSAVERPROVIDER">
            <summary>
            Order of baml <see cref="T:dnSpy.Contracts.Documents.Tabs.ITabSaverProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_HEXTABSAVERPROVIDER">
            <summary>
            Order of hex <see cref="T:dnSpy.Contracts.Documents.Tabs.ITabSaverProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_CONTENTPROVIDER_HEXTOKENREF">
            <summary>
            Order of hex <see cref="T:dnSpy.Contracts.Decompiler.TokenReference"/> <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_CONTENTPROVIDER_HEXADDRREF">
            <summary>
            Order of hex <see cref="T:dnSpy.Contracts.Decompiler.AddressReference"/> <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_CONTENTPROVIDER_TEXTREF">
            <summary>
            Order of default <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.Tabs.TabConstants.ORDER_CONTENTPROVIDER_NODE">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Documents.Tabs.IReferenceDocumentTabContentProvider"/> instance that creates content
            from <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> nodes.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode">
            <summary>
            A .NET assembly file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode.Document">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode.IsExe">
            <summary>
            true if it's an .exe file, false if it's a .dll or .netmodule
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode.#ctor(dnSpy.Contracts.Documents.IDsDotNetDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">Document</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode">
            <summary>
            An assembly reference node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode.AssemblyRef">
            <summary>
            Gets the assembly reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.BaseTypeFolderNode">
            <summary>
            Contains the base type (if any) and all interfaces the type implements
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.BaseTypeFolderNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.BaseTypeFolderNode.InvalidateChildren">
            <summary>
            Invalidates all children
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.BaseTypeNode">
            <summary>
            A base type or implemented interface node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.BaseTypeNode.TypeDefOrRef">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.BaseTypeNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DerivedTypeNode">
            <summary>
            A derived type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DerivedTypeNode.TypeDef">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DerivedTypeNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DerivedTypesFolderNode">
            <summary>
            Contains all derived types
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DerivedTypesFolderNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentFilterType">
            <summary>
            Filter dragged documents to treeview
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentFilterType.All">
            <summary>All</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentFilterType.AllSupported">
            <summary>Imports only supported files</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentFilterType.DotNetOnly">
            <summary>.NET only files</summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions">
            <summary>
            Options used when writing <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> nodes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions.Title">
            <summary>
            The text will be shown in a tab. Less important information such as metadata tokens
            should normally not be written.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions.ToolTip">
            <summary>
            The text will be shown in a tooltip
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeActivatedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> activated event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeActivatedEventArgs.Node">
            <summary>
            Activated node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeActivatedEventArgs.Handled">
            <summary>
            Set it to true if the event was handled
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeActivatedEventArgs.#ctor(dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData)">
            <summary>
            Constructor
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData">
            <summary>
            Document treenode data base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.SingleClickExpandsChildren">
            <summary>
            true if single clicking on a node expands all its children
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Context">
            <summary>
            Gets the context. Should only be set by the owner <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.NodePathName">
            <summary>
            Gets the node path name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.GetIcon(dnSpy.Contracts.Images.IDotNetImageService)">
            <summary>
            Gets the icon
            </summary>
            <param name="dnImgMgr">Image service</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.GetExpandedIcon(dnSpy.Contracts.Images.IDotNetImageService)">
            <summary>
            Gets the icon shown when the node has been expanded
            </summary>
            <param name="dnImgMgr">Image service</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.ExpandedIcon">
            <summary>
            Expanded icon or null to use <see cref="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Icon"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Text">
            <summary>
            Gets the data shown in the UI
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.WriteCore(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)">
            <summary>
            Writes the contents
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.GetShowToken(dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.WriteCore(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)"/> should show tokens
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.ToolTip">
            <summary>
            Gets the data shown in a tooltip
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.ToString(dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)">
            <summary>
            ToString()
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.ToString(dnSpy.Contracts.Decompiler.IDecompiler,dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)">
            <summary>
            ToString()
            </summary>
            <param name="decompiler">Decompiler</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.OnRefreshUI">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI"/> before it invalidates all UI properties
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Activate">
            <summary>
            Called when the item gets activated, eg. double clicked. Returns true if it was handled,
            false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.GetFilterType(dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.FilterType"/> to filter this instance
            </summary>
            <param name="filter">Filter to call</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.OnEnsureChildrenLoaded">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.FilterVersion">
            <summary>
            The class (<see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/>) should call <see cref="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Refilter"/> when updating
            this value.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.OnChildrenChanged(dnSpy.Contracts.TreeView.TreeNodeData[],dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Called when the children has changed
            </summary>
            <param name="added">Added nodes</param>
            <param name="removed">Removed nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.OnIsVisibleChanged">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsVisible"/> has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Refilter">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.Filter"/> has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.CanDrag(dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Returns true if the nodes can be dragged
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.StartDrag(System.Windows.DependencyObject,dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Starts the drag and drop operation
            </summary>
            <param name="dragSource">Drag source</param>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData.Copy(dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Copies nodes
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeDataExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeDataExtensionMethods.GetAssemblyNode(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/> owner or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeDataExtensionMethods.GetModuleNode(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/> owner or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeDataExtensionMethods.GetDocumentNode(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets the first <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/> owner or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeDataExtensionMethods.GetTopNode(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/> top node or null if none was found
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeDataExtensionMethods.GetModule(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets the <see cref="T:dnlib.DotNet.ModuleDef"/> instance or null
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeFilterResult">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter"/> result
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeFilterResult.FilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeFilterResult.IsMatch">
            <summary>
            true if this is a node that can be returned as a result to the user
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeFilterResult.#ctor(dnSpy.Contracts.Documents.TreeView.FilterType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="filterType">Filter type</param>
            <param name="isMatch">True if it was a match</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeGroupType">
            <summary>
            Default <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeGroup"/> instances
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants">
            <summary>
            Treeview constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.DATAFORMAT_COPIED_ROOT_NODES">
            <summary>Drag and drop nodes DataFormat. It's an <see cref="T:System.Int32"/>[] of indexes of the nodes.</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ROOT_NODE_GUID">
            <summary>Guid of root node</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.MESSAGE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.MessageNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.UNKNOWN_DOCUMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.UnknownDocumentNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.PEDOCUMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.PEDocumentNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ASSEMBLY_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.MODULE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.RESOURCES_FOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.ResourcesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.REFERENCES_FOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.ReferencesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.NAMESPACE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ASSEMBLYREF_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.MODULEREF_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.BASETYPEFOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.BaseTypeFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.DERIVEDTYPESFOLDER_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.DerivedTypesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.BASETYPE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.BaseTypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.DERIVEDTYPE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.DerivedTypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.TYPE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.FIELD_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.FieldNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.METHOD_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.PROPERTY_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.PropertyNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.EVENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.EventNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.UNKNOWN_RESOURCE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.UnknownResourceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.RESOURCE_ELEMENT_SET_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementSetNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.UNKNOWN_SERIALIZED_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.UnknownSerializedResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.BUILT_IN_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.BuiltInResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMAGE_RESOURCE_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMAGE_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.SERIALIZED_IMAGE_LIST_STREAMER_RESOURCE_ELEMENT_NODE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.SERIALIZED_IMAGE_RESOURCE_ELEMENT_NODE">
            <summary><see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageResourceElementNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.BAML_RESOURCE_ELEMENT_NODE_GUID">
            <summary><c>BamlResourceElementNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.PE_NODE_GUID">
            <summary><c>PENode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMGCOR20HEADER_NODE_GUID">
            <summary><c>ImageCor20HeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMGDOSHEADER_NODE_GUID">
            <summary><c>ImageDosHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMGFILEHEADER_NODE_GUID">
            <summary><c>ImageFileHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMGOPTHEADER32_NODE_GUID">
            <summary><c>ImageOptionalHeader32Node</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMGOPTHEADER64_NODE_GUID">
            <summary><c>ImageOptionalHeader64Node</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.IMGSECTHEADER_NODE_GUID">
            <summary><c>ImageSectionHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.MDTBL_NODE_GUID">
            <summary><c>MetaDataTableNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.MDTBLREC_NODE_GUID">
            <summary><c>MetaDataTableRecordNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.STRGHEADER_NODE_GUID">
            <summary><c>StorageHeaderNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.STRGSIG_NODE_GUID">
            <summary><c>StorageSignatureNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.STRGSTREAM_NODE_GUID">
            <summary><c>StorageStreamNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.TBLSSTREAM_NODE_GUID">
            <summary><c>TablesStreamNode</c></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_MODULE_PE">
            <summary>Order of PE node</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_MODULE_REFERENCES_FOLDER">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.ReferencesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_MODULE_RESOURCES_FOLDER">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.ResourcesFolderNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_MODULE_NAMESPACE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_REFERENCES_ASSEMBLYREF">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_REFERENCES_MODULEREF">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_ASSEMBLYREF_ASSEMBLYREF">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_NAMESPACE_TYPE">
            <summary>Order of non-nested <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_BASE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.BaseTypeFolderNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_DERIVED">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.DerivedTypesFolderNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_METHOD">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_PROPERTY">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Documents.TreeView.PropertyNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_EVENT">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Documents.TreeView.EventNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_FIELD">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Documents.TreeView.FieldNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_TYPE_TYPE">
            <summary>Order of nested <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_PROPERTY_METHOD">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_EVENT_METHOD">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_BASETYPEFOLDER_BASETYPE">
            <summary>Order of base type <see cref="T:dnSpy.Contracts.Documents.TreeView.BaseTypeNode"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_BASETYPEFOLDER_INTERFACE">
            <summary>Order of interface <see cref="T:dnSpy.Contracts.Documents.TreeView.BaseTypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_DERIVEDTYPES_TEXT">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.MessageNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_DERIVEDTYPES_TYPE">
            <summary>Order of interface <see cref="T:dnSpy.Contracts.Documents.TreeView.DerivedTypeNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RESOURCE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RESOURCE_ELEM">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode"/>s</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RSRCPROVIDER_RSRCELEMSET">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementSetNode"/> provider</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RSRCPROVIDER_IMAGE_RESOURCE_NODE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceNode"/> and <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceElementNode"/> provider</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RSRCPROVIDER_SERIALIZED_IMAGE_RESOURCE_ELEMENT_NODE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageResourceElementNode"/> provider</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RSRCPROVIDER_BAML_NODE">
            <summary>Order of <c>BamlResourceElementNode</c> provider</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RSRCPROVIDER_SERIALIZED_IMAGE_LIST_STREAMER_RESOURCE_ELEMENT_NODE">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerResourceElementNode"/> provider</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.DocumentTreeViewConstants.ORDER_RSRCPROVIDER_UNKNOWNSERIALIZEDRSRCELEM">
            <summary>Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.UnknownSerializedResourceElementNode"/> provider</summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode">
            <summary>
            A document node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DsDocumentNode.Document">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DsDocumentNode.#ctor(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">Document</param>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.DsDocumentNode.NodePathName">
            <summary>
            Gets the node path name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.DsDocumentNode.GetFilterType(dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.FilterType"/> to filter this instance
            </summary>
            <param name="filter">Filter to call</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.EventNode">
            <summary>
            An event node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.EventNode.EventDef">
            <summary>
            Gets the event
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.EventNode.#ctor(dnlib.DotNet.EventDef)">
            <summary>
            Constructor
            </summary>
            <param name="event">Event</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.EventNode.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>, an adder, remover, invoker, or an other method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.FieldNode">
            <summary>
            A field node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.FieldNode.FieldDef">
            <summary>
            Gets the field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.FieldNode.#ctor(dnlib.DotNet.FieldDef)">
            <summary>
            Constructor
            </summary>
            <param name="field">Field</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.FilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.FilterType.Default">
            <summary>The node itself decides what to do</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.FilterType.Visible">
            <summary>Node should be visible</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.FilterType.Hide">
            <summary>Node should be hidden</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.FilterType.CheckChildren">
            <summary>Node should be hidden if all its children are hidden, else visible</summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.DocumentTreeView">
            <summary>
            Owner <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.Decompiler">
            <summary>
            Default language
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.ResourceNodeFactory">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeFactory"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.Filter">
            <summary>
            Gets the filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.TreeViewNodeTextElementProvider">
            <summary>
            Gets the treeview node text element provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.FilterVersion">
            <summary>
            Filter version, gets incremented each time <see cref="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.Filter"/> gets updated
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.SyntaxHighlight">
            <summary>
            true if it should be syntax highlighted
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.SingleClickExpandsChildren">
            <summary>
            true if single clicks expand children
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.ShowAssemblyVersion">
            <summary>
            Show assembly version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.ShowAssemblyPublicKeyToken">
            <summary>
            Show assembly public key token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.ShowToken">
            <summary>
            Show MD token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.UseNewRenderer">
            <summary>
            true to use the new optimized renderer. It doesn't support all unicode chars or word wrapping
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.DeserializeResources">
            <summary>
            true to deserialize resources
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataContext.CanDragAndDrop">
            <summary>
            true if drag and drop is allowed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataFinder">
            <summary>
            Finds <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> nodes. Use <see cref="T:dnSpy.Contracts.Documents.TreeView.ExportDocumentTreeNodeDataFinderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataFinder.FindNode(dnSpy.Contracts.Documents.TreeView.IDocumentTreeView,System.Object)">
            <summary>
            Returns an existing <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> node or null
            </summary>
            <param name="documentTreeView">Owner</param>
            <param name="ref">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataFinderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataFinderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.TreeView.ExportDocumentTreeNodeDataFinderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.ExportDocumentTreeNodeDataFinderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeDataFinder"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ExportDocumentTreeNodeDataFinderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.ExportDocumentTreeNodeDataFinderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter">
            <summary>
            Filters <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.AssemblyDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/>
            </summary>
            <param name="asm">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.ModuleDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/>
            </summary>
            <param name="mod">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/> but not a
            <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/> or a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/>.
            </summary>
            <param name="document">Document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(System.String,dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/>
            </summary>
            <param name="ns">Namespace</param>
            <param name="owner">Owner document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.TypeDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.FieldDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.FieldNode"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.PropertyDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.PropertyNode"/>
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.EventDef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.EventNode"/>
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResultBody(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result for a method's body
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResultParamDefs(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.ParamDef"/>s
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.MethodDef,dnlib.DotNet.ParamDef)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.ParamDef"/>
            </summary>
            <param name="method">Method</param>
            <param name="param">Parameter</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResultLocals(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.Emit.Local"/>s
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.MethodDef,dnlib.DotNet.Emit.Local)">
            <summary>
            Returns a filter result for a method's <see cref="T:dnlib.DotNet.Emit.Local"/>
            </summary>
            <param name="method">Method</param>
            <param name="local">Local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.AssemblyRef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode"/>
            </summary>
            <param name="asmRef">Assembly reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnlib.DotNet.ModuleRef)">
            <summary>
            Returns a filter result. Called if it's a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode"/>
            </summary>
            <param name="modRef">Module reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.BaseTypeNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.BaseTypeFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.DerivedTypeNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.DerivedTypesFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.ReferencesFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.ResourcesFolderNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResult(dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode)">
            <summary>
            Returns a filter result. The input can be null.
            </summary>
            <param name="node">Node, can be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResultOther(dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData)">
            <summary>
            Returns a filter result if it's any other <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/> instance
            </summary>
            <param name="node">Node, can't be null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter.GetResultAttributes(dnlib.DotNet.IHasCustomAttribute)">
            <summary>
            Returns a filter result
            </summary>
            <param name="hca">Object with custom attributes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeGroups">
            <summary>
            Contains default <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeGroup"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeGroups.GetGroup(dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeGroupType)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeGroup"/> instance
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.CreateAssembly(dnSpy.Contracts.Documents.IDsDotNetDocument)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/>
            </summary>
            <param name="asmDocument">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.CreateModule(dnSpy.Contracts.Documents.IDsDotNetDocument)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/>
            </summary>
            <param name="modDocument">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.AssemblyRef,dnlib.DotNet.ModuleDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode"/>
            </summary>
            <param name="asmRef">Assembly reference</param>
            <param name="ownerModule">Owner module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.ModuleRef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode"/>
            </summary>
            <param name="modRef">Module reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.CreateEvent(dnlib.DotNet.MethodDef)">
            <summary>
            Creates an event <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.CreateProperty(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a property <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/>
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a non-nested <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.CreateNested(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a nested <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.PropertyDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.PropertyNode"/>
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.EventDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.EventNode"/>
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeProvider.Create(dnlib.DotNet.FieldDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.FieldNode"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView">
            <summary>
            Document treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.DocumentService">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.IDsDocumentService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.TreeView">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.DotNetImageService">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Images.IDotNetImageService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.WpfCommands">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Controls.IWpfCommands"/> instance
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.CollectionChanged">
            <summary>
            Raised when the collection gets changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.NodesTextChanged">
            <summary>
            Raised when the node's text has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.NodeActivated">
            <summary>
            Raised when a node gets activated (eg. double clicked)
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.SelectionChanged">
            <summary>
            Raised when selection has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.RaiseNodeActivated(dnSpy.Contracts.Documents.TreeView.DocumentTreeNodeData)">
            <summary>
            Should only be called by the node that gets activated. Returns true if someone handled it.
            </summary>
            <param name="node">The activated node (should be the caller)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.CreateNode(dnSpy.Contracts.Documents.TreeView.DsDocumentNode,dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/> instance. This will internally call all
            <see cref="T:dnSpy.Contracts.Documents.TreeView.IDsDocumentNodeProvider"/>s it can find.
            </summary>
            <param name="owner">Owner node or null if owner is the root node</param>
            <param name="document">New document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.Remove(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Documents.TreeView.DsDocumentNode})">
            <summary>
            Removes <paramref name="nodes"/>. They must be top nodes (eg. <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/>s)
            </summary>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(System.Object)">
            <summary>
            Returns a node or null if none could be found
            </summary>
            <param name="ref">Reference, eg. a <see cref="T:dnlib.DotNet.IMemberRef"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/> node or null if none could be found
            </summary>
            <param name="document">Document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.AssemblyDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyDocumentNode"/> node or null if none could be found
            </summary>
            <param name="assembly">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.ModuleDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/> node or null if none could be found
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.TypeDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/> node or null if none could be found
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.MethodDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/> node or null if none could be found
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.FieldDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.FieldNode"/> node or null if none could be found
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.PropertyDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.PropertyNode"/> node or null if none could be found
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNode(dnlib.DotNet.EventDef)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.EventNode"/> node or null if none could be found
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.FindNamespaceNode(dnSpy.Contracts.Documents.IDsDocument,System.String)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/> node or null if none could be found
            </summary>
            <param name="module">Owner module</param>
            <param name="namespace">Namespace</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.DocumentTreeNodeGroups">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeGroups"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.GetAllModuleNodes">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode"/>s
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.GetAllCreatedDocumentNodes">
            <summary>
            Gets all created <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/>s
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.AddNode(dnSpy.Contracts.Documents.TreeView.DsDocumentNode,System.Int32)">
            <summary>
            Adds <paramref name="documentNode"/> to the list
            </summary>
            <param name="documentNode">Node</param>
            <param name="index">Index or -1</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.SetDecompiler(dnSpy.Contracts.Decompiler.IDecompiler)">
            <summary>
            Sets decompiler
            </summary>
            <param name="decompiler">Decompiler</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.SortTopNodes">
            <summary>
            Sorts all documents
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.CanSortTopNodes">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView.SortTopNodes"/> can be called
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewProvider.Create(dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/> instance
            </summary>
            <param name="filter">Filter or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/> settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.SyntaxHighlight">
            <summary>
            true to syntax highlight the treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.SingleClickExpandsTreeViewChildren">
            <summary>
            true causes single clicks to expand children, false requires a double click
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.ShowAssemblyVersion">
            <summary>
            true to show assembly version when printing assembly nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.ShowAssemblyPublicKeyToken">
            <summary>
            true to show assembly public key token when printing assembly nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.ShowToken">
            <summary>
            true to show tokens
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.DeserializeResources">
            <summary>
            true to deserialize resources
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.MemberKind0">
            <summary>Gets 0th member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.MemberKind1">
            <summary>Gets 1st member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.MemberKind2">
            <summary>Gets 2nd member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.MemberKind3">
            <summary>Gets 3rd member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.MemberKind4">
            <summary>Gets 4th member</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDocumentTreeViewSettings.FilterDraggedItems">
            <summary>How to filter dragged items</summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDsDocumentNodeProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/>s. Use <see cref="T:dnSpy.Contracts.Documents.TreeView.ExportDsDocumentNodeProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.IDsDocumentNodeProvider.Create(dnSpy.Contracts.Documents.TreeView.IDocumentTreeView,dnSpy.Contracts.Documents.TreeView.DsDocumentNode,dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Documents.TreeView.DsDocumentNode"/> instance or returns null
            </summary>
            <param name="documentTreeView">Document treeview</param>
            <param name="owner">Owner node or null if owner is the root node</param>
            <param name="document">New document</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.IDsDocumentNodeProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.IDsDocumentNodeProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.TreeView.ExportDsDocumentNodeProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.ExportDsDocumentNodeProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.TreeView.IDsDocumentNodeProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ExportDsDocumentNodeProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.ExportDsDocumentNodeProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.MemberKind">
            <summary>
            Order of members in the treeview
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.MemberKind.NestedTypes">
            <summary>Nested types</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.MemberKind.Fields">
            <summary>Fields</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.MemberKind.Events">
            <summary>Events</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.MemberKind.Properties">
            <summary>Properties</summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.MemberKind.Methods">
            <summary>Methods</summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.MessageNode">
            <summary>
            A message node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.MessageNode.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.MessageNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.MethodNode">
            <summary>
            A method node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.MethodNode.MethodDef">
            <summary>
            Gets the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.MethodNode.#ctor(dnlib.DotNet.MethodDef)">
            <summary>
            Constructor
            </summary>
            <param name="method">Method</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode">
            <summary>
            A .NET module file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode.Document">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode.#ctor(dnSpy.Contracts.Documents.IDsDotNetDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">Document</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/>
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ModuleDocumentNode.FindNode(System.String)">
            <summary>
            Returns an existing <see cref="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode"/> instance or null
            </summary>
            <param name="ns">Namespace</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode">
            <summary>
            A module reference node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode.ModuleRef">
            <summary>
            Gets the module reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode.#ctor(dnlib.DotNet.ModuleRef)">
            <summary>
            Constructor
            </summary>
            <param name="moduleRef">Module reference</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.NamespaceNode">
            <summary>
            A namespace node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.NamespaceNode.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NamespaceNode.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NamespaceNode.Create(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.NodePathName">
            <summary>
            Node path name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.NodePathName.Guid">
            <summary>
            Gets the guid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.NodePathName.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePathName.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid of node (<see cref="P:dnSpy.Contracts.TreeView.TreeNodeData.Guid"/>)</param>
            <param name="name">Extra data if needed or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePathName.Equals(dnSpy.Contracts.Documents.TreeView.NodePathName)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePathName.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePathName.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePathName.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.NodePrinter">
            <summary>
            Node printer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.WriteNamespace(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,System.String)">
            <summary>
            Writes a namespace
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="namespace">Namespace</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Writes a file
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="document">Document</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.AssemblyDef,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Writes an assembly
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="asm">Assembly</param>
            <param name="showToken">true to write tokens</param>
            <param name="showAssemblyVersion">true to write version</param>
            <param name="showAssemblyPublicKeyToken">true to write public key token</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.ModuleDef,System.Boolean)">
            <summary>
            Writes a module
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="module">Module</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.WriteToken(dnSpy.Contracts.Text.ITextColorWriter,dnlib.DotNet.IMDTokenProvider,System.Boolean)">
            <summary>
            Writes a token
            </summary>
            <param name="output">Output</param>
            <param name="tok">Token provider</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.AssemblyRef,System.Boolean)">
            <summary>
            Writes an assembly reference
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="asmRef">Assembly reference</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.ModuleRef,System.Boolean)">
            <summary>
            Writes a module reference
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="modRef">Module reference</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.TypeDef,System.Boolean)">
            <summary>
            Writes a type
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="type">Type</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Writes a type
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="type">Type</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.EventDef,System.Boolean)">
            <summary>
            Writes an event
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="event">Event</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.PropertyDef,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Writes a property
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="property">Property</param>
            <param name="showToken">true to write tokens</param>
            <param name="isIndexer">true if it's an indexer</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.FieldDef,System.Boolean)">
            <summary>
            Writes a field
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="field">Field</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NodePrinter.Write(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnlib.DotNet.MethodDef,System.Boolean)">
            <summary>
            Writes a method
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="method">Method</param>
            <param name="showToken">true to write tokens</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection.Clear">
            <summary>
            All document nodes have been cleared
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection.Add">
            <summary>
            A new document node was added
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection.Remove">
            <summary>
            A document node was removed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollectionChangedEventArgs">
            <summary>
            Event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollectionChangedEventArgs.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollectionChangedEventArgs.Nodes">
            <summary>
            All document nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollectionChangedEventArgs.CreateClear(dnSpy.Contracts.Documents.TreeView.DsDocumentNode[])">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection.Clear"/> instance
            </summary>
            <param name="clearedDocuments">All cleared documents</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollectionChangedEventArgs.CreateAdd(dnSpy.Contracts.Documents.TreeView.DsDocumentNode)">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection.Add"/> instance
            </summary>
            <param name="document">Added document</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollectionChangedEventArgs.CreateRemove(dnSpy.Contracts.Documents.TreeView.DsDocumentNode[])">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Documents.TreeView.NotifyDocumentTreeViewCollection.Remove"/> instance
            </summary>
            <param name="documents">Removed documents</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.PEDocumentNode">
            <summary>
            A PE file (but not a .NET file)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.PEDocumentNode.IsExe">
            <summary>
            true if it's an .exe file, false if it's a .dll file
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.PEDocumentNode.#ctor(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">Document</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.PropertyNode">
            <summary>
            A property node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.PropertyNode.PropertyDef">
            <summary>
            Gets the property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.PropertyNode.#ctor(dnlib.DotNet.PropertyDef)">
            <summary>
            Constructor
            </summary>
            <param name="property">Property</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.PropertyNode.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>, a getter, setter, or an other property method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.ReferencesFolderNode">
            <summary>
            References node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ReferencesFolderNode.Create(dnlib.DotNet.AssemblyRef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.AssemblyReferenceNode"/>
            </summary>
            <param name="asmRef">Assembly reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ReferencesFolderNode.Create(dnlib.DotNet.ModuleRef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.ModuleReferenceNode"/>
            </summary>
            <param name="modRef">Module reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.ResourcesFolderNode">
            <summary>
            Resources node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.ResourcesFolderNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.BuiltInResourceElementNode">
            <summary>
            A resource created from a <see cref="T:dnlib.DotNet.Resources.ResourceElement"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.BuiltInResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.Deserializer">
            <summary>
            Deserializes data without loading the deserialized types. Only our types get "deserialized".
            This is only useful if it's eg. an image and it's stored in a byte[].
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.GuessFileType">
            <summary>
            Static methods for determining the type of a file.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions">
            <summary>
            <see cref="T:System.Windows.Forms.ImageList"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.Name">
            <summary>
            Gets/sets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.ColorDepth">
            <summary>
            Gets/sets the color depth
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.ImageSize">
            <summary>
            Gets/sets the image size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.TransparentColor">
            <summary>
            Gets/sets the transparent color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.ImageSources">
            <summary>
            Gets the images
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions.#ctor(dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions)">
            <summary>
            Constructor
            </summary>
            <param name="other">Other instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceElementNode">
            <summary>
            A resource node created from an image
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceNode">
            <summary>
            A resource node created from an image
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.EmbeddedResource)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resource">Resource</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceUtilities">
            <summary>
            Resource image utils
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ImageResourceUtilities.CreateImageSource(System.Byte[])">
            <summary>
            Creates a <see cref="T:System.Windows.Media.ImageSource"/>
            </summary>
            <param name="data">Data</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider">
            <summary>
            Implemented by all resource nodes, and contains all raw data, RVA, and size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider.RVA">
            <summary>
            RVA of resource or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider.FileOffset">
            <summary>
            File offset of resource or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider.Length">
            <summary>
            Length of the resource
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider.GetResourceData(dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType)">
            <summary>
            Gets the resource data
            </summary>
            <param name="type">Type of data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider.WriteShort(dnSpy.Contracts.Decompiler.IDecompilerOutput,dnSpy.Contracts.Decompiler.IDecompiler,System.Boolean)">
            <summary>
            Write a short string (typically one line) to <paramref name="output"/>
            </summary>
            <param name="output">Output</param>
            <param name="decompiler">Decompiler</param>
            <param name="showOffset">true to write offset and size of resource in the PE image, if
            that info is available</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider.ToString(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Used by the searcher. Should only return a string if the data is text or compiled text.
            I.e., null should be returned if it's an <see cref="T:System.Int32"/>, but a string if it's eg. an
            XML doc.
            </summary>
            <param name="token">Cancellation token</param>
            <param name="canDecompile">true if the callee can decompile (eg. XAML), false otherwise</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeFactory">
            <summary>
            Creates resource nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeFactory.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resource,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode"/> instance. Pass it to <see cref="M:dnSpy.Contracts.TreeView.ITreeView.Create(dnSpy.Contracts.TreeView.TreeNodeData)"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="resource">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeFactory.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resources.ResourceElement,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode"/> instance. Pass it to <see cref="M:dnSpy.Contracts.TreeView.ITreeView.Create(dnSpy.Contracts.TreeView.TreeNodeData)"/>
            </summary>
            <param name="module">Owner module</param>
            <param name="resourceElement">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeProvider">
            <summary>
            Creates resource nodes. Use <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ExportResourceNodeProviderAttribute"/> to export an
            instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeProvider.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resource,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode"/> instance or returns null
            </summary>
            <param name="module">Owner module</param>
            <param name="resource">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeProvider.Create(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resources.ResourceElement,dnSpy.Contracts.TreeView.ITreeNodeGroup)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode"/> instance or returns null
            </summary>
            <param name="module">Owner module</param>
            <param name="resourceElement">Resource</param>
            <param name="treeNodeGroup">Group</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Documents.TreeView.Resources.ExportResourceNodeProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ExportResourceNodeProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.IResourceNodeProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ExportResourceNodeProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ExportResourceNodeProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceData">
            <summary>
            Raw resource data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceData.Name">
            <summary>
            Name of resource
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceData.GetStream(System.Threading.CancellationToken)">
            <summary>
            Gets the stream. Can be called in any thread.
            </summary>
            <param name="token">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceData.#ctor(System.String,System.Func{System.Threading.CancellationToken,System.IO.Stream})">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="getStream">Returns the stream. It can be called in any thread.</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceData"/> type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType.Deserialized">
            <summary>
            Deserialized data
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType.Serialized">
            <summary>
            Serialized data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode">
            <summary>
            Resource element node base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.ResourceElement">
            <summary>
            Gets the resource element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.WriteCore(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.GetExpandedIcon(dnSpy.Contracts.Images.IDotNetImageService)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.GetIcon(dnSpy.Contracts.Images.IDotNetImageService)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.GetIcon">
            <summary>
            Gets the icon to use
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.NodePathName">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.FileOffset">
            <summary>
            Gets the file offset of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.Length">
            <summary>
            Gets the length of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.RVA">
            <summary>
            Gets the RVA of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.TreeNodeGroup">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.WriteShort(dnSpy.Contracts.Decompiler.IDecompilerOutput,dnSpy.Contracts.Decompiler.IDecompiler,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.ValueString">
            <summary>
            Gets the value as a string
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.ToString(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Converts the value to a string
            </summary>
            <param name="token">Cancellation token</param>
            <param name="canDecompile">true if the data can be decompiled</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.GetResourceData(dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.GetDeserializedData">
            <summary>
            Gets the deserialized data
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.CheckCanUpdateData(dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Checks whether <see cref="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.UpdateData(dnlib.DotNet.Resources.ResourceElement)"/> can execute. Used by the
            assembly editor. Returns null or an empty string if the data can be updated, else an
            error string that can be shown to the user.
            </summary>
            <param name="newResElem">New data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.UpdateData(dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Updates the internal resource data. Must only be called if
            <see cref="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.CheckCanUpdateData(dnlib.DotNet.Resources.ResourceElement)"/> returned true. Used by the assembly
            editor.
            </summary>
            <param name="newResElem">New data</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode.GetFilterType(dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementSetNode">
            <summary>
            A resource node created from a <see cref="T:dnlib.DotNet.Resources.ResourceElementSet"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementSetNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resource)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resource">Resource</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementSetNode.RegenerateEmbeddedResource">
            <summary>
            Regenerate the <see cref="T:dnlib.DotNet.EmbeddedResource"/>. Used by the assembly editor.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode">
            <summary>
            Resource node base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.Resource">
            <summary>
            Gets the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.WriteCore(dnSpy.Contracts.Text.ITextColorWriter,dnSpy.Contracts.Decompiler.IDecompiler,dnSpy.Contracts.Documents.TreeView.DocumentNodeWriteOptions)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetExpandedIcon(dnSpy.Contracts.Images.IDotNetImageService)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetIcon(dnSpy.Contracts.Images.IDotNetImageService)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetIcon">
            <summary>
            Gets the icon
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.NodePathName">
            <inheritdoc/>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.FileOffset">
            <summary>
            Gets the offset of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.Length">
            <summary>
            Gets the length of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.RVA">
            <summary>
            Gets the RVA of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.TreeNodeGroup">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resource)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resource">Resource</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.Save">
            <summary>
            Saves the resource
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.WriteShort(dnSpy.Contracts.Decompiler.IDecompilerOutput,dnSpy.Contracts.Decompiler.IDecompiler,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.ToString(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Converts the value to a string
            </summary>
            <param name="token">Cancellation token</param>
            <param name="canDecompile">true if the data can be decompiled</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetResourceData(dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetDeserializedData">
            <summary>
            Gets the deserialized data
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetSerializedData">
            <summary>
            Gets the serialized data
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode.GetFilterType(dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities">
            <summary>
            Resource utilities
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities.TryGetImageReference(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an image reference
            </summary>
            <param name="dnSpyAsm">dnSpy assembly</param>
            <param name="name">Name of resource element</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities.FixUserType(dnlib.DotNet.Resources.ResourceTypeCode)">
            <summary>
            Returns <see cref="F:dnlib.DotNet.Resources.ResourceTypeCode.UserTypes"/> if it's a user type, else <paramref name="code"/> is returned
            </summary>
            <param name="code">Resource type code</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities.StringToStream(System.String)">
            <summary>
            Converts a string to a stream
            </summary>
            <param name="s">String</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities.WriteOffsetComment(dnSpy.Contracts.Decompiler.IDecompilerOutput,dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider,System.Boolean)">
            <summary>
            Writes the offset
            </summary>
            <param name="output">Output</param>
            <param name="node">Node</param>
            <param name="showOffsetComment">true if the offset and comment should be written</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities.TryGetString(System.IO.Stream)">
            <summary>
            Returns the string contents of <paramref name="stream"/> if it's text, else null is returned
            </summary>
            <param name="stream">Stream</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.ResourceUtilities.Decompile(dnSpy.Contracts.Documents.Tabs.DocViewer.IDecompileNodeContext,System.IO.Stream,System.String)">
            <summary>
            "Decompiles" the data
            </summary>
            <param name="context">Context</param>
            <param name="stream">Stream</param>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SaveResources">
            <summary>
            Saves resources
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SaveResources.GetResourceData(dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider[],dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType)">
            <summary>
            Gets all resource data
            </summary>
            <param name="nodes">Nodes</param>
            <param name="resourceDataType">Type of data to get</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SaveResources.Save(dnSpy.Contracts.Documents.TreeView.Resources.IResourceDataProvider[],System.Boolean,dnSpy.Contracts.Documents.TreeView.Resources.ResourceDataType,System.Windows.Window)">
            <summary>
            Saves the nodes
            </summary>
            <param name="nodes">Nodes</param>
            <param name="useSubDirs">true to create sub directories, false to dump everything in the same folder</param>
            <param name="resourceDataType">Type of data to save</param>
            <param name="ownerWindow">Owner window</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializationUtilities">
            <summary>
            Serialization utilities
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializationUtilities.CreateSerializedImage(System.String)">
            <summary>
            Creates a serialized image
            </summary>
            <param name="filename">Filename of image</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializationUtilities.Serialize(System.Object)">
            <summary>
            Serializes the object
            </summary>
            <param name="obj">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializationUtilities.Deserialize(System.Byte[],System.Object@)">
            <summary>
            Deserializes the data
            </summary>
            <param name="data">Serialized data</param>
            <param name="obj">Deserialized data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializationUtilities.CreateObjectFromString(System.Type,System.String,System.Object@)">
            <summary>
            Creates an object from a string
            </summary>
            <param name="targetType">Target type</param>
            <param name="typeAsString">Data as a string</param>
            <param name="obj">Updated with the deserialized data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializationUtilities.ConvertObjectToString(System.Object)">
            <summary>
            Converts data to a string
            </summary>
            <param name="obj">Data</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerResourceElementNode">
            <summary>
            A resource node created from a serialized <see cref="T:System.Windows.Forms.ImageListStreamer"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerResourceElementNode.ImageListOptions">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.ImageList"/> options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerUtilities">
            <summary>
            Serialized image list streamer utilities
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerUtilities.GetImageData(dnlib.DotNet.ModuleDef,System.String,System.Byte[],System.Byte[]@)">
            <summary>
            Gets the image data
            </summary>
            <param name="module">Module</param>
            <param name="typeName">Name of type</param>
            <param name="serializedData">Serialized data</param>
            <param name="imageData">Updated with image data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerUtilities.Serialize(dnSpy.Contracts.Documents.TreeView.Resources.ImageListOptions)">
            <summary>
            Serialize an image list
            </summary>
            <param name="opts">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerUtilities.CheckCanUpdateData(dnlib.DotNet.ModuleDef,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Checks whether the data can be updated
            </summary>
            <param name="module">Module</param>
            <param name="newResElem">New data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageListStreamerUtilities.ReadImageData(System.Byte[])">
            <summary>
            Reads an image list
            </summary>
            <param name="imageData">Serialized image list</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageResourceElementNode">
            <summary>
            A resource node created from a serialized image (BMP or ICO)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageResourceElementNode.GetAsRawImage">
            <summary>
            Gets the raw <see cref="T:dnlib.DotNet.Resources.ResourceElement"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageUtilities">
            <summary>
            Serialized image utilities
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageUtilities.GetImageData(dnlib.DotNet.ModuleDef,System.String,System.Byte[],System.Byte[]@)">
            <summary>
            Gets the image data
            </summary>
            <param name="module">Module</param>
            <param name="typeName">Name of type</param>
            <param name="serializedData">Serialized data</param>
            <param name="imageData">Updated with the image data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageUtilities.CheckType(dnlib.DotNet.ModuleDef,System.String,dnlib.DotNet.TypeRef)">
            <summary>
            Checks whether the type matches an expected type
            </summary>
            <param name="module">Module</param>
            <param name="name">Type name</param>
            <param name="expectedType">Expected type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedImageUtilities.Serialize(dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Serializes the image
            </summary>
            <param name="resElem">Resource element</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode">
            <summary>
            Serialized resource element node base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.ValueString">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.GetIcon">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.GetDeserializedData">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.OnDeserialized">
            <summary>
            Called after it's been deserialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.CanDeserialize">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.Deserialize"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.Deserialize">
            <summary>
            Deserializes the data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.UpdateData(dnlib.DotNet.Resources.ResourceElement)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.SerializedResourceElementNode.ToString(System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.UnknownResourceNode">
            <summary>
            A <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode"/> created from an unknown resource
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.UnknownResourceNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resource)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resource">Resource</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.Resources.UnknownSerializedResourceElementNode">
            <summary>
            Unknown serialized <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.Resources.UnknownSerializedResourceElementNode.Guid">
            <summary>
            Guid of this node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.Resources.UnknownSerializedResourceElementNode.#ctor(dnSpy.Contracts.TreeView.ITreeNodeGroup,dnlib.DotNet.Resources.ResourceElement)">
            <summary>
            Constructor
            </summary>
            <param name="treeNodeGroup">Treenode group</param>
            <param name="resourceElement">Resource element</param>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.TypeNode">
            <summary>
            A type node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Documents.TreeView.TypeNode.TypeDef">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.TypeNode.#ctor(dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.TypeNode.Create(dnlib.DotNet.MethodDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.MethodNode"/>
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.TypeNode.Create(dnlib.DotNet.PropertyDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.PropertyNode"/>
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.TypeNode.Create(dnlib.DotNet.EventDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.EventNode"/>
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.TypeNode.Create(dnlib.DotNet.FieldDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.FieldNode"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.TypeNode.Create(dnlib.DotNet.TypeDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Documents.TreeView.TypeNode"/>
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Documents.TreeView.UnknownDocumentNode">
            <summary>
            Unknown file (not a PE or .NET file)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Documents.TreeView.UnknownDocumentNode.#ctor(dnSpy.Contracts.Documents.IDsDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">Document</param>
        </member>
        <member name="T:dnSpy.Contracts.Extension.ExtensionEvent">
            <summary>
            Extension event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.ExtensionEvent.Loaded">
            <summary>
            All extensions have been loaded
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.ExtensionEvent.AppLoaded">
            <summary>
            The app has been loaded
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.ExtensionEvent.AppExit">
            <summary>
            The app is closing
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.ExtensionInfo">
            <summary>
            Extension information
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.ExtensionInfo.ShortDescription">
            <summary>
            Short description or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.ExtensionInfo.Copyright">
            <summary>
            Copyright message or null to get it from the assembly's <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.IAutoLoaded">
            <summary>
            All classes that export this type automatically get loaded at startup.
            Use <see cref="T:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute"/> to export it.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.AutoLoadedLoadType">
            <summary>
            <see cref="T:dnSpy.Contracts.Extension.IAutoLoaded"/> load type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.AutoLoadedLoadType.BeforeExtensions">
            <summary>
            Loaded before extensions are created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.AutoLoadedLoadType.AfterExtensions">
            <summary>
            Loaded after extensions have been created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.AutoLoadedLoadType.AfterExtensionsLoaded">
            <summary>
            Loaded after all extensions have been created and loaded
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Extension.AutoLoadedLoadType.AppLoaded">
            <summary>
            Loaded when the app has been loaded
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.IAutoLoadedMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.IAutoLoadedMetadata.LoadType">
            <summary>See <see cref="P:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute.LoadType"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.IAutoLoadedMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Extension.IAutoLoaded"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.ExportAutoLoadedAttribute.LoadType">
            <summary>
            Default is <see cref="F:dnSpy.Contracts.Extension.AutoLoadedLoadType.AppLoaded"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.IExtension">
            <summary>
            All extensions should export exactly one type that implements this interface. Use
            <see cref="T:dnSpy.Contracts.Extension.ExportExtensionAttribute"/> to export a extension.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Extension.IExtension.OnEvent(dnSpy.Contracts.Extension.ExtensionEvent,System.Object)">
            <summary>
            Called at various times
            </summary>
            <param name="event">Event</param>
            <param name="obj">Data, see <see cref="T:dnSpy.Contracts.Extension.ExtensionEvent"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Extension.IExtension.ExtensionInfo">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Extension.ExtensionInfo"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.IExtension.MergedResourceDictionaries">
            <summary>
            Gets relative paths of all resource dictionaries that will be added to the app's resources
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.IExtensionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.IExtensionMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Extension.ExportExtensionAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Extension.ExportExtensionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Extension.IExtension"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Extension.ExportExtensionAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Extension.ExportExtensionAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider">
            <summary>
            Shows tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider.ShowToolTip(dnSpy.Contracts.Hex.HexBufferSpanSelection,System.Object)">
            <summary>
            Shows a tooltip
            </summary>
            <param name="span">Span and selection flags</param>
            <param name="toolTipContent">Tooltip content</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider.ShowToolTip(dnSpy.Contracts.Hex.HexBufferSpanSelection,System.Object,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Shows a tooltip
            </summary>
            <param name="span">Span and selection flags</param>
            <param name="toolTipContent">Tooltip content</param>
            <param name="style">Popup style</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider.ShowToolTip(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,System.Object)">
            <summary>
            Shows a tooltip
            </summary>
            <param name="bufferSpan">Buffer span</param>
            <param name="flags">Selection flags</param>
            <param name="toolTipContent">Tooltip content</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider.ShowToolTip(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,System.Object,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Shows a tooltip
            </summary>
            <param name="bufferSpan">Buffer span</param>
            <param name="flags">Selection flags</param>
            <param name="toolTipContent">Tooltip content</param>
            <param name="style">Popup style</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider.ClearToolTip">
            <summary>
            Closes the tooltip
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Adornments.HexToolTipProviderFactory">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider"/> factory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProviderFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Adornments.HexToolTipProviderFactory.GetToolTipProvider(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets the tooltip provider
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator">
            <summary>
            Creates text elements that can be shown in tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator.Writer">
            <summary>
            Gets the writer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator.IsEmpty">
            <summary>
            true if no text has been written to <see cref="P:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator.Writer"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator.CreateTextElement(System.Boolean,System.String)">
            <summary>
            Creates the text element
            </summary>
            <param name="tag">Tag (<see cref="T:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags"/>), can be null</param>
            <param name="colorize">true if it should be colorized</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreatorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator"/> instances that can be used to create text
            elements shown in tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreatorProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreatorProvider.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator"/> using the default content type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreatorProvider.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Classification.DnSpy.HexTextElementCreator"/>
            </summary>
            <param name="contentType">Content type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexClassificationChangedEventArgs">
            <summary>
            Classification span changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.HexClassificationChangedEventArgs.ChangeSpan">
            <summary>
            The span that changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassificationChangedEventArgs.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="changeSpan">The span that changed</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexClassificationContext">
            <summary>
            Hex classification context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.HexClassificationContext.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.HexClassificationContext.Line">
            <summary>
            Gets the buffer line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.HexClassificationContext.LineSpan">
            <summary>
            Line span to classify
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassificationContext.#ctor(dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="line">Line info</param>
            <param name="lineSpan">Line span to classify</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexClassificationFormatMapService">
            <summary>
            Classification format map service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassificationFormatMapService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassificationFormatMapService.GetClassificationFormatMap(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/>
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassificationFormatMapService.GetClassificationFormatMap(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap"/>
            </summary>
            <param name="category">Appearance category</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexClassificationSpan">
            <summary>
            Classification type and span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.HexClassificationSpan.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Classification.HexClassificationSpan.ClassificationType">
            <summary>
            Gets the classification type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassificationSpan.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="classification">Classification type</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexClassifier">
            <summary>
            Hex viewer classifier
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Classification.HexClassifier.ClassificationChanged">
            <summary>
            Raised when classification spans have changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifier.GetClassificationSpans(System.Collections.Generic.List{dnSpy.Contracts.Hex.Classification.HexClassificationSpan},dnSpy.Contracts.Hex.Classification.HexClassificationContext)">
            <summary>
            Classifies text
            </summary>
            <param name="result">Updated with classifications</param>
            <param name="context">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifier.GetClassificationSpans(System.Collections.Generic.List{dnSpy.Contracts.Hex.Classification.HexClassificationSpan},dnSpy.Contracts.Hex.Classification.HexClassificationContext,System.Threading.CancellationToken)">
            <summary>
            Classifies text synchronously
            </summary>
            <param name="result">Updated with classifications</param>
            <param name="context">Context</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifier.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifier.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexClassifierAggregatorService">
            <summary>
            Hex buffer classifier aggregator service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifierAggregatorService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexClassifierAggregatorService.GetClassifier(dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Creates a classifier aggregator
            </summary>
            <param name="buffer">Buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexEditorFormatMapService">
            <summary>
            Hex editor format map service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexEditorFormatMapService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexEditorFormatMapService.GetEditorFormatMap(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>
            </summary>
            <param name="view">Hex view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexEditorFormatMapService.GetEditorFormatMap(System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/>
            </summary>
            <param name="category">Appearance category</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Classification.HexViewClassifierAggregatorService">
            <summary>
            Hex view classifier aggregator service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexViewClassifierAggregatorService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Classification.HexViewClassifierAggregatorService.GetClassifier(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a classifier aggregator
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.DefaultHexViewHostOptions">
            <summary>
            Default <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewHost"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions">
            <summary>
            Default <see cref="T:dnSpy.Contracts.Hex.Editor.HexView"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.DefaultWpfHexViewOptions">
            <summary>
            Default <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer">
            <summary>
            Adornment layer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.VisualElement">
            <summary>
            Gets the UI element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.IsEmpty">
            <summary>
            true if the layer is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.Opacity">
            <summary>
            Gets/sets the layer opacity
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.Elements">
            <summary>
            Gets all elements
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.AddAdornment(dnSpy.Contracts.Hex.HexBufferLine,System.Object,System.Windows.UIElement)">
            <summary>
            Adds an adornment. Returns true if the adornment was added.
            </summary>
            <param name="line">Line</param>
            <param name="tag">Tag</param>
            <param name="adornment">Adornment</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior,dnSpy.Contracts.Hex.HexBufferLine,System.Object,System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Adds an adornment. Returns true if the adornment was added.
            </summary>
            <param name="behavior">Positioning behavior</param>
            <param name="line">Line</param>
            <param name="tag">Tag</param>
            <param name="adornment">Adornment</param>
            <param name="removedCallback">Called when the adornment is removed</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.AddAdornment(dnSpy.Contracts.Hex.HexBufferSpan,System.Object,System.Windows.UIElement)">
            <summary>
            Adds an adornment. Returns true if the adornment was added.
            </summary>
            <param name="visualSpan">Span</param>
            <param name="tag">Tag</param>
            <param name="adornment">Adornment</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior,System.Nullable{dnSpy.Contracts.Hex.HexBufferSpan},System.Object,System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Adds an adornment. Returns true if the adornment was added.
            </summary>
            <param name="behavior">Positioning behavior</param>
            <param name="visualSpan">Span</param>
            <param name="tag">Tag</param>
            <param name="adornment">Adornment</param>
            <param name="removedCallback">Called when the adornment is removed</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveAdornment(System.Windows.UIElement)">
            <summary>
            Removes an adornment
            </summary>
            <param name="adornment">Adornment to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveAdornmentsByTag(System.Object)">
            <summary>
            Removes all adornments with the specified tag
            </summary>
            <param name="tag">Tag</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveMatchingAdornments(System.Predicate{dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement})">
            <summary>
            Removes all matching adornments
            </summary>
            <param name="match">Returns true if the adornment should be removed</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveAdornmentsByVisualSpan(dnSpy.Contracts.Hex.HexBufferLine)">
            <summary>
            Removes an adornment
            </summary>
            <param name="line">Line</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveAdornmentsByVisualSpan(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Removes an adornment
            </summary>
            <param name="visualSpan">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveMatchingAdornments(dnSpy.Contracts.Hex.HexBufferLine,System.Predicate{dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement})">
            <summary>
            Removes all matching adornments
            </summary>
            <param name="line">Line</param>
            <param name="match">Returns true if the adornment should be removed</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveMatchingAdornments(dnSpy.Contracts.Hex.HexBufferSpan,System.Predicate{dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement})">
            <summary>
            Removes all matching adornments
            </summary>
            <param name="visualSpan">Span</param>
            <param name="match">Returns true if the adornment should be removed</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayer.RemoveAllAdornments">
            <summary>
            Removes all adornments
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerDefinition">
            <summary>
            Defines an adornment layer
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement">
            <summary>
            Adornment layer element
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement.Adornment">
            <summary>
            Gets the adornment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement.Behavior">
            <summary>
            Gets the positioning behavior
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement.RemovedCallback">
            <summary>
            Called when the adornment is removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexAdornmentLayerElement.VisualSpan">
            <summary>
            Buffer span
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexCaretPosition">
            <summary>
            Caret position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaretPosition.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaretPosition.Position">
            <summary>
            Gets the position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.#ctor(dnSpy.Contracts.Hex.HexColumnPosition)">
            <summary>
            Constructor
            </summary>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.op_Equality(dnSpy.Contracts.Hex.Editor.HexCaretPosition,dnSpy.Contracts.Hex.Editor.HexCaretPosition)">
            <summary>
            operator ==()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.op_Inequality(dnSpy.Contracts.Hex.Editor.HexCaretPosition,dnSpy.Contracts.Hex.Editor.HexCaretPosition)">
            <summary>
            operator !=()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.Equals(dnSpy.Contracts.Hex.Editor.HexCaretPosition)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPosition.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexColumnLineKind">
            <summary>
            Column line kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexColumnLineKind.None">
            <summary>
            No line is shown (it's disabled)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexColumnLineKind.Solid">
            <summary>
            Solid lines
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexColumnLineKind.Dashed_1_1">
            <summary>
            Dashed lines (dash 1px, gap 1px)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexColumnLineKind.Dashed_2_2">
            <summary>
            Dashed lines (dash 2px, gap 2px)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexColumnLineKind.Dashed_3_3">
            <summary>
            Dashed lines (dash 3px, gap 3px)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexColumnLineKind.Dashed_4_4">
            <summary>
            Dashed lines (dash 4px, gap 4px)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexCursorProviderFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexCursorProvider"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorProviderFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorProviderFactory.Create(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexCursorProvider"/> instance or returns null
            </summary>
            <param name="wpfHexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities">
            <summary>
            Cursor priorities
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities.Low">
            <summary>
            Low priority
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities.Normal">
            <summary>
            Normal priority
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities.High">
            <summary>
            High priority
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities.Offset">
            <summary>
            Priority of the offset cursor (hand)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexCursorInfo">
            <summary>
            Cursor info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCursorInfo.Cursor">
            <summary>
            Gets the cursor or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCursorInfo.Priority">
            <summary>
            Gets the priority, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities.High"/>. The highest priority cursor is used.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorInfo.#ctor(System.Windows.Input.Cursor,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="cursor">Cursor or null</param>
            <param name="priority">Priority, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexCursorPriorities.High"/>. The highest priority cursor is used</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorInfo.Equals(dnSpy.Contracts.Hex.Editor.HexCursorInfo)">
            <summary>
            Equals()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorInfo.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorInfo.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexCursorProvider">
            <summary>
            Hex editor <see cref="T:System.Windows.Input.Cursor"/> provider
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCursorProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexCursorProvider.CursorInfoChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Editor.HexCursorProvider.CursorInfo"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCursorProvider.CursorInfo">
            <summary>
            Gets the cursor and priority
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexEditorFactoryServiceListener">
            <summary>
            Gets notified when hex views get created, see also <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewCreationListener"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryServiceListener.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryServiceListener.HexViewCreated(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Called after a hex view is created
            </summary>
            <param name="hexView">Hex view</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexGlyphFactory">
            <summary>
            Creates glyphs shown in glyph margins
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphFactory.GenerateGlyph(dnSpy.Contracts.Hex.Formatting.WpfHexViewLine,dnSpy.Contracts.Hex.Editor.HexGlyphTag)">
            <summary>
            Generates a glyph or returns null
            </summary>
            <param name="line">Line</param>
            <param name="tag">Tag</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexGlyphFactoryProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexGlyphFactory"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphFactoryProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphFactoryProvider.GetGlyphFactory(dnSpy.Contracts.Hex.Editor.WpfHexView,dnSpy.Contracts.Hex.Editor.WpfHexViewMargin)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexGlyphFactory"/> or returns null
            </summary>
            <param name="view">Hex view</param>
            <param name="margin">Margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexGlyphMouseProcessorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexMouseProcessor"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphMouseProcessorProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphMouseProcessorProvider.GetAssociatedMouseProcessor(dnSpy.Contracts.Hex.Editor.WpfHexViewHost,dnSpy.Contracts.Hex.Editor.WpfHexViewMargin)">
            <summary>
            Creates a mouse processor or returns null
            </summary>
            <param name="wpfHexViewHost">Hex view host</param>
            <param name="margin">Margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexGlyphTag">
            <summary>
            A glyph margin tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGlyphTag.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexGroups.HexEditorGroupFactoryService">
            <summary>
            Creates hex views that are part of some hex view group
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.HexEditorGroupFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.HexEditorGroupFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a hex view host
            </summary>
            <param name="buffer">Buffer</param>
            <param name="group">Group, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroup"/></param>
            <param name="subGroup">Sub group, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroupDefault"/></param>
            <param name="menuGuid">Menu guid or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.HexEditorGroupFactoryService.GetDefaultLocalOptions(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets the default local options
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions">
            <summary>
            Local group options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.ShowOffsetColumn">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.ShowOffsetColumnId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.ShowValuesColumn">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.ShowValuesColumnId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.ShowAsciiColumn">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.ShowAsciiColumnId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.StartPosition">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.StartPositionId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.EndPosition">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.EndPositionId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.BasePosition">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.BasePositionId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.UseRelativePositions">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.UseRelativePositionsId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.OffsetBitSize">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.OffsetBitSizeId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.HexValuesDisplayFormat">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.HexValuesDisplayFormatId"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.BytesPerLine">
            <summary><see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.BytesPerLineId"/></summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.#ctor(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Constructor
            </summary>
            <param name="hexView">Hex view</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.InitializeFrom(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Initializes this instance
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.WriteTo(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Writes all options to <paramref name="hexView"/>
            </summary>
            <param name="hexView">Hex view</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.CopyTo(dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions)">
            <summary>
            Copies this instance to <paramref name="destination"/> and returns <paramref name="destination"/>
            </summary>
            <param name="destination">Destination</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.Equals(dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions)">
            <summary>
            Equals()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexGroups.LocalGroupOptions.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexImageReferenceTag">
            <summary>
            <see cref="P:dnSpy.Contracts.Hex.Editor.HexImageReferenceTag.ImageReference"/> tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexImageReferenceTag.ImageReference">
            <summary>
            Gets the image reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexImageReferenceTag.ZIndex">
            <summary>
            Gets the Z-index, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.CurrentValue"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexImageReferenceTag.#ctor(dnSpy.Contracts.Images.ImageReference,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="imageReference">Image reference</param>
            <param name="zIndex">Z-index, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.CurrentValue"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag">
            <summary>
            Intra text adornment tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.Adornment">
            <summary>
            Gets the adornment element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.RemovalCallback">
            <summary>
            Gets the removal callback or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.TopSpace">
            <summary>
            Gets the top space or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.Baseline">
            <summary>
            Gets the base line or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.TextHeight">
            <summary>
            Gets the text height or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.BottomSpace">
            <summary>
            Gets the bottom space or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.Affinity">
            <summary>
            Gets the position affinity or null to use the default value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
            <summary>
            Constructor
            </summary>
            <param name="adornment">Adornment element</param>
            <param name="removalCallback">Called when the adornment is removed, may be null</param>
            <param name="topSpace">Top space or null to use the default value</param>
            <param name="baseline">Base line or null to use the default value</param>
            <param name="textHeight">Text height or null to use the default value</param>
            <param name="bottomSpace">Bottom space or null to use the default value</param>
            <param name="affinity">Position affinity or null to use the default value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
            <summary>
            Constructor
            </summary>
            <param name="adornment">Adornment element</param>
            <param name="removalCallback">Called when the adornment is removed, may be null</param>
            <param name="affinity">Position affinity or null to use the default value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexIntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Constructor
            </summary>
            <param name="adornment">Adornment element</param>
            <param name="removalCallback">Called when the adornment is removed, may be null</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMarginContextMenuHandlerProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.IHexMarginContextMenuHandler"/>s or returns null. You must <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>
            this interface and add a <see cref="T:dnSpy.Contracts.Hex.Editor.HexMarginNameAttribute"/> with the name of the margin (eg.
            <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexMarginNames.Glyph"/>). Optional attribute: <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMarginContextMenuHandlerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMarginContextMenuHandlerProvider.Create(dnSpy.Contracts.Hex.Editor.WpfHexViewHost,dnSpy.Contracts.Hex.Editor.WpfHexViewMargin)">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.IHexMarginContextMenuHandler"/>s or returns null
            </summary>
            <param name="wpfHexViewHost">Hex view host</param>
            <param name="margin">Margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.IHexMarginContextMenuHandler">
            <summary>
            Creates context menu objects
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.IHexMarginContextMenuHandler.GetContextMenuObjects(System.Windows.Point)">
            <summary>
            Creates context menu objects
            </summary>
            <param name="marginRelativePoint">Position of the mouse pointer relative to the glyph margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMarginContextMenuService">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsProvider"/> that uses <see cref="T:dnSpy.Contracts.Hex.Editor.IHexMarginContextMenuHandler"/>s
            to create objects.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMarginContextMenuService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMarginContextMenuService.Create(dnSpy.Contracts.Hex.Editor.WpfHexViewHost,dnSpy.Contracts.Hex.Editor.WpfHexViewMargin,System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsProvider"/>
            </summary>
            <param name="wpfHexViewHost">Hex view host</param>
            <param name="margin">Margin</param>
            <param name="marginName">Margin name</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMarginNameAttribute">
            <summary>
            Adds the name of a margin
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMarginNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="marginName">Name of margin, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexMarginNames.Glyph"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexMarginNameAttribute.MarginName">
            <summary>
            Name of margin, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexMarginNames.Glyph"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes">
            <summary>
            Hex marker service Z-indexes. Markers with a negative z-index are placed in a
            marker layer below most other layers.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.CurrentValue">
            <summary>
            Current value highlighter
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.FindMatch">
            <summary>
            Find match
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.ToolTipField0">
            <summary>
            ToolTip field #0
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.ToolTipField1">
            <summary>
            ToolTip field #1
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMarkerServiceZIndexes.ToolTipCurrentField">
            <summary>
            ToolTip current field
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexReferenceConverter">
            <summary>
            Converts a reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexReferenceConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexReferenceConverter.Convert(dnSpy.Contracts.Hex.Editor.HexView,System.Object)">
            <summary>
            Converts the reference to a new reference or returns the original value
            </summary>
            <param name="hexView">Hex view</param>
            <param name="reference">Reference</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexReferenceHandler">
            <summary>
            Handles references created by <see cref="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetReference(dnSpy.Contracts.Hex.HexPosition)"/>.
            Export an instance with a <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/>, see <see cref="T:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerNames"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexReferenceHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexReferenceHandler.Handle(dnSpy.Contracts.Hex.Editor.HexView,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Handles a reference
            </summary>
            <param name="hexView">Hex view</param>
            <param name="reference">Reference created by eg. <see cref="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetReference(dnSpy.Contracts.Hex.HexPosition)"/></param>
            <param name="tags">Tags, see <see cref="T:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerTags"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexReferenceHandlerService">
            <summary>
            Handles references created by <see cref="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetReference(dnSpy.Contracts.Hex.HexPosition)"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexReferenceHandlerService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexReferenceHandlerService.Handle(dnSpy.Contracts.Hex.Editor.HexView,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Handles a reference
            </summary>
            <param name="hexView">Hex view</param>
            <param name="reference">Reference created by eg. <see cref="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetReference(dnSpy.Contracts.Hex.HexPosition)"/></param>
            <param name="tags">Tags or null, see <see cref="T:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerTags"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator">
            <summary>
            Returns data from all <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator.Providers">
            <summary>
            Gets all providers
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator.GetFields(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets all fields
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator.GetToolTips(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets all tooltips
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator.GetReferences(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets all references
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregatorFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregatorFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregatorFactory.Create(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoAggregator"/> instance
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider">
            <summary>
            Structure info provider
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetFields(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets all related fields. It's enough to return the span of the current field at
            <paramref name="position"/> and the span of the full structure that contains the field.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetToolTip(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a tooltip or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider.GetReference(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a reference or null. The reference can be used to look up a high level
            representation of the data, eg. the C# statement in decompiled code.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureFieldKind">
            <summary>
            Field kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexStructureFieldKind.Other">
            <summary>
            Some other kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexStructureFieldKind.Structure">
            <summary>
            Span is the full structure
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexStructureFieldKind.SubStructure">
            <summary>
            Span is a sub structure
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexStructureFieldKind.Field">
            <summary>
            Span is a field
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexStructureFieldKind.CurrentField">
            <summary>
            Span is the current field
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureField">
            <summary>
            Structure field
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureField.BufferSpan">
            <summary>
            Span of field
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureField.Kind">
            <summary>
            Field kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureField.IsCurrentField">
            <summary>
            true if it's the current field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureField.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Editor.HexStructureFieldKind)">
            <summary>
            Constructor
            </summary>
            <param name="bufferSpan">Span of field</param>
            <param name="kind">Field kind</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderAndData`1">
            <summary>
            Contains a <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider"/> and data
            </summary>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderAndData`1.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderAndData`1.Provider">
            <summary>
            Gets the provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderAndData`1.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderAndData`1.#ctor(dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider,`0)">
            <summary>
            Constructor
            </summary>
            <param name="provider">Provider</param>
            <param name="value">Value</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider"/> instances. Export an instance with a
            <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> and an optional <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>.
            See <see cref="T:dnSpy.Contracts.Hex.Editor.PredefinedHexStructureInfoProviderFactoryNames"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderFactory.Create(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProvider"/> instance
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexGlyphFactoryProviderNames">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.HexGlyphFactoryProvider"/> names
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerNames">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Hex.Editor.HexReferenceHandler"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerNames.DefaultApplicationHandler">
            <summary>
            Default handler used by the application, and should be last
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerTags">
            <summary>
            Tags passed to <see cref="T:dnSpy.Contracts.Hex.Editor.HexReferenceHandlerService"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexReferenceHandlerTags.NewTab">
            <summary>
            Open the reference in a new tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexStructureInfoProviderFactoryNames">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.HexStructureInfoProviderFactory"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexStructureInfoProviderFactoryNames.DefaultHexFileStructure">
            <summary>
            Name of provider that uses <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/>s
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexKeyProcessor">
            <summary>
            Keyboard processor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.IsInterestedInHandledEvents">
            <summary>
            true if the instance is interested in handled events. Default value is false.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.KeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Key down handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.KeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Key up handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.TextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Text input handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.TextInputStart(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Text input start handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.TextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Text input update handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.PreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Preview key down handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.PreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Preview key up handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.PreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Preview text input handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.PreviewTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Preview text input start handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessor.PreviewTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Preview text input update handler
            </summary>
            <param name="args">Key event args</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexKeyProcessorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexKeyProcessor"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessorProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexKeyProcessorProvider.GetAssociatedProcessor(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexKeyProcessor"/> or returns null
            </summary>
            <param name="wpfHexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexLayerKind">
            <summary>
            Layer kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexLayerKind.Normal">
            <summary>
            Normal layer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexLayerKind.Overlay">
            <summary>
            Overlay layer. It's shown above all <see cref="F:dnSpy.Contracts.Hex.Editor.HexLayerKind.Normal"/> layers
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexLayerKind.Underlay">
            <summary>
            Underlay layer. It's shown below all <see cref="F:dnSpy.Contracts.Hex.Editor.HexLayerKind.Normal"/> layers
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexLayerKindAttribute">
            <summary>
            Adds a layer kind
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexLayerKindAttribute.#ctor(dnSpy.Contracts.Hex.Editor.HexLayerKind)">
            <summary>
            Constructor
            </summary>
            <param name="kind">Kind of layer</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexLayerKindAttribute.LayerKind">
            <summary>
            Layer kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMouseHoverAttribute">
            <summary>
            Overrides mouse hover delay
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexMouseHoverAttribute.Delay">
            <summary>
            Gets the delay in milliseconds
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseHoverAttribute.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="delay">Delay in milliseconds</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMouseProcessor">
            <summary>
            Mouse processor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button down preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button down postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse right button down preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse right button down postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button up preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button up postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Right button up preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Right button up postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse up preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse up postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse down preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse down postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse move preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse move postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Mouse wheel preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Mouse wheel postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse enter preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse enter postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse leave preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse leave postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Drag leave preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Drag leave postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Drag over preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessDragOver(System.Windows.DragEventArgs)">
            <summary>
            Drag over postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Drag enter preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Drag enter postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Drop preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessDrop(System.Windows.DragEventArgs)">
            <summary>
            Drop postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Query continue drag preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Query continue drag postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Give feedback preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Give feedback postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>
            Touch down preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>
            Touch down postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessTouchUp(System.Windows.Input.TouchEventArgs)">
            <summary>
            Touch up preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessTouchUp(System.Windows.Input.TouchEventArgs)">
            <summary>
            Touch up postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
            <summary>
            Stylus system gesture preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
            <summary>
            Stylus system gesture postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
            <summary>
            Manipulation inertia starting preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
            <summary>
            Manipulation inertia starting postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
            <summary>
            Manipulation starting preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
            <summary>
            Manipulation starting postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Manipulation delta preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Manipulation delta postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PreprocessManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Manipulation completed preprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessor.PostprocessManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Manipulation completed postprocess handler
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMouseProcessorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexMouseProcessor"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessorProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseProcessorProvider.GetAssociatedProcessor(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexMouseProcessor"/> or returns null
            </summary>
            <param name="wpfHexView"></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexScrollMap">
            <summary>
            Hex view scroll map
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexScrollMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexScrollMap.GetCoordinateAtBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the scrollmap coordinates of a buffer position
            </summary>
            <param name="bufferPosition">Buffer position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexScrollMap.GetBufferPositionAtCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a scrollmap coordinate
            </summary>
            <param name="coordinate">Scrollbar coordinate</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexScrollMap.Start">
            <summary>
            Gets the scrollmap coordinate of the start of the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexScrollMap.End">
            <summary>
            Gets the scrollmap coordinate of the end of the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexScrollMap.ThumbSize">
            <summary>
            Gets the size of the text visible in the view (in scrollmap coordinates)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexScrollMapFactoryService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.HexScrollMap"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexScrollMapFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexScrollMapFactoryService.Create(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Editor.HexScrollMap"/> instance
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent">
            <summary>
            Space reservation agent
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.HasFocus">
            <summary>
            true if its adornment has keyboard focus
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.IsMouseOver">
            <summary>
            true if the mouse is over its adornment
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.GotFocus">
            <summary>
            Raised after its adornment got keyboard focus
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.LostFocus">
            <summary>
            Raised after its adornment lost keyboard focus
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.Hide">
            <summary>
            Called to hide the adornment
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent.PositionAndDisplay(System.Windows.Media.Geometry)">
            <summary>
            Positions and displays the adornment. Returns null if it should be removed.
            </summary>
            <param name="reservedSpace">Reserved space</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManagerDefinition">
            <summary>
            Defines a space reservation manager
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap">
            <summary>
            Maps between byte positions and fractions of the total vertical extent of a <see cref="P:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap.HexView"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap.GetFractionAtBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the fraction of the vertical extent of the view that corresponds to the specified buffer position
            </summary>
            <param name="bufferPosition">Buffer position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap.GetBufferPositionAtFraction(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a fraction of the vertical extent of the view, if it exists
            </summary>
            <param name="fraction">The fraction of the vertical extent of the view</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexVerticalFractionMap.MappingChanged">
            <summary>
            Raised when the mapping is changed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewMargin">
            <summary>
            Hex view margin
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewMargin.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewMargin.Enabled">
            <summary>
            true if the margin is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewMargin.MarginSize">
            <summary>
            Gets the size of the margin (width or height depending on whether it's a vertical or horizontal margin)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewMargin.GetHexViewMargin(System.String)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Hex.Editor.HexViewMargin"/> or null if it's not this margin or a child of this margin
            </summary>
            <param name="marginName">Name of margin</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewMargin.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewMargin.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewState">
            <summary>
            Hex view state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.ViewportTop">
            <summary>
            Gets viewport top
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.ViewportBottom">
            <summary>
            Gets viewport bottom
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.ViewportLeft">
            <summary>
            Gets viewport left
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.ViewportRight">
            <summary>
            Gets viewport right
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.ViewportWidth">
            <summary>
            Gets viewport width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.ViewportHeight">
            <summary>
            Gets viewport height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewState.Version">
            <summary>
            Gets the version
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewState.#ctor(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Constructor
            </summary>
            <param name="view">Hex view</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewState.#ctor(dnSpy.Contracts.Hex.Editor.HexView,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="view">Hex view</param>
            <param name="effectiveViewportWidth">Viewport width</param>
            <param name="effectiveViewportHeight">Viewport height</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewHostOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.DefaultHexViewHostOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewHostOptionsExtensions.IsVerticalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the vertical scroll bar is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewHostOptionsExtensions.IsHorizontalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the horizontal scroll bar is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewHostOptionsExtensions.IsSelectionMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the selection margin is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewHostOptionsExtensions.IsZoomControlEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the zoom control is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewHostOptionsExtensions.IsGlyphMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the the glyph margin is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.ShowOffsetColumn(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the offset column is shown
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.ShowValuesColumn(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the values column is shown
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.ShowAsciiColumn(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the ASCII column is shown
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetStartPosition(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the start position
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetEndPosition(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the end position
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetBasePosition(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the base position
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.UseRelativePositions(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the positions are relative to the base
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetOffsetBitSize(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns size of the offset in bits
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetValuesDisplayFormat(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the values display format
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetOffsetFormat(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the offset format
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.IsValuesLowerCaseHexEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if values are displayed in lower case hex
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.IsOffsetLowerCaseHexEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the offset is displayed in lower case hex
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetBytesPerLine(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the number of bytes that should be displayed per line
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetGroupSizeInBytes(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the number of bytes in a group
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.IsColorizationEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if text should be colorized
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.DoesViewProhibitUserInput(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the hex view prohibits user input
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.IsRefreshScreenOnChangeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if refresh-screen-on-change is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetRefreshScreenOnChangeWaitMilliSeconds(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the number of milliseconds to wait before refreshing the screen after the document gets changed
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.IsRemoveExtraTextLineVerticalPixelsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if extra vertical pixels should be removed from text lines
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.ShowColumnLines(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if column lines should be shown
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetColumnLine0Kind(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns column #0 line kind
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetColumnLine1Kind(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns column #1 line kind
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetColumnGroupLine0Kind(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns column group #0 line kind
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetColumnGroupLine1Kind(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns column group #1 line kind
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.HighlightActiveColumn(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the active column (values or ASCII) should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.HighlightCurrentValue(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the current value under the caret should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetHighlightCurrentValueDelayMilliSeconds(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the delay in milliseconds before highlighting the new value
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.GetEncodingCodePage(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the encoding code page
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.TryGetEncoding(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the encoding
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultHexViewOptionsExtensions.HighlightStructureUnderMouseCursor(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the structure under the mouse cursor should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.DefaultWpfHexViewOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions.IsHighlightCurrentLineEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the current line should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions.IsSimpleGraphicsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if simple graphics option is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions.IsMouseWheelZoomEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if mouse wheel zoom is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions.AppearanceCategory(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the appearance category
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions.ZoomLevel(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the zoom level
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.OptionsExtensionMethods.DefaultWpfHexViewOptionsExtensions.IsForceClearTypeIfNeededEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if clear type should be forced is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexMarginNames">
            <summary>
            Predefined hex margin names
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexSpaceReservationManagerNames">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.PredefinedHexSpaceReservationManagerNames.ToolTip">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Adornments.HexToolTipProvider"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexViewCreationListener">
            <summary>
            Gets notified when hex views get created, see also <see cref="T:dnSpy.Contracts.Hex.Editor.HexEditorFactoryServiceListener"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewCreationListener.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewCreationListener.HexViewCreated(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Called after a hex view with the correct role is created
            </summary>
            <param name="hexView">Hex view</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexViewMargin">
            <summary>
            WPF hex view margin
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewMargin.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewMargin.VisualElement">
            <summary>
            Gets the UI element
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexViewMarginProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewMargin"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewMarginProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewMarginProvider.CreateMargin(dnSpy.Contracts.Hex.Editor.WpfHexViewHost,dnSpy.Contracts.Hex.Editor.WpfHexViewMargin)">
            <summary>
            Creates a margin or returns null
            </summary>
            <param name="wpfHexViewHost">WPF hex view host</param>
            <param name="marginContainer">Margin container</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexCaret">
            <summary>
            Hex caret
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.IsValuesCaretPresent">
            <summary>
            true if the caret in the values column is present
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.IsAsciiCaretPresent">
            <summary>
            true if the caret in the ASCII column is present
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ValuesTop">
            <summary>
            Gets the position of the top edge of the caret in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ValuesBottom">
            <summary>
            Gets the position of the bottom edge of the caret in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ValuesLeft">
            <summary>
            Gets the position of the left edge of the caret in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ValuesRight">
            <summary>
            Gets the position of the right edge of the caret in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ValuesWidth">
            <summary>
            Gets the width of the caret in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ValuesHeight">
            <summary>
            Gets the height of the caret in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.AsciiTop">
            <summary>
            Gets the position of the top edge of the caret in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.AsciiBottom">
            <summary>
            Gets the position of the bottom edge of the caret in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.AsciiLeft">
            <summary>
            Gets the position of the left edge of the caret in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.AsciiRight">
            <summary>
            Gets the position of the right edge of the caret in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.AsciiWidth">
            <summary>
            Gets the width of the caret in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.AsciiHeight">
            <summary>
            Gets the height of the caret in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.IsHidden">
            <summary>
            true if the caret is hidden, false if it's visible
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.ContainingHexViewLine">
            <summary>
            Gets the containing hex view line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.OverwriteMode">
            <summary>
            true if it's overwrite mode
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaret.Position">
            <summary>
            Gets the position
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexCaret.PositionChanged">
            <summary>
            Raised after the position is changed by calling one of the MoveTo methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.EnsureVisible">
            <summary>
            Brings the caret into view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.ToggleActiveColumn">
            <summary>
            Toggles the active column
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="column">Column</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="column">Column</param>
            <param name="position">Position</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexCellPosition)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexCellPosition,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="position">Position</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexColumnPosition)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexColumnPosition,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="position">Position</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.Formatting.HexViewLine)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="hexLine">Line</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.Formatting.HexViewLine,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="hexLine">Line</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.Formatting.HexViewLine,System.Double)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="hexLine">Line</param>
            <param name="xCoordinate">X coordinate</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.Formatting.HexViewLine,System.Double,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)">
            <summary>
            Moves the caret to a new position
            </summary>
            <param name="hexLine">Line</param>
            <param name="xCoordinate">X coordinate</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveToPreviousCaretPosition">
            <summary>
            Moves the caret to the previous position
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveToNextCaretPosition">
            <summary>
            Moves the caret to the next position
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveToPreferredCoordinates">
            <summary>
            Moves the caret to the preferred x and y coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMoveToFlags">
            <summary>
            Flags passed to eg. <see cref="M:dnSpy.Contracts.Hex.Editor.HexCaret.MoveTo(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMoveToFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMoveToFlags.CaptureHorizontalPosition">
            <summary>
            Capture horizontal position
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.HexMoveToFlags.InsertionPosition">
            <summary>
            Get the character position by finding the character closest to the x coordinate
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexCaretPositionChangedEventArgs">
            <summary>
            Caret position changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaretPositionChangedEventArgs.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaretPositionChangedEventArgs.OldPosition">
            <summary>
            Gets the old position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexCaretPositionChangedEventArgs.NewPosition">
            <summary>
            Gets the new position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexCaretPositionChangedEventArgs.#ctor(dnSpy.Contracts.Hex.Editor.HexView,dnSpy.Contracts.Hex.Editor.HexCaretPosition,dnSpy.Contracts.Hex.Editor.HexCaretPosition)">
            <summary>
            Constructor
            </summary>
            <param name="hexView">Hex view</param>
            <param name="oldPosition">Old position</param>
            <param name="newPosition">New position</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService">
            <summary>
            Creates hex views and hosts
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.AllPredefinedRoles">
            <summary>
            Gets all predefined hex view roles
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.DefaultRoles">
            <summary>
            Gets the default hex view roles
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.NoRoles">
            <summary>
            Gets an empty role set
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.HexViewCreated">
            <summary>
            Raised when a new hex view is created
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="buffer">Buffer</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="buffer">Buffer</param>
            <param name="roles">Roles</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="buffer">Buffer</param>
            <param name="roles">Roles</param>
            <param name="parentOptions">Parent options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="buffer">Buffer</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="buffer">Buffer</param>
            <param name="roles">Roles</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions,dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="buffer">Buffer</param>
            <param name="roles">Roles</param>
            <param name="parentOptions">Parent options</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.CreateHost(dnSpy.Contracts.Hex.Editor.WpfHexView,System.Boolean)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewHost"/>
            </summary>
            <param name="wpfHexView">Hex view</param>
            <param name="setFocus">true to set focus</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.CreateTextViewRoleSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a role set
            </summary>
            <param name="roles">Roles</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorFactoryService.CreateTextViewRoleSet(System.String[])">
            <summary>
            Creates a role set
            </summary>
            <param name="roles">Roles</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition">
            <summary>
            Hex editor option definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1">
            <summary>
            Hex editor option definition
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.ValueType">
            <summary>
            Gets the value type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.Name">
            <summary>
            Gets the name of the option
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.DefaultValue">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.Key">
            <summary>
            Gets the option key
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.Default">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.IsValid(System.Object@)">
            <summary>
            Checks whether the new value is valid
            </summary>
            <param name="proposedValue">Proposed value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionDefinition`1.IsValid(`0@)">
            <summary>
            Checks whether the new value is valid
            </summary>
            <param name="proposedValue">Proposed value</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewOptionDefinition`1">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.HexView"/> option definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewOptionDefinition`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Returns true if <paramref name="scope"/> is a <see cref="T:dnSpy.Contracts.Hex.Editor.HexView"/>
            </summary>
            <param name="scope">Scope</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexViewOptionDefinition`1">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/> option definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewOptionDefinition`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Returns true if <paramref name="scope"/> is a <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/>
            </summary>
            <param name="scope">Scope</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexEditorOptionsFactoryService">
            <summary>
            Editor options factory service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionsFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexEditorOptionsFactoryService.GlobalOptions">
            <summary>
            Gets the global options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionsFactoryService.CreateOptions">
            <summary>
            Creates options
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexEditorOptionsFactoryService.GetOptions(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Creates or returns existing options
            </summary>
            <param name="scope">Owner</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexMouseHoverEventArgs">
            <summary>
            Mouse hover event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexMouseHoverEventArgs.View">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexMouseHoverEventArgs.Line">
            <summary>
            Gets the line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexMouseHoverEventArgs.TextPosition">
            <summary>
            Gets the text position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexMouseHoverEventArgs.#ctor(dnSpy.Contracts.Hex.Editor.HexView,dnSpy.Contracts.Hex.HexBufferLine,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="view">Hex view</param>
            <param name="line">Line</param>
            <param name="textPosition">Text position</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexSelection">
            <summary>
            Hex selection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSelection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSelection.Select(dnSpy.Contracts.Hex.HexBufferSpan,System.Boolean,System.Boolean)">
            <summary>
            Selects a span
            </summary>
            <param name="selectionSpan">Span</param>
            <param name="isReversed">true if the anchor point is the end point of <paramref name="selectionSpan"/></param>
            <param name="alignPoints">true to align the span to include all bytes of the cells</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSelection.Select(dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.HexBufferPoint,System.Boolean)">
            <summary>
            Select a span
            </summary>
            <param name="anchorPoint">Anchor point</param>
            <param name="activePoint">Active point</param>
            <param name="alignPoints">true to align the span to include all bytes of the cells</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.SelectedSpans">
            <summary>
            Gets all selected spans
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSelection.GetSelectionOnHexViewLine(dnSpy.Contracts.Hex.Formatting.HexViewLine)">
            <summary>
            Gets the slection on a line
            </summary>
            <param name="line">Line</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.StreamSelectionSpan">
            <summary>
            Gets the selected span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.IsReversed">
            <summary>
            true if the selection is reversed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSelection.Clear">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.IsEmpty">
            <summary>
            true if the selection is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.IsActive">
            <summary>
            true if the selection is active, false if it's inactive
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.ActivationTracksFocus">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Hex.Editor.HexSelection.IsActive"/> gets updated when the hex view gets and loses focus
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexSelection.SelectionChanged">
            <summary>
            Raised when the selection is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.ActivePoint">
            <summary>
            Gets the active point
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.AnchorPoint">
            <summary>
            Gets the anchor point
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.Start">
            <summary>
            Gets the start position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSelection.End">
            <summary>
            Gets the end position
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager">
            <summary>
            Space reservation manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.Agents">
            <summary>
            Gets all agents
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.HasAggregateFocus">
            <summary>
            true if any of the agents' adornments have keyboard focus
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.IsMouseOver">
            <summary>
            true if the mouse is over any of the agents' adornments
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.AgentChanged">
            <summary>
            Raised after an agent has been added or removed from <see cref="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.Agents"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.GotAggregateFocus">
            <summary>
            Raised after it got aggregate focus
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.LostAggregateFocus">
            <summary>
            Raised after it lost aggregate focus
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.AddAgent(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent)">
            <summary>
            Adds an agent
            </summary>
            <param name="agent">Agent to add</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexBufferSpanSelection,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
            <summary>
            Creates a popup agent
            </summary>
            <param name="span">Span and selection flags</param>
            <param name="style">Popup style</param>
            <param name="content">Popup content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
            <summary>
            Creates a popup agent
            </summary>
            <param name="bufferSpan">Buffer span</param>
            <param name="flags">Selection flags</param>
            <param name="style">Popup style</param>
            <param name="content">Popup content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
            <summary>
            Creates a popup agent
            </summary>
            <param name="line">Line</param>
            <param name="span">Line span</param>
            <param name="style">Popup style</param>
            <param name="content">Popup content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
            <summary>
            Creates a popup agent
            </summary>
            <param name="lineSpan">Line span</param>
            <param name="style">Popup style</param>
            <param name="content">Popup content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.RemoveAgent(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent)">
            <summary>
            Removes an agent
            </summary>
            <param name="agent">Agent to remove</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.UpdatePopupAgent(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent,dnSpy.Contracts.Hex.HexBufferSpanSelection,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Updates a popup agent
            </summary>
            <param name="agent">Popup agent created by <see cref="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)"/></param>
            <param name="span">Span and selection flags</param>
            <param name="styles">New popup style</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.UpdatePopupAgent(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Updates a popup agent
            </summary>
            <param name="agent">Popup agent created by <see cref="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)"/></param>
            <param name="bufferSpan">New buffer span</param>
            <param name="flags">New selection flags</param>
            <param name="styles">New popup style</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.UpdatePopupAgent(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent,dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Updates a popup agent
            </summary>
            <param name="agent">Popup agent created by <see cref="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)"/></param>
            <param name="line">Line</param>
            <param name="span">Line span</param>
            <param name="styles">New popup style</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.UpdatePopupAgent(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent,dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
            <summary>
            Updates a popup agent
            </summary>
            <param name="agent">Popup agent created by <see cref="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager.CreatePopupAgent(dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)"/></param>
            <param name="lineSpan">New line span</param>
            <param name="styles">New popup style</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgentChangedEventArgs">
            <summary>
            Space reservation agent changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgentChangedEventArgs.NewAgent">
            <summary>
            Gets the new agent or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgentChangedEventArgs.OldAgent">
            <summary>
            Gets the old agent or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgentChangedEventArgs.#ctor(dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent,dnSpy.Contracts.Hex.Editor.HexSpaceReservationAgent)">
            <summary>
            Constructor
            </summary>
            <param name="oldAgent">Old agent or null</param>
            <param name="newAgent">New agent or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexView">
            <summary>
            Hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.Properties">
            <summary>
            Gets all properties
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.BufferLines">
            <summary>
            Gets the hex buffer lines
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.BufferLinesChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Editor.HexView.BufferLines"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.CommandTarget">
            <summary>
            Gets the command target
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.Caret">
            <summary>
            Gets the caret
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.Selection">
            <summary>
            Gets the selection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.HasAggregateFocus">
            <summary>
            true if the hex view or any of its adornments has focus
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.IsMouseOverViewOrAdornments">
            <summary>
            true if the mouse is over the view or any of its adornments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.LineHeight">
            <summary>
            Gets the nominal line height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.MaxTextRightCoordinate">
            <summary>
            Gets the x coordinate of the maximum right edge of the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.InLayout">
            <summary>
            true if the view is in the process of being laid out
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.IsClosed">
            <summary>
            true if the view has closed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.Options">
            <summary>
            Gets the editor options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.Roles">
            <summary>
            Gets the hex view roles
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ProvisionalTextHighlight">
            <summary>
            Gets the provisional text highlight
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.Buffer">
            <summary>
            Gets the hex buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewportTop">
            <summary>
            Gets viewport top
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewportBottom">
            <summary>
            Gets viewport bottom
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewportLeft">
            <summary>
            Gets/sets viewport left
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewportRight">
            <summary>
            Gets viewport right
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewportWidth">
            <summary>
            Gets viewport width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewportHeight">
            <summary>
            Gets viewport height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.ViewScroller">
            <summary>
            Gets the view scroller
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexView.HexViewLines">
            <summary>
            Gets the hex view lines
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.Closed">
            <summary>
            Raised after the view is closed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.GotAggregateFocus">
            <summary>
            Raised when the view or one of its adornments got focus
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.LostAggregateFocus">
            <summary>
            Raised when the view and all its adornments lost focus
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.LayoutChanged">
            <summary>
            Raised when the layout is changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.ViewportHeightChanged">
            <summary>
            Raised when viewport height is changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.ViewportWidthChanged">
            <summary>
            Raised when viewport width is changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.ViewportLeftChanged">
            <summary>
            Raised when viewport left is changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.HexView.MouseHover">
            <summary>
            Raised when the mouse has hovered long enough over something in the view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.Close">
            <summary>
            Closes the hex view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.DisplayHexLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Displays a line in the view
            </summary>
            <param name="bufferPosition">Position</param>
            <param name="verticalDistance">Distance relative to the top or bottom of the view</param>
            <param name="relativeTo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.DisplayHexLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Displays a line in the view
            </summary>
            <param name="bufferPosition">Position</param>
            <param name="verticalDistance">Distance relative to the top or bottom of the view</param>
            <param name="relativeTo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/></param>
            <param name="viewportWidthOverride">Overrides viewport width</param>
            <param name="viewportHeightOverride">Overrides viewport height</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.DisplayHexLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double},dnSpy.Contracts.Hex.Editor.DisplayHexLineOptions)">
            <summary>
            Displays a line in the view
            </summary>
            <param name="bufferPosition">Position</param>
            <param name="verticalDistance">Distance relative to the top or bottom of the view</param>
            <param name="relativeTo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/></param>
            <param name="viewportWidthOverride">Overrides viewport width</param>
            <param name="viewportHeightOverride">Overrides viewport height</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.GetHexViewLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets a hex view line
            </summary>
            <param name="bufferPosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.QueueSpaceReservationStackRefresh">
            <summary>
            Queues a space reservation stack refresh
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexView.Refresh">
            <summary>
            Refreshes the screen and clears any read caches
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.BufferLinesChangedEventArgs">
            <summary>
            <see cref="P:dnSpy.Contracts.Hex.Editor.HexView.BufferLines"/> changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.BufferLinesChangedEventArgs.OldBufferLines">
            <summary>
            Gets the old instance. This value can be null.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.BufferLinesChangedEventArgs.NewBufferLines">
            <summary>
            Gets the new instance. This instance is never null.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.BufferLinesChangedEventArgs.#ctor(dnSpy.Contracts.Hex.HexBufferLineFormatter,dnSpy.Contracts.Hex.HexBufferLineFormatter)">
            <summary>
            Constructor
            </summary>
            <param name="oldBufferLines">Old instance</param>
            <param name="newBufferLines">New instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.DisplayHexLineOptions">
            <summary>
            Options passed to <see cref="M:dnSpy.Contracts.Hex.Editor.HexView.DisplayHexLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double},dnSpy.Contracts.Hex.Editor.DisplayHexLineOptions)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.DisplayHexLineOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Editor.DisplayHexLineOptions.CanRecreateBufferLines">
            <summary>
            <see cref="P:dnSpy.Contracts.Hex.Editor.HexView.BufferLines"/> can be recreated immediately instead of delayed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewCreatedEventArgs">
            <summary>
            Hex view created event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewCreatedEventArgs.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewCreatedEventArgs.#ctor(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Constructor
            </summary>
            <param name="hexView">Hex view</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/> creator options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions.MenuGuid">
            <summary>
            Guid of context menu or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions.CreateGuidObjects">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Menus.GuidObject"/>s, can be null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions.CopyTo(dnSpy.Contracts.Hex.Editor.HexViewCreatorOptions)">
            <summary>
            Copy this to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs">
            <summary>
            Hex view layout changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.OldViewState">
            <summary>
            Gets the old view state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.NewViewState">
            <summary>
            Gets the new view state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.NewOrReformattedLines">
            <summary>
            Gets all new or reformatted lines
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.TranslatedLines">
            <summary>
            Gets all translated lines
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.VerticalTranslation">
            <summary>
            true if the layout was translated vertically
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.HorizontalTranslation">
            <summary>
            true if the layout was translated horizontally
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.OldVersion">
            <summary>
            Gets the old version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.NewVersion">
            <summary>
            Gets the new version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.NewOrReformattedSpans">
            <summary>
            Gets all new or reformatted spans
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.TranslatedSpans">
            <summary>
            Gets all translated spans
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLayoutChangedEventArgs.#ctor(dnSpy.Contracts.Hex.Editor.HexViewState,dnSpy.Contracts.Hex.Editor.HexViewState,System.Collections.Generic.IList{dnSpy.Contracts.Hex.Formatting.HexViewLine},System.Collections.Generic.IList{dnSpy.Contracts.Hex.Formatting.HexViewLine})">
            <summary>
            Constructor
            </summary>
            <param name="oldState">Old view state</param>
            <param name="newState">New view state</param>
            <param name="newOrReformattedLines">New or reformatted lines</param>
            <param name="translatedLines">Translated lines</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewLineCollection">
            <summary>
            Hex view line collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.IsValid">
            <summary>
            true if it's valid, false if it has been disposed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.Count">
            <summary>
            Gets the number of lines in this collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.Item(System.Int32)">
            <summary>
            Gets a line
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.FormattedSpan">
            <summary>
            Gets the span of all lines in this collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first visible line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last visible line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.GetNormalizedTextBounds(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets normalized text bounds
            </summary>
            <param name="bufferPosition">Position</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.ContainsBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Returns true if this collection contains <paramref name="bufferPosition"/>
            </summary>
            <param name="bufferPosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.IntersectsBufferSpan(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if this collection intersects with <paramref name="bufferSpan"/>
            </summary>
            <param name="bufferSpan">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.GetHexViewLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the line containing <paramref name="bufferPosition"/>
            </summary>
            <param name="bufferPosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.GetHexViewLineContainingYCoordinate(System.Double)">
            <summary>
            Gets the line containing <paramref name="y"/>
            </summary>
            <param name="y">Y position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.GetHexViewLinesIntersectingSpan(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Gets all lines intersecting with <paramref name="bufferSpan"/>
            </summary>
            <param name="bufferSpan">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewLineCollection.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.HexViewScroller">
            <summary>
            View scroller
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.EnsureSpanVisible(dnSpy.Contracts.Hex.HexLineSpan)">
            <summary>
            Scrolls a span into view
            </summary>
            <param name="lineSpan">Line span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.EnsureSpanVisible(dnSpy.Contracts.Hex.HexLineSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Scrolls a span into view
            </summary>
            <param name="lineSpan">Line span</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.EnsureSpanVisible(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Scrolls a span into view
            </summary>
            <param name="span">Span</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.EnsureSpanVisible(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Scrolls a span into view
            </summary>
            <param name="span">Span</param>
            <param name="flags">Flags</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.EnsureSpanVisible(dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Scrolls a line into view
            </summary>
            <param name="line">Line</param>
            <param name="span">Line span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.EnsureSpanVisible(dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Scrolls a line into view
            </summary>
            <param name="line">Line</param>
            <param name="span">Line span</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.ScrollViewportHorizontallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport horizontally
            </summary>
            <param name="distanceToScroll">Distance to scroll</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.ScrollViewportVerticallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport vertically
            </summary>
            <param name="distanceToScroll">Distance to scroll</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.ScrollViewportVerticallyByLine(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport one line up or down
            </summary>
            <param name="direction">Direction</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.ScrollViewportVerticallyByLines(Microsoft.VisualStudio.Text.Editor.ScrollDirection,System.Int32)">
            <summary>
            Scrolls the viewport by lines
            </summary>
            <param name="direction">Direction</param>
            <param name="count">Number of lines to scroll</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.HexViewScroller.ScrollViewportVerticallyByPage(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport one page up or down
            </summary>
            <param name="direction">Direction</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexAdornmentLayers">
            <summary>
            Predefined hex adornment layer names
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles">
            <summary>
            Predefined hex view roles
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexView">
            <summary>
            WPF hex view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexView.VisualElement">
            <summary>
            Gets the UI element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexView.Background">
            <summary>
            Gets/sets the background brush
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.WpfHexView.BackgroundBrushChanged">
            <summary>
            Raised when the background property has changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexView.ZoomLevel">
            <summary>
            Gets/sets the zoom level between 20% to 400%
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.WpfHexView.ZoomLevelChanged">
            <summary>
            Raised when the zoom level has changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexView.FormattedLineSource">
            <summary>
            Gets the formatted line source
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexView.LineTransformSource">
            <summary>
            Gets the line transform source
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexView.WpfHexViewLines">
            <summary>
            Gets the WPF hex view lines
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexView.GetAdornmentLayer(System.String)">
            <summary>
            Gets an adornment layer
            </summary>
            <param name="name">Name of adornment layer</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexView.GetSpaceReservationManager(System.String)">
            <summary>
            Gets the space reservation manager
            </summary>
            <param name="name">Name of space reservation manager</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexView.GetWpfHexViewLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the line that contains the position
            </summary>
            <param name="bufferPosition">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexViewHost">
            <summary>
            WPF hex view host
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.Close">
            <summary>
            Closes this host and its hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.IsClosed">
            <summary>
            true if the host has been closed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.Closed">
            <summary>
            Raised when it is closed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.GetHexViewMargin(System.String)">
            <summary>
            Gets a margin or null if it doesn't exist
            </summary>
            <param name="marginName">Name of margin</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewHost.HostControl">
            <summary>
            Gets the UI element
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection">
            <summary>
            WPF hex view line collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetWpfHexViewLine(System.Int32)">
            <summary>
            Gets a line
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.Item(System.Int32)">
            <summary>
            Gets a line
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.FirstVisibleWpfLine">
            <summary>
            Gets the first visible line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.LastVisibleWpfLine">
            <summary>
            Gets the last visible line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first visible line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last visible line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.WpfHexViewLines">
            <summary>
            Gets all the lines
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetLineMarkerGeometry(dnSpy.Contracts.Hex.Formatting.WpfHexViewLine,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets a line marker geometry
            </summary>
            <param name="line">A line in this collection</param>
            <param name="span">Text span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetLineMarkerGeometry(dnSpy.Contracts.Hex.Formatting.WpfHexViewLine,Microsoft.VisualStudio.Text.Span,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets a line marker geometry
            </summary>
            <param name="line">A line in this collection</param>
            <param name="span">Text span</param>
            <param name="clipToViewport">true to clip the geometry to the viewport</param>
            <param name="padding">Padding to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetTextMarkerGeometry(dnSpy.Contracts.Hex.Formatting.WpfHexViewLine,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets a text marker geometry
            </summary>
            <param name="line">A line in this collection</param>
            <param name="span">Text span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetTextMarkerGeometry(dnSpy.Contracts.Hex.Formatting.WpfHexViewLine,Microsoft.VisualStudio.Text.Span,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets a text marker geometry
            </summary>
            <param name="line">A line in this collection</param>
            <param name="span">Text span</param>
            <param name="clipToViewport">true to clip the geometry to the viewport</param>
            <param name="padding">Padding to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetLineMarkerGeometry(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets a line marker geometry
            </summary>
            <param name="bufferSpan">Span</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetLineMarkerGeometry(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets a line marker geometry
            </summary>
            <param name="bufferSpan">Span</param>
            <param name="flags">Flags</param>
            <param name="clipToViewport">true to clip the geometry to the viewport</param>
            <param name="padding">Padding to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetMarkerGeometry(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets a marker geometry
            </summary>
            <param name="bufferSpan">Span</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetMarkerGeometry(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets a marker geometry
            </summary>
            <param name="bufferSpan">Span</param>
            <param name="flags">Flags</param>
            <param name="clipToViewport">true to clip the geometry to the viewport</param>
            <param name="padding">Padding to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetTextMarkerGeometry(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets a text marker geometry
            </summary>
            <param name="bufferSpan">Span</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetTextMarkerGeometry(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,System.Boolean,System.Windows.Thickness)">
            <summary>
            Gets a text marker geometry
            </summary>
            <param name="bufferSpan">Span</param>
            <param name="flags">Flags</param>
            <param name="clipToViewport">true to clip the geometry to the viewport</param>
            <param name="padding">Padding to use</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Editor.WpfHexViewLineCollection.GetWpfHexViewLineContainingBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the line containing <paramref name="bufferPosition"/>
            </summary>
            <param name="bufferPosition">Buffer position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BooleanData">
            <summary>
            A <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BooleanData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BooleanData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BooleanData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BooleanData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.CharData">
            <summary>
            A <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.CharData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.CharData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.CharData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.CharData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ByteData">
            <summary>
            A <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt16Data">
            <summary>
            A <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt24Data">
            <summary>
            A 24-bit <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt24Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt24Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt24Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt24Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt32Data">
            <summary>
            A <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt64Data">
            <summary>
            A <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.SByteData">
            <summary>
            A <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SByteData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SByteData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SByteData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SByteData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.Int16Data">
            <summary>
            A <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int16Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int16Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int16Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int16Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.Int32Data">
            <summary>
            A <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int32Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int32Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int32Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.Int64Data">
            <summary>
            A <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int64Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int64Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int64Data.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.Int64Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.SingleData">
            <summary>
            A <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SingleData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SingleData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SingleData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SingleData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DoubleData">
            <summary>
            A <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DoubleData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DoubleData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DoubleData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DoubleData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DecimalData">
            <summary>
            A <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DecimalData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DecimalData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DecimalData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DecimalData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.FlagsData">
            <summary>
            Flags data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FlagsData.FlagInfos">
            <summary>
            Gets all flag infos
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.FlagsData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ByteFlagsData">
            <summary>
            A <see cref="T:System.Byte"/> flags field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteFlagsData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteFlagsData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteFlagsData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteFlagsData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt16FlagsData">
            <summary>
            A <see cref="T:System.UInt16"/> flags field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16FlagsData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16FlagsData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16FlagsData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16FlagsData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt32FlagsData">
            <summary>
            A <see cref="T:System.UInt32"/> flags field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32FlagsData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32FlagsData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32FlagsData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32FlagsData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt64FlagsData">
            <summary>
            A <see cref="T:System.UInt64"/> flags field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64FlagsData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64FlagsData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="flagInfos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64FlagsData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64FlagsData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.EnumData">
            <summary>
            Enum data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.EnumData.EnumFieldInfos">
            <summary>
            Gets all enum field infos
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.EnumData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ByteEnumData">
            <summary>
            A <see cref="T:System.Byte"/> enum field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteEnumData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteEnumData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteEnumData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ByteEnumData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt16EnumData">
            <summary>
            A <see cref="T:System.UInt16"/> enum field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16EnumData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16EnumData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16EnumData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt16EnumData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt32EnumData">
            <summary>
            A <see cref="T:System.UInt32"/> enum field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32EnumData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32EnumData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32EnumData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt32EnumData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.UInt64EnumData">
            <summary>
            A <see cref="T:System.UInt64"/> enum field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64EnumData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64EnumData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="enumFieldInfos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64EnumData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.UInt64EnumData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.StringData">
            <summary>
            A <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.StringData.Encoding">
            <summary>
            Gets the encoding
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StringData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StringData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="byteLength">String length in bytes</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StringData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StringData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferData">
            <summary>
            Any data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferData.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.SimpleData">
            <summary>
            Simple data that contains no fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SimpleData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SimpleData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.SimpleData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ComplexData">
            <summary>
            Base class of structures and arrays
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ComplexData.Name">
            <summary>
            Gets the name or an empty string
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ComplexData.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ComplexData.Item(System.Int32)">
            <summary>
            Gets a field
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ComplexData.Item(System.String)">
            <summary>
            Gets a field
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ComplexData.FieldCount">
            <summary>
            Gets the field count
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ComplexData.GetFieldByIndex(System.Int32)">
            <summary>
            Gets a field by index
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ComplexData.GetFieldByPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a field by position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ComplexData.GetFieldByName(System.String)">
            <summary>
            Gets a field
            </summary>
            <param name="name">Name of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ComplexData.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ComplexData.GetSimpleField(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns the first field (recursively) that contains a <see cref="T:dnSpy.Contracts.Hex.Files.SimpleData"/> or null if none was found.
            This field could be contained in a nested <see cref="T:dnSpy.Contracts.Hex.Files.ComplexData"/> instance.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.StructureData">
            <summary>
            A structure
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureData.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.StructureData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.StructureData.FieldCount">
            <summary>
            Gets the field count
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureData.GetFieldByIndex(System.Int32)">
            <summary>
            Gets a field by index
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureData.GetFieldByPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a field by position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureData.GetFieldByName(System.String)">
            <summary>
            Gets a field
            </summary>
            <param name="name">Name of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureData.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ArrayData">
            <summary>
            An array
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateVirtualByteArray(dnSpy.Contracts.Hex.HexBufferSpan,System.String)">
            <summary>
            Creates a virtual <see cref="T:System.Byte"/> array
            </summary>
            <param name="span">Span</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateVirtualUInt16Array(dnSpy.Contracts.Hex.HexBufferSpan,System.String)">
            <summary>
            Creates a virtual <see cref="T:System.UInt16"/> array
            </summary>
            <param name="span">Span</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateVirtualUInt32Array(dnSpy.Contracts.Hex.HexBufferSpan,System.String)">
            <summary>
            Creates a virtual <see cref="T:System.UInt32"/> array
            </summary>
            <param name="span">Span</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateByteArray(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.Byte"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateUInt16Array(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.UInt16"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateUInt32Array(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.UInt32"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateUInt64Array(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.UInt64"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateSByteArray(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.SByte"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateInt16Array(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.Int16"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateInt32Array(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.Int32"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateInt64Array(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:System.Int64"/> array
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="elements">Number of elements</param>
            <param name="name">Array name or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.GetFieldByName(System.String)">
            <summary>
            Gets a field
            </summary>
            <param name="name">Name of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ArrayData`1">
            <summary>
            An array whose elements all have the same size
            </summary>
            <typeparam name="TData">Type of data</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ArrayData`1.Item(System.Int32)">
            <summary>
            Gets the field at <paramref name="index"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ArrayData`1.FieldCount">
            <summary>
            Gets the field count
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData`1.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.ArrayField{`0}[])">
            <summary>
            Constructor, see eg. <see cref="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateByteArray(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)"/>
            </summary>
            <param name="name">Name</param>
            <param name="span">Array span</param>
            <param name="fields">Array elements</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData`1.GetFieldByIndex(System.Int32)">
            <summary>
            Gets a field by index
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayData`1.GetFieldByPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a field by position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.VariableLengthArrayData`1">
            <summary>
            An array whose elements have different sizes
            </summary>
            <typeparam name="TData">Type of data</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.VariableLengthArrayData`1.Item(System.Int32)">
            <summary>
            Gets the field at <paramref name="index"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.VariableLengthArrayData`1.FieldCount">
            <summary>
            Gets the field count
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.VariableLengthArrayData`1.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.ArrayField{`0}[])">
            <summary>
            Constructor, see eg. <see cref="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateByteArray(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)"/>
            </summary>
            <param name="name">Name</param>
            <param name="span">Array span</param>
            <param name="fields">Array elements</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.VariableLengthArrayData`1.GetFieldByIndex(System.Int32)">
            <summary>
            Gets a field by index
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.VariableLengthArrayData`1.GetFieldByPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a field by position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.VirtualArrayData`1">
            <summary>
            An array whose elements all have the same size and where each element is only created when needed.
            The elements aren't cached so calling eg. <see cref="M:dnSpy.Contracts.Hex.Files.VirtualArrayData`1.GetFieldByIndex(System.Int32)"/> multiple times with
            the same input will always return new instances.
            </summary>
            <typeparam name="TData">Type of data</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.VirtualArrayData`1.Item(System.Int32)">
            <summary>
            Gets the field at <paramref name="index"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.VirtualArrayData`1.FieldCount">
            <summary>
            Gets the field count
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.VirtualArrayData`1.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan,System.UInt64,System.Func{dnSpy.Contracts.Hex.HexBufferPoint,`0})">
            <summary>
            Constructor, see eg. <see cref="M:dnSpy.Contracts.Hex.Files.ArrayData.CreateByteArray(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.Int32,System.String)"/>
            </summary>
            <param name="name">Name</param>
            <param name="span">Array span</param>
            <param name="elementLength">Size of each element in bytes</param>
            <param name="createElement">Creates new elements; input parameter is the position of the data</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.VirtualArrayData`1.GetFieldByIndex(System.Int32)">
            <summary>
            Gets a field by index
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.VirtualArrayData`1.GetFieldByPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a field by position
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferField">
            <summary>
            A field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferField.#ctor(dnSpy.Contracts.Hex.Files.BufferData)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data type</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferField.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferField.Data">
            <summary>
            Gets the data type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferField.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the field name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.StructField">
            <summary>
            A field in a structure
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.StructField.Name">
            <summary>
            Gets the field name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructField.#ctor(System.String,dnSpy.Contracts.Hex.Files.BufferData)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="data">Data type</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructField.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the field name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.StructField`1">
            <summary>
            A field in a structure
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.StructField`1.Data">
            <summary>
            Gets the data type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructField`1.#ctor(System.String,`0)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="data">Data type</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ArrayField">
            <summary>
            An array field
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ArrayField.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayField.#ctor(dnSpy.Contracts.Hex.Files.BufferData,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data type</param>
            <param name="index">Array index</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayField.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the field name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ArrayField`1">
            <summary>
            An array field
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ArrayField`1.Data">
            <summary>
            Gets the data type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ArrayField`1.#ctor(`0,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data type</param>
            <param name="index">Array index</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFileHeadersProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/> headers
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFileHeadersProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFileHeadersProvider.GetHeaders``1">
            <summary>
            Returns headers or null. This method is called after <see cref="M:dnSpy.Contracts.Hex.Files.StructureProvider.GetHeaders``1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFileHeadersProviderFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.BufferFileHeadersProvider"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFileHeadersProviderFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFileHeadersProviderFactory.Create(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.BufferFileHeadersProvider"/> or returns null
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFileOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFileOptions.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFileOptions.Span">
            <summary>
            Span of file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFileOptions.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFileOptions.Filename">
            <summary>
            Filename if possible, otherwise any name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFileOptions.Tags">
            <summary>
            Tags, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFileOptions.#ctor(dnSpy.Contracts.Hex.HexSpan,System.String,System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="span">Span of file</param>
            <param name="name">Name</param>
            <param name="filename">Filename if possible, otherwise any name</param>
            <param name="tags">Tags, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFilesEventArgs">
            <summary>
            Buffer files event args base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFilesEventArgs.Files">
            <summary>
            Gets the files
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFilesEventArgs.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile[])">
            <summary>
            Constructor
            </summary>
            <param name="files">Files</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFilesAddedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/>s added event args
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFilesAddedEventArgs.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile[])">
            <summary>
            Constructor
            </summary>
            <param name="files">Added files</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFilesRemovedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/>s removed event args
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFilesRemovedEventArgs.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile[])">
            <summary>
            Constructor
            </summary>
            <param name="files">Removed files</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DnSpy.HexFileImageReferenceProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Images.ImageReference"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.HexFileImageReferenceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.HexFileImageReferenceProvider.GetImage(dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets an image or null
            </summary>
            <param name="structure">Structure</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreator">
            <summary>
            Creates tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreator.ToolTipContentCreator">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreator.Create">
            <summary>
            Creates an object that can be added to a tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreatorFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreator"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreatorFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreatorFactory.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipCreator"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipObjectFactory">
            <summary>
            Creates objects that can be shown in tooltips
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipObjectFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DnSpy.ToolTipObjectFactory.Create(dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContent)">
            <summary>
            Creates an object that can be shown in a tooltip
            </summary>
            <param name="content">Content</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedInt32Data">
            <summary>
            7-bit encoded integer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedInt32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span of data</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedInt32Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedStringData">
            <summary>
            7-bit encoded string (UTF-8)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedStringData.Length">
            <summary>
            Gets the length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedStringData.String">
            <summary>
            Gets the string data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedStringData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Bit7EncodedStringData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="lengthSpan">Span of length</param>
            <param name="stringSpan">Span of string data</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.BlobEncodedUInt32Data">
            <summary>
            Compressed integer stored in #Blob and #US heaps
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobEncodedUInt32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span of data</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobEncodedUInt32Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.CodedToken">
            <summary>
            Contains all possible coded token classes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.TypeDefOrRef">
            <summary>TypeDefOrRef coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.HasConstant">
            <summary>HasConstant coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.HasCustomAttribute">
            <summary>HasCustomAttribute coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.HasFieldMarshal">
            <summary>HasFieldMarshal coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.HasDeclSecurity">
            <summary>HasDeclSecurity coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.MemberRefParent">
            <summary>MemberRefParent coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.HasSemantic">
            <summary>HasSemantic coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.MethodDefOrRef">
            <summary>MethodDefOrRef coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.MemberForwarded">
            <summary>MemberForwarded coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Implementation">
            <summary>Implementation coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.CustomAttributeType">
            <summary>CustomAttributeType coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.ResolutionScope">
            <summary>ResolutionScope coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.TypeOrMethodDef">
            <summary>TypeOrMethodDef coded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.HasCustomDebugInformation">
            <summary>HasCustomDebugInformation coded token</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.TableTypes">
            <summary>
            Returns all types of tables
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Bits">
            <summary>
            Returns the number of bits that is used to encode table type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.#ctor(System.Int32,dnSpy.Contracts.Hex.Files.DotNet.Table[])">
            <summary>
            Constructor
            </summary>
            <param name="bits">Number of bits used to encode token type</param>
            <param name="tableTypes">All table types</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Encode(dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <returns>Coded token</returns>
            <seealso cref="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Encode(dnSpy.Contracts.Hex.Files.DotNet.MDToken,System.UInt32@)"/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Encode(System.UInt32)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <returns>Coded token</returns>
            <seealso cref="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Encode(System.UInt32,System.UInt32@)"/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Encode(dnSpy.Contracts.Hex.Files.DotNet.MDToken,System.UInt32@)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <param name="codedToken">Coded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Encode(System.UInt32,System.UInt32@)">
            <summary>
            Encodes a token
            </summary>
            <param name="token">The token</param>
            <param name="codedToken">Coded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Decode2(System.UInt32)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <returns>Decoded token or 0 on failure</returns>
            <seealso cref="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Decode(System.UInt32,dnSpy.Contracts.Hex.Files.DotNet.MDToken@)"/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Decode(System.UInt32)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <returns>Decoded token or 0 on failure</returns>
            <seealso cref="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Decode(System.UInt32,System.UInt32@)"/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Decode(System.UInt32,dnSpy.Contracts.Hex.Files.DotNet.MDToken@)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <param name="token">Decoded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken.Decode(System.UInt32,System.UInt32@)">
            <summary>
            Decodes a coded token
            </summary>
            <param name="codedToken">The coded token</param>
            <param name="token">Decoded token</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo">
            <summary>
            Info about one column in a MD table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo.Index">
            <summary>
            Gets the column index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo.Offset">
            <summary>
            Returns the column offset within the table row
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo.Size">
            <summary>
            Returns the column size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo.Name">
            <summary>
            Returns the column name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo.ColumnSize">
            <summary>
            Returns the ColumnSize enum value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo.#ctor(System.Int32,System.String,dnSpy.Contracts.Hex.Files.DotNet.ColumnSize,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Column index</param>
            <param name="name">The column name</param>
            <param name="columnSize">Column size</param>
            <param name="offset">Offset of column</param>
            <param name="size">Size of column</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize">
            <summary>
            MD table column size
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Module">
            <summary>RID into Module table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.TypeRef">
            <summary>RID into TypeRef table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.TypeDef">
            <summary>RID into TypeDef table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.FieldPtr">
            <summary>RID into FieldPtr table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Field">
            <summary>RID into Field table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MethodPtr">
            <summary>RID into MethodPtr table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Method">
            <summary>RID into Method table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ParamPtr">
            <summary>RID into ParamPtr table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Param">
            <summary>RID into Param table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.InterfaceImpl">
            <summary>RID into InterfaceImpl table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MemberRef">
            <summary>RID into MemberRef table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Constant">
            <summary>RID into Constant table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.CustomAttribute">
            <summary>RID into CustomAttribute table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.FieldMarshal">
            <summary>RID into FieldMarshal table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.DeclSecurity">
            <summary>RID into DeclSecurity table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ClassLayout">
            <summary>RID into ClassLayout table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.FieldLayout">
            <summary>RID into FieldLayout table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.StandAloneSig">
            <summary>RID into StandAloneSig table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.EventMap">
            <summary>RID into EventMap table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.EventPtr">
            <summary>RID into EventPtr table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Event">
            <summary>RID into Event table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.PropertyMap">
            <summary>RID into PropertyMap table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.PropertyPtr">
            <summary>RID into PropertyPtr table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Property">
            <summary>RID into Property table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MethodSemantics">
            <summary>RID into MethodSemantics table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MethodImpl">
            <summary>RID into MethodImpl table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ModuleRef">
            <summary>RID into ModuleRef table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.TypeSpec">
            <summary>RID into TypeSpec table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ImplMap">
            <summary>RID into ImplMap table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.FieldRVA">
            <summary>RID into FieldRVA table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ENCLog">
            <summary>RID into ENCLog table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ENCMap">
            <summary>RID into ENCMap table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Assembly">
            <summary>RID into Assembly table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.AssemblyProcessor">
            <summary>RID into AssemblyProcessor table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.AssemblyOS">
            <summary>RID into AssemblyOS table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.AssemblyRef">
            <summary>RID into AssemblyRef table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.AssemblyRefProcessor">
            <summary>RID into AssemblyRefProcessor table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.AssemblyRefOS">
            <summary>RID into AssemblyRefOS table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.File">
            <summary>RID into File table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ExportedType">
            <summary>RID into ExportedType table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ManifestResource">
            <summary>RID into ManifestResource table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.NestedClass">
            <summary>RID into NestedClass table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.GenericParam">
            <summary>RID into GenericParam table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MethodSpec">
            <summary>RID into MethodSpec table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.GenericParamConstraint">
            <summary>RID into GenericParamConstraint table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Document">
            <summary>RID into Document table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MethodDebugInformation">
            <summary>RID into MethodDebugInformation table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.LocalScope">
            <summary>RID into LocalScope table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.LocalVariable">
            <summary>RID into LocalVariable table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.LocalConstant">
            <summary>RID into LocalConstant table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ImportScope">
            <summary>RID into ImportScope table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.StateMachineMethod">
            <summary>RID into StateMachineMethod table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.CustomDebugInformation">
            <summary>RID into CustomDebugInformation table</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Byte">
            <summary>8-bit byte</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Int16">
            <summary>16-bit signed int</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.UInt16">
            <summary>16-bit unsigned int</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Int32">
            <summary>32-bit signed int</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.UInt32">
            <summary>32-bit unsigned int</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Strings">
            <summary>Index into #Strings stream</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.GUID">
            <summary>Index into #GUID stream</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Blob">
            <summary>Index into #Blob stream</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.TypeDefOrRef">
            <summary>TypeDefOrRef encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.HasConstant">
            <summary>HasConstant encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.HasCustomAttribute">
            <summary>HasCustomAttribute encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.HasFieldMarshal">
            <summary>HasFieldMarshal encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.HasDeclSecurity">
            <summary>HasDeclSecurity encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MemberRefParent">
            <summary>MemberRefParent encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.HasSemantic">
            <summary>HasSemantic encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MethodDefOrRef">
            <summary>MethodDefOrRef encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.MemberForwarded">
            <summary>MemberForwarded encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.Implementation">
            <summary>Implementation encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.CustomAttributeType">
            <summary>CustomAttributeType encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.ResolutionScope">
            <summary>ResolutionScope encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.TypeOrMethodDef">
            <summary>TypeOrMethodDef encoded token</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ColumnSize.HasCustomDebugInformation">
            <summary>HasCustomDebugInformation encoded token</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data">
            <summary>
            COR20 header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.Cb">
            <summary>IMAGE_COR20_HEADER.cb</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.MajorRuntimeVersion">
            <summary>IMAGE_COR20_HEADER.MajorRuntimeVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.MinorRuntimeVersion">
            <summary>IMAGE_COR20_HEADER.MinorRuntimeVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.MetaData">
            <summary>IMAGE_COR20_HEADER.MetaData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.Flags">
            <summary>IMAGE_COR20_HEADER.Flags</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.EntryPointTokenOrRVA">
            <summary>IMAGE_COR20_HEADER.EntryPointToken / IMAGE_COR20_HEADER.EntryPointRVA</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.Resources">
            <summary>IMAGE_COR20_HEADER.Resources</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.StrongNameSignature">
            <summary>IMAGE_COR20_HEADER.StrongNameSignature</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.CodeManagerTable">
            <summary>IMAGE_COR20_HEADER.CodeManagerTable</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.VTableFixups">
            <summary>IMAGE_COR20_HEADER.VTableFixups</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.ExportAddressTableJumps">
            <summary>IMAGE_COR20_HEADER.ExportAddressTableJumps</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data.ManagedNativeHeader">
            <summary>IMAGE_COR20_HEADER.ManagedNativeHeader</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource">
            <summary>
            .NET embedded resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource.ResourceProvider">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource.Token">
            <summary>
            Gets the token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider,dnSpy.Contracts.Hex.HexBufferSpan,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="resourceProvider">Owner</param>
            <param name="span">Span</param>
            <param name="token">Token</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource.Size">
            <summary>
            Gets the size of the resource
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource.Content">
            <summary>
            Gets the resource content
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders">
            <summary>
            .NET headers, present if the COR20 header exists in a PE file. The .NET metadata could still be null.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.PeHeaders">
            <summary>
            Gets the PE headers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.Cor20">
            <summary>
            Gets the COR20 header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.MetadataHeaders">
            <summary>
            Gets the .NET metadata-only headers or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.StrongNameSignature">
            <summary>
            Gets the strong name signature or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.MethodProvider">
            <summary>
            Gets the method provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeaders.ResourceProvider">
            <summary>
            Gets the .NET resource provider
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap">
            <summary>
            A .NET heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
            <param name="heapKind">Heap kind</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.Span">
            <summary>
            Gets the heap span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.HeapKind">
            <summary>
            Gets the heap kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.Metadata">
            <summary>
            Gets the metadata headers
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.GetStructure(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a structure or null 
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.IsValidOffset(System.UInt32)">
            <summary>
            Checks whether <paramref name="offset"/> is valid. Note that some heaps
            treat <paramref name="offset"/> as an index, eg. <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap"/>.
            </summary>
            <param name="offset">Offset (or index if #GUID heap)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeap.ReadCompressedUInt32(dnSpy.Contracts.Hex.HexPosition@)">
            <summary>
            Reads a compressed <see cref="T:System.UInt32"/> and increments <paramref name="position"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap">
            <summary>
            .NET tables (#~ or #-) heap
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.TablesHeapType">
            <summary>
            Gets the metadata type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.MDTables">
            <summary>
            Gets all metadata table infos
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.HeaderSpan">
            <summary>
            Span of header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.TablesSpan">
            <summary>
            Span of all tables
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.Header">
            <summary>
            Gets the header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.MajorVersion">
            <summary>
            Gets the major version, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.MinorVersion">
            <summary>
            Gets the minor version, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.Flags">
            <summary>
            Gets the flags, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.ValidMask">
            <summary>
            Gets the valid mask, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.SortedMask">
            <summary>
            Gets the sorted mask, this value is cached
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.TablesHeapType)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
            <param name="tablesHeapType">Tables heap type</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.GetRecord(System.UInt32)">
            <summary>
            Gets a record or null if <paramref name="token"/> is invalid
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TablesHeap.GetRecord(dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>
            Gets a record or null if <paramref name="token"/> is invalid
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap">
            <summary>
            .NET #Strings heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.GetStringSpan(System.UInt32)">
            <summary>
            Gets the span of the string, not including the terminating zero byte.
            Returns an empty span if <paramref name="offset"/> is invalid.
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.GetStringSpan(System.UInt32,System.Int32)">
            <summary>
            Gets the span of the string, not including the terminating zero byte.
            Returns an empty span if <paramref name="offset"/> is invalid.
            </summary>
            <param name="offset">Offset</param>
            <param name="maxByteLength">Maximum number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.ReadBytes(System.UInt32)">
            <summary>
            Reads string data which should be a UTF-8 encoded string. The array doesn't include the terminating zero.
            Returns an empty array if <paramref name="offset"/> is invalid
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.ReadBytes(System.UInt32,System.Int32)">
            <summary>
            Reads string data which should be a UTF-8 encoded string. The array doesn't include the terminating zero.
            Returns an empty array if <paramref name="offset"/> is invalid
            </summary>
            <param name="offset">Offset</param>
            <param name="maxByteLength">Maximum number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.Read(System.UInt32)">
            <summary>
            Reads a string. Returns an empty string if <paramref name="offset"/> is invalid
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeap.Read(System.UInt32,System.Int32)">
            <summary>
            Reads a string. Returns an empty string if <paramref name="offset"/> is invalid
            </summary>
            <param name="offset">Offset</param>
            <param name="maxByteLength">Maximum number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.USHeap">
            <summary>
            .NET #US heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.USHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.USHeap.GetStringSpan(System.UInt32)">
            <summary>
            Returns the span of the string data or an empty span if <paramref name="offset"/> is 0 or invalid.
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.USHeap.ReadData(System.UInt32)">
            <summary>
            Reads data at <paramref name="offset"/>. Returns an empty array if <paramref name="offset"/> is invalid.
            The returned data doesn't include the compressed data length at <paramref name="offset"/>.
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.USHeap.Read(System.UInt32)">
            <summary>
            Reads the string at <paramref name="offset"/>. Returns an empty string if
            <paramref name="offset"/> is 0 or invalid.
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap">
            <summary>
            .NET #GUID heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap.IsValidIndex(System.UInt32)">
            <summary>
            Checks whether <paramref name="index"/> is valid. This method is identical to <see cref="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap.IsValidOffset(System.UInt32)"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap.IsValidOffset(System.UInt32)">
            <summary>
            Checks whether <paramref name="index"/> is valid
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap.Read(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Guid"/>. Returns null if <paramref name="index"/> is 0 or invalid
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.BlobHeap">
            <summary>
            .NET #Blob heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeap.GetDataSpan(System.UInt32)">
            <summary>
            Gets the span of data in this heap. The span doesn't include the compressed data length
            at <paramref name="offset"/>. An empty span is returned if <paramref name="offset"/>
            is invalid or 0.
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeap.Read(System.UInt32)">
            <summary>
            Reads data at <paramref name="offset"/>. Returns an empty array if <paramref name="offset"/> is invalid.
            The returned data doesn't include the compressed data length at <paramref name="offset"/>.
            </summary>
            <param name="offset">Offset</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.HotHeap">
            <summary>
            .NET #! heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.HotHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap">
            <summary>
            .NET #Pdb heap
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap.Header">
            <summary>
            Gets the header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap.PdbId">
            <summary>
            Gets the PDB id, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap.EntryPoint">
            <summary>
            Gets the entry point, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap.ReferencedTypeSystemTables">
            <summary>
            Gets a bit mask of all referenced type system tables, this value is cached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap.TypeSystemTableRows">
            <summary>
            Gets the rows, this value is cached
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.PdbHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.UnknownHeap">
            <summary>
            Unknown .NET heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.UnknownHeap.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Heap span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind">
            <summary>
            .NET heap kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.Tables">
            <summary>
            Tables heap (#~ or #-)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.Strings">
            <summary>
            #Strings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.US">
            <summary>
            #US
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.GUID">
            <summary>
            #GUID
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.Blob">
            <summary>
            #Blob
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.Hot">
            <summary>
            #!
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetHeapKind.Pdb">
            <summary>
            #Pdb
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData">
            <summary>
            .NET metadata header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.Signature">
            <summary>STORAGESIGNATURE.lSignature</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.MajorVersion">
            <summary>STORAGESIGNATURE.iMajorVer</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.MinorVersion">
            <summary>STORAGESIGNATURE.iMinorVer</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.ExtraData">
            <summary>STORAGESIGNATURE.iExtraData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.VersionStringCount">
            <summary>STORAGESIGNATURE.iVersionString</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.VersionString">
            <summary>STORAGESIGNATURE.VersionString</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.Flags">
            <summary>STORAGEHEADER.fFlags</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.Pad">
            <summary>STORAGEHEADER.pad</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.StreamCount">
            <summary>STORAGEHEADER.iStreams</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData.StreamHeaders">
            <summary>Streams following STORAGEHEADER.iStreams</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders">
            <summary>
            .NET metadata-only headers, present if the file is a .NET PE file or a .NET metadata only file (eg. portable pdb file)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.#ctor(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="metadataSpan">Metadata span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.MetadataSpan">
            <summary>
            Gets the metadata span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.MetadataHeader">
            <summary>
            Gets the metadata header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.TablesStream">
            <summary>
            Gets the tables stream (#~ or #-) or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.StringsStream">
            <summary>
            Gets the #Strings stream or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.USStream">
            <summary>
            Gets the #US stream or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.GUIDStream">
            <summary>
            Gets the #GUID stream or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.BlobStream">
            <summary>
            Gets the #Blob stream or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.PdbStream">
            <summary>
            Gets the #Pdb stream or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.Streams">
            <summary>
            Gets all heaps
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaders.GetStructure(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a structure at <paramref name="position"/> or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBodyKind">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody"/> kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBodyKind.Invalid">
            <summary>
            Invalid method body (<see cref="T:dnSpy.Contracts.Hex.Files.DotNet.InvalidMethodBody"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBodyKind.Tiny">
            <summary>
            Tiny method body (<see cref="T:dnSpy.Contracts.Hex.Files.DotNet.TinyMethodBody"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBodyKind.Fat">
            <summary>
            Fat method body (<see cref="T:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody">
            <summary>
            .NET method body
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody.Tokens">
            <summary>
            Gets tokens of all methods that reference this method body
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody.MethodProvider">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider,System.String,dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{System.UInt32})">
            <summary>
            Constructor
            </summary>
            <param name="methodProvider">Owner</param>
            <param name="name">Name</param>
            <param name="span">Span</param>
            <param name="tokens">Tokens of all methods that reference this method body</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody.Kind">
            <summary>
            Gets the kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody.Instructions">
            <summary>
            Gets the instruction bytes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.InvalidMethodBody">
            <summary>
            Invalid .NET method body
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.InvalidMethodBody.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider,dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{System.UInt32})">
            <summary>
            Constructor
            </summary>
            <param name="methodProvider">Owner</param>
            <param name="span">Span</param>
            <param name="tokens">Tokens of all methods that reference this method body</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.InvalidMethodBody.Kind">
            <summary>
            Gets the kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TinyMethodBody">
            <summary>
            Tiny .NET method body
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TinyMethodBody.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider,dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{System.UInt32})">
            <summary>
            Constructor
            </summary>
            <param name="methodProvider">Owner</param>
            <param name="span">Span</param>
            <param name="tokens">Tokens of all methods that reference this method body</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TinyMethodBody.Kind">
            <summary>
            Gets the kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TinyMethodBody.Flags_CodeSize">
            <summary>IMAGE_COR_ILMETHOD_TINY.Flags_CodeSize</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody">
            <summary>
            Fat .NET method body
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider,dnSpy.Contracts.Hex.HexBufferSpan,System.Collections.ObjectModel.ReadOnlyCollection{System.UInt32})">
            <summary>
            Constructor
            </summary>
            <param name="methodProvider">Owner</param>
            <param name="span">Span</param>
            <param name="tokens">Tokens of all methods that reference this method body</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.Kind">
            <summary>
            Gets the kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.Flags_Size">
            <summary>IMAGE_COR_ILMETHOD_FAT.Flags / Size</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.MaxStack">
            <summary>IMAGE_COR_ILMETHOD_FAT.MaxStack</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.CodeSize">
            <summary>IMAGE_COR_ILMETHOD_FAT.CodeSize</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.LocalVarSigTok">
            <summary>IMAGE_COR_ILMETHOD_FAT.LocalVarSigTok</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.Padding">
            <summary>
            Padding between <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody.Instructions"/> and <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.EHTable"/>.
            It's null if <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.EHTable"/> isn't present.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatMethodBody.EHTable">
            <summary>
            Gets the exception handler table or null if there's none
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodSection">
            <summary>
            .NET method body section
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodSection.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodSection.IsSmall">
            <summary>
            Returns true if this is a small section
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.SmallSection">
            <summary>
            Small section
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.SmallSection.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallSection.IsSmall">
            <summary>
            Returns true since this is a small section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallSection.Kind">
            <summary>IMAGE_COR_ILMETHOD_SECT_SMALL.Kind</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallSection.DataSize">
            <summary>IMAGE_COR_ILMETHOD_SECT_SMALL.DataSize</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.FatSection">
            <summary>
            Fat section
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.FatSection.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatSection.IsSmall">
            <summary>
            Returns false since this is a fat section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatSection.Kind">
            <summary>IMAGE_COR_ILMETHOD_SECT_FAT.Kind</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatSection.DataSize">
            <summary>IMAGE_COR_ILMETHOD_SECT_FAT.DataSize</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.ExceptionHandlerTable">
            <summary>
            Exception handler table
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.ExceptionHandlerTable.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ExceptionHandlerTable.IsSmall">
            <summary>
            true if it's a small exception handler table
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionHandlerTable">
            <summary>
            Small exception handler table
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionHandlerTable.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionHandlerTable.IsSmall">
            <summary>
            Returns true since this is a small exception handler table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionHandlerTable.SectSmall">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_SMALL.SectSmall</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionHandlerTable.Reserved">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_SMALL.Reserved</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionHandlerTable.Clauses">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_SMALL.Clauses</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionHandlerTable">
            <summary>
            Fat exception handler table
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionHandlerTable.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionHandlerTable.IsSmall">
            <summary>
            Returns false since this is a fat exception handler table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionHandlerTable.SectFat">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_FAT.SectFat</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionHandlerTable.Clauses">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_FAT.Clauses</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.ExceptionClause">
            <summary>
            Exception clause
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.ExceptionClause.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.ExceptionClause.IsSmall">
            <summary>
            true if it's a small exception clause
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause">
            <summary>
            Small exception clause
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.IsSmall">
            <summary>
            Returns true since this is a small exception clause
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.Flags">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_SMALL.Flags</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.TryOffset">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_SMALL.TryOffset</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.TryLength">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_SMALL.TryLength</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.HandlerOffset">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_SMALL.HandlerOffset</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.HandlerLength">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_SMALL.HandlerLength</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.SmallExceptionClause.ClassTokenOrFilterOffset">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_SMALL.ClassToken/FilterOffset</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause">
            <summary>
            Fat exception clause
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.IsSmall">
            <summary>
            Returns false since this is a fat exception clause
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.Flags">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_FAT.Flags</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.TryOffset">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_FAT.TryOffset</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.TryLength">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_FAT.TryLength</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.HandlerOffset">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_FAT.HandlerOffset</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.HandlerLength">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_FAT.HandlerLength</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.FatExceptionClause.ClassTokenOrFilterOffset">
            <summary>IMAGE_COR_ILMETHOD_SECT_EH_CLAUSE_FAT.ClassToken / FilterOffset</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodBody"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider.File">
            <summary>
            Gets the file
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider.IsMethodPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns true if <paramref name="position"/> is probably within a method body
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMethodProvider.GetMethodBody(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a method or null if <paramref name="position"/> isn't within a method body
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData">
            <summary>
            .NET multi-file resource header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.MagicNum">
            <summary>Magic number</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.ResMgrHeaderVersion">
            <summary>Header version</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.HeaderSize">
            <summary>Header size</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.UnknownHeader">
            <summary>Unknown header or null if it's a known header (see <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.ReaderType"/> and <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.ResourceSetType"/>)</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.ReaderType">
            <summary>Reader type or null if unknown header</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.ResourceSetType">
            <summary>ResourceSet type or null if unknown header</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.Version">
            <summary>Version</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.NumResources">
            <summary>NumResources</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.NumTypes">
            <summary>NumTypes</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.TypeNames">
            <summary>TypeNames</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.Alignment8">
            <summary>8-byte alignment</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.NameHashes">
            <summary>Name hashes</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.NamePositions">
            <summary>Name positions</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData.DataSectionOffset">
            <summary>DataSectionOffset</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources">
            <summary>
            Present if the file is a .NET multi-file resource file
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Constructor
            </summary>
            <param name="file">File</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources.File">
            <summary>
            Gets the file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources.DataSectionPosition">
            <summary>
            Position of data section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources.Header">
            <summary>
            Gets the header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources.GetStructure(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a structure at <paramref name="position"/> or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetEmbeddedResource"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Constructor
            </summary>
            <param name="file">File</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider.File">
            <summary>
            Gets the file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider.ResourcesSpan">
            <summary>
            Gets the span of the .NET resources or an empty span if there are no .NET resources
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider.IsResourcePosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns true if <paramref name="position"/> is probably within a resource
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetResourceProvider.GetResource(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a resource or null if <paramref name="position"/> isn't within a resource
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetStorageStream">
            <summary>
            .NET metadata header storage stream
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DotNetStorageStream.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetStorageStream.Offset">
            <summary>STORAGESTREAM.iOffset</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetStorageStream.Size">
            <summary>STORAGESTREAM.iSize</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.DotNetStorageStream.StreamName">
            <summary>STORAGESTREAM.rcName</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.GuidHeapRecordData">
            <summary>
            #GUID heap record data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidHeapRecordData.Heap">
            <summary>
            Gets the heap
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidHeapRecordData.Index">
            <summary>
            Gets the GUID index (1-based)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GuidHeapRecordData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.Files.DotNet.GUIDHeap,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="heap">Owner heap</param>
            <param name="index">Guid index (1-based)</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData">
            <summary>
            #Strings heap record data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData.Heap">
            <summary>
            Gets the owner heap
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData.Tokens">
            <summary>
            Gets tokens of records referencing this string
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData.String">
            <summary>
            Gets the string
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData.Terminator">
            <summary>
            Gets the terminator or null if there's none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapRecordData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan,System.Boolean,dnSpy.Contracts.Hex.Files.DotNet.StringsHeap,System.UInt32[])">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="stringSpan">Span of string, not including the terminating zero</param>
            <param name="hasTerminatingZero">true if there's a terminating zero, false if there's no terminating zero
            or if the string is too long</param>
            <param name="heap">Owner heap</param>
            <param name="tokens">Tokens of records referencing this string</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData">
            <summary>
            #US heap record data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData.Heap">
            <summary>
            Gets the owner heap
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData.Length">
            <summary>
            Gets the length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData.String">
            <summary>
            Gets the string data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData.TerminalByte">
            <summary>
            Gets the terminal byte or null if none exists
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.USHeapRecordData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.Files.DotNet.USHeap)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="lengthSpan">Span of length</param>
            <param name="stringSpan">Span of string data</param>
            <param name="terminalByteSpan">Span of terminal byte (0 or 1 byte)</param>
            <param name="heap">Owner heap</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData">
            <summary>
            #Blob heap record data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData.Heap">
            <summary>
            Gets the owner heap
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData.Tokens">
            <summary>
            Gets the tokens referencing the blob or an empty collection if none (eg. referenced from data in the #Blob)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData.Length">
            <summary>
            Gets the length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapRecordData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.Files.BufferData,System.Collections.ObjectModel.ReadOnlyCollection{System.UInt32},dnSpy.Contracts.Hex.Files.DotNet.BlobHeap)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="span">Span</param>
            <param name="lengthSpan">Span of length</param>
            <param name="data">Data</param>
            <param name="tokens">Tokens referencing this blob or an empty collection</param>
            <param name="heap">Owner heap</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData">
            <summary>
            #Strings heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData.ReadOffset">
            <summary>
            Reads the rid
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData16">
            <summary>
            16-bit #Strings heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData16.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData16.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData16.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData16.ReadOffset">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData32">
            <summary>
            32-bit #Strings heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData32.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData32.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData32.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.StringsHeapData32.ReadOffset">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData">
            <summary>
            #Blob heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData.ReadOffset">
            <summary>
            Reads the rid
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData16">
            <summary>
            16-bit #Blob heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData16.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData16.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData16.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData16.ReadOffset">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData32">
            <summary>
            32-bit #Blob heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData32.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData32.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData32.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.BlobHeapData32.ReadOffset">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData">
            <summary>
            #GUID heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData.ReadIndex">
            <summary>
            Reads the rid
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData16">
            <summary>
            16-bit #GUID heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData16.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData16.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData16.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData16.ReadIndex">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData32">
            <summary>
            32-bit #GUID heap reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData32.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData32.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData32.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GUIDHeapData32.ReadIndex">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags">
            <summary>
            MDStream flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.BigStrings">
            <summary>#Strings stream is big and requires 4 byte offsets</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.BigGUID">
            <summary>#GUID stream is big and requires 4 byte offsets</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.BigBlob">
            <summary>#Blob stream is big and requires 4 byte offsets</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.Padding">
            <summary/>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.DeltaOnly">
            <summary/>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.ExtraData">
            <summary>Extra data follows the row counts</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDStreamFlags.HasDelete">
            <summary>Set if certain tables can contain deleted rows. The name column (if present) is set to "_Deleted"</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MDTable">
            <summary>
            A MD table (eg. Method table)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.Table">
            <summary>
            Gets the table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.Name">
            <summary>
            Gets the name of this table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.Rows">
            <summary>
            Returns total number of rows
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.RowSize">
            <summary>
            Gets the total size in bytes of one row in this table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.Columns">
            <summary>
            Returns all the columns
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.IsEmpty">
            <summary>
            Returns <c>true</c> if there are no valid rows
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDTable.TableInfo">
            <summary>
            Returns info about this table
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDTable.#ctor(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.Files.DotNet.Table,System.UInt32,dnSpy.Contracts.Hex.Files.DotNet.TableInfo)">
            <summary>
            Constructor
            </summary>
            <param name="position">Start position</param>
            <param name="table">The table</param>
            <param name="rows">Number of rows in this table</param>
            <param name="tableInfo">Info about this table</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDTable.IsValidRID(System.UInt32)">
            <summary>
            Checks whether the row <paramref name="rid"/> exists
            </summary>
            <param name="rid">Row ID</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDTable.IsInvalidRID(System.UInt32)">
            <summary>
            Checks whether the row <paramref name="rid"/> does not exist
            </summary>
            <param name="rid">Row ID</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MDToken">
            <summary>
            MetaData token
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDToken.RID_MASK">
            <summary>
            Mask to get the rid from a raw metadata token
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDToken.RID_MAX">
            <summary>
            Max rid value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.MDToken.TABLE_SHIFT">
            <summary>
            Number of bits to right shift a raw metadata token to get the table index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDToken.Table">
            <summary>
            Returns the table type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDToken.Rid">
            <summary>
            Returns the row id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDToken.Raw">
            <summary>
            Returns the raw token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MDToken.IsNull">
            <summary>
            Returns <c>true</c> if it's a <c>null</c> token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="token">Raw token</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="token">Raw token</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.#ctor(dnSpy.Contracts.Hex.Files.DotNet.Table,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table type</param>
            <param name="rid">Row id</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.#ctor(dnSpy.Contracts.Hex.Files.DotNet.Table,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table type</param>
            <param name="rid">Row id</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToRID(System.UInt32)">
            <summary>
            Returns the <c>rid</c> (row ID)
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A <c>rid</c></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToRID(System.Int32)">
            <summary>
            Returns the <c>rid</c> (row ID)
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A <c>rid</c></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToTable(System.UInt32)">
            <summary>
            Returns the <c>table</c>
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A metadata table index</returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToTable(System.Int32)">
            <summary>
            Returns the <c>table</c>
            </summary>
            <param name="token">A raw metadata token</param>
            <returns>A metadata table index</returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToInt32">
            <summary>
            Gets the token as a raw 32-bit signed integer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToUInt32">
            <summary>
            Gets the token as a raw 32-bit unsigned integer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.op_Equality(dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.op_Inequality(dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.op_LessThan(dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.op_GreaterThan(dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.op_LessThanOrEqual(dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.op_GreaterThanOrEqual(dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <summary>Overloaded operator</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.CompareTo(dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.Equals(dnSpy.Contracts.Hex.Files.DotNet.MDToken)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MDToken.ToString">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo">
            <summary>
            Multi file resource element info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo.Name">
            <summary>
            Gets the resource name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo.TypeCode">
            <summary>
            Gets the type code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo.UserTypeName">
            <summary>
            Gets the user type name if <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo.TypeCode"/> is &gt;= <see cref="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UserTypes"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo.#ctor(System.String,dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of resource</param>
            <param name="typeCode">Type code</param>
            <param name="userTypeName">User type or null if it's not a <see cref="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UserTypes"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceDataHeaderData">
            <summary>
            Multi-file resource data header base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceDataHeaderData.ResourceProvider">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceDataHeaderData.ResourceInfo">
            <summary>
            Gets resource info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceDataHeaderData.TypeCode">
            <summary>Type code</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceDataHeaderData.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources,dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="resourceProvider">Owner</param>
            <param name="resourceInfo">Resource info</param>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceSimplDataHeaderData">
            <summary>
            Multi-file resource data header (everything that's not a string, byte array, stream)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceSimplDataHeaderData.TypeCode">
            <summary>Type code</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceSimplDataHeaderData.Content">
            <summary>Content</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceSimplDataHeaderData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceSimplDataHeaderData.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources,dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="resourceProvider">Owner</param>
            <param name="resourceInfo">Resource info</param>
            <param name="span">Span</param>
            <param name="dataPosition">Position of data which immediately follows the 7-bit encoded type code</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceStringDataHeaderData">
            <summary>
            Multi-file resource data header (strings)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceStringDataHeaderData.TypeCode">
            <summary>Type code</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceStringDataHeaderData.Content">
            <summary>Content</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceStringDataHeaderData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceStringDataHeaderData.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources,dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="resourceProvider">Owner</param>
            <param name="resourceInfo">Resource info</param>
            <param name="span">Span</param>
            <param name="lengthSpan">Span of 7-bit encoded string length</param>
            <param name="stringSpan">Span of string data (UTF-8)</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceArrayDataHeaderData">
            <summary>
            Multi-file resource data header (byte arrays and streams)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceArrayDataHeaderData.TypeCode">
            <summary>Type code</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceArrayDataHeaderData.ContentLength">
            <summary>Content length</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceArrayDataHeaderData.Content">
            <summary>Content</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceArrayDataHeaderData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceArrayDataHeaderData.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources,dnSpy.Contracts.Hex.Files.DotNet.MultiResourceInfo,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="resourceProvider">Owner</param>
            <param name="resourceInfo">Resource info</param>
            <param name="span">Span</param>
            <param name="lengthPosition">Position of 32-bit content length which immediately follows the 7-bit encoded type code</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceUnicodeNameAndOffsetData">
            <summary>
            Multi-file .NET resource name and data offset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceUnicodeNameAndOffsetData.ResourceProvider">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceUnicodeNameAndOffsetData.ResourceName">
            <summary>Gets the resource name</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceUnicodeNameAndOffsetData.DataOffset">
            <summary>Gets the data offset</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceUnicodeNameAndOffsetData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.MultiResourceUnicodeNameAndOffsetData.#ctor(dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResources,dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="resourceProvider">Owner</param>
            <param name="buffer">Buffer</param>
            <param name="lengthSpan">Span of 7-bit encoded length</param>
            <param name="stringSpan">Span of string data</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.PdbStreamHeaderData">
            <summary>
            #Pdb heap header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.PdbStreamHeaderData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbStreamHeaderData.PdbId">
            <summary>PDB id</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbStreamHeaderData.EntryPoint">
            <summary>EntryPoint</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbStreamHeaderData.ReferencedTypeSystemTables">
            <summary>ReferencedTypeSystemTables</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.PdbStreamHeaderData.TypeSystemTableRows">
            <summary>TypeSystemTableRows</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.PredefinedDotNetDataIds">
            <summary>
            Predefined .NET <see cref="T:dnSpy.Contracts.Hex.Files.BufferData"/> ids
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.PredefinedDotNetDataIds.Cor20">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetCor20Data"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.PredefinedDotNetDataIds.MetadataHeader">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMetadataHeaderData"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.PredefinedDotNetDataIds.StrongNameSignature">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.VirtualArrayData`1"/> of bytes (<see cref="T:dnSpy.Contracts.Hex.Files.ByteData"/>)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.PredefinedDotNetDataIds.MultiFileResource">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.DotNet.DotNetMultiFileResourceHeaderData"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode">
            <summary>
            Type of resource
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Null">
            <summary>
            null
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.String">
            <summary>
            <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Boolean">
            <summary>
            <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Char">
            <summary>
            <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Byte">
            <summary>
            <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.SByte">
            <summary>
            <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Int16">
            <summary>
            <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UInt16">
            <summary>
            <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Int32">
            <summary>
            <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UInt32">
            <summary>
            <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Int64">
            <summary>
            <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UInt64">
            <summary>
            <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Single">
            <summary>
            <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Double">
            <summary>
            <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Decimal">
            <summary>
            <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.DateTime">
            <summary>
            <see cref="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.DateTime"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.TimeSpan">
            <summary>
            <see cref="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.TimeSpan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.ByteArray">
            <summary>
            <see cref="T:System.Byte"/> array
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Stream">
            <summary>
            <see cref="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.Stream"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UserTypes">
            <summary>
            Start of user types
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCodeData">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode"/> data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCodeData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCodeData.Create(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCodeData"/>
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.KnownResourceTypeCodeData">
            <summary>
            Known <see cref="T:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode"/> data (not a user type)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.KnownResourceTypeCodeData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.KnownResourceTypeCodeData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.UserTypeResourceTypeCodeData">
            <summary>
            <see cref="F:dnSpy.Contracts.Hex.Files.DotNet.ResourceTypeCode.UserTypes"/> data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.UserTypeResourceTypeCodeData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.UserTypeResourceTypeCodeData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.DateTimeData">
            <summary>
            A <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DateTimeData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DateTimeData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DateTimeData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.DateTimeData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TimeSpanData">
            <summary>
            A <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TimeSpanData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TimeSpanData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TimeSpanData.ReadValue">
            <summary>
            Reads the value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TimeSpanData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.PortablePdbIdData">
            <summary>
            Portable PDB Id (20 bytes)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.PortablePdbIdData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.PortablePdbIdData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.PortablePdbIdData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.GuidData">
            <summary>
            A <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.A">
            <summary>Guid.A</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.B">
            <summary>Guid.B</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.C">
            <summary>Guid.C</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.D">
            <summary>Guid.D</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.E">
            <summary>Guid.E</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.F">
            <summary>Guid.F</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.G">
            <summary>Guid.G</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.H">
            <summary>Guid.H</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.I">
            <summary>Guid.I</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.J">
            <summary>Guid.J</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.GuidData.K">
            <summary>Guid.K</summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GuidData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.GuidData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.Table">
            <summary>
            The metadata tables
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Module">
            <summary>Module table (00h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.TypeRef">
            <summary>TypeRef table (01h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.TypeDef">
            <summary>TypeDef table (02h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.FieldPtr">
            <summary>FieldPtr table (03h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Field">
            <summary>Field table (04h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.MethodPtr">
            <summary>MethodPtr table (05h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Method">
            <summary>Method table (06h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ParamPtr">
            <summary>ParamPtr table (07h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Param">
            <summary>Param table (08h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.InterfaceImpl">
            <summary>InterfaceImpl table (09h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.MemberRef">
            <summary>MemberRef table (0Ah)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Constant">
            <summary>Constant table (0Bh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.CustomAttribute">
            <summary>CustomAttribute table (0Ch)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.FieldMarshal">
            <summary>FieldMarshal table (0Dh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.DeclSecurity">
            <summary>DeclSecurity table (0Eh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ClassLayout">
            <summary>ClassLayout table (0Fh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.FieldLayout">
            <summary>FieldLayout table (10h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.StandAloneSig">
            <summary>StandAloneSig table (11h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.EventMap">
            <summary>EventMap table (12h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.EventPtr">
            <summary>EventPtr table (13h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Event">
            <summary>Event table (14h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.PropertyMap">
            <summary>PropertyMap table (15h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.PropertyPtr">
            <summary>PropertyPtr table (16h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Property">
            <summary>Property table (17h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.MethodSemantics">
            <summary>MethodSemantics table (18h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.MethodImpl">
            <summary>MethodImpl table (19h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ModuleRef">
            <summary>ModuleRef table (1Ah)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.TypeSpec">
            <summary>TypeSpec table (1Bh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ImplMap">
            <summary>ImplMap table (1Ch)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.FieldRVA">
            <summary>FieldRVA table (1Dh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ENCLog">
            <summary>ENCLog table (1Eh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ENCMap">
            <summary>ENCMap table (1Fh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Assembly">
            <summary>Assembly table (20h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.AssemblyProcessor">
            <summary>AssemblyProcessor table (21h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.AssemblyOS">
            <summary>AssemblyOS table (22h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.AssemblyRef">
            <summary>AssemblyRef table (23h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.AssemblyRefProcessor">
            <summary>AssemblyRefProcessor table (24h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.AssemblyRefOS">
            <summary>AssemblyRefOS table (25h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.File">
            <summary>File table (26h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ExportedType">
            <summary>ExportedType table (27h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ManifestResource">
            <summary>ManifestResource table (28h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.NestedClass">
            <summary>NestedClass table (29h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.GenericParam">
            <summary>GenericParam table (2Ah)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.MethodSpec">
            <summary>MethodSpec table (2Bh)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.GenericParamConstraint">
            <summary>GenericParamConstraint table (2Ch)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.Document">
            <summary>(Portable PDB) Document table (30h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.MethodDebugInformation">
            <summary>(Portable PDB) MethodDebugInformation table (31h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.LocalScope">
            <summary>(Portable PDB) LocalScope table (32h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.LocalVariable">
            <summary>(Portable PDB) LocalVariable table (33h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.LocalConstant">
            <summary>(Portable PDB) LocalConstant table (34h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.ImportScope">
            <summary>(Portable PDB) ImportScope table (35h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.StateMachineMethod">
            <summary>(Portable PDB) StateMachineMethod table (36h)</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.Table.CustomDebugInformation">
            <summary>(Portable PDB) CustomDebugInformation table (37h)</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TableInfo">
            <summary>
            Info about one MD table
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableInfo.Table">
            <summary>
            Returns the table type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableInfo.RowSize">
            <summary>
            Returns the total size of a row in bytes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableInfo.Columns">
            <summary>
            Returns all the columns
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableInfo.Name">
            <summary>
            Returns the name of the table
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TableInfo.#ctor(dnSpy.Contracts.Hex.Files.DotNet.Table,System.String,dnSpy.Contracts.Hex.Files.DotNet.ColumnInfo[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="table">Table type</param>
            <param name="name">Table name</param>
            <param name="columns">All columns</param>
            <param name="rowSize">Row size</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData">
            <summary>
            .NET table record
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData.Token">
            <summary>
            Gets the token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData.TablesHeap">
            <summary>
            Gets the owner heap
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData.#ctor(System.String,dnSpy.Contracts.Hex.Files.DotNet.MDToken,dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.BufferField[],dnSpy.Contracts.Hex.Files.DotNet.TablesHeap)">
            <summary>
            Constructor
            </summary>
            <param name="tableName">Name of table</param>
            <param name="token">Token</param>
            <param name="span">Span</param>
            <param name="fields">Fields</param>
            <param name="tablesHeap">Owner heap</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData.WriteName(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the name
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TableRecordData.ReadColumn(System.Int32)">
            <summary>
            Reads a column, treating the column value as an unsigned integer
            </summary>
            <param name="index">Index of column</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData">
            <summary>
            .NET tables stream header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.Reserved">
            <summary>m_ulReserved</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.MajorVersion">
            <summary>m_major</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.MinorVersion">
            <summary>m_minor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.Flags">
            <summary>m_heaps</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.Log2Rid">
            <summary>m_rid</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.ValidMask">
            <summary>m_maskvalid</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.SortedMask">
            <summary>m_sorted</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.ExtraData">
            <summary>Extra data or null if there was no extra data</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.HasExtraData">
            <summary>true if <see cref="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.ExtraData"/> field exists in header and isn't null</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.DotNet.TablesHeaderData.Rows">
            <summary>Rows</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TablesHeapType">
            <summary>
            Metadata tables type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.TablesHeapType.Compressed">
            <summary>
            Compressed (#~)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.DotNet.TablesHeapType.ENC">
            <summary>
            Edit n' Continue (#-)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.TokenData">
            <summary>
            .NET metadata token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TokenData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TokenData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TokenData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.TokenData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.CodedTokenData">
            <summary>
            Coded .NET metadata token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedTokenData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.CodedToken)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="codedToken">Coded token info</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedTokenData.ReadTokenValue">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedTokenData.WriteValueError(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes an error
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedTokenData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedTokenData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.CodedToken16Data">
            <summary>
            16-bit coded .NET metadata token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken16Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.CodedToken)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="codedToken">Coded token info</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken16Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.Files.DotNet.CodedToken)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="codedToken">Coded token info</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken16Data.ReadTokenValue">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken16Data.WriteValueError(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes an error
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.CodedToken32Data">
            <summary>
            32-bit coded .NET metadata token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.CodedToken)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="codedToken">Coded token info</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken32Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.Files.DotNet.CodedToken)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="codedToken">Coded token info</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken32Data.ReadTokenValue">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.CodedToken32Data.WriteValueError(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes an error
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.RidData">
            <summary>
            .NET table rid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.RidData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.Table)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="table">Table</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.RidData.ReadRidValue">
            <summary>
            Reads the rid
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.RidData.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.RidData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.Rid16Data">
            <summary>
            16-bit .NET table rid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Rid16Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.Table)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="table">Table</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Rid16Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.Files.DotNet.Table)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="table">Table</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Rid16Data.ReadRidValue">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.DotNet.Rid32Data">
            <summary>
            32-bit .NET table rid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Rid32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.DotNet.Table)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
            <param name="table">Table</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Rid32Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.Files.DotNet.Table)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
            <param name="table">Table</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.DotNet.Rid32Data.ReadRidValue">
            <summary>
            Reads the token value
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFieldFormatter">
            <summary>
            Formats fields and values
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteEquals">
            <summary>
            Writes an equals sign and optional spaces
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteArray(System.String)">
            <summary>
            Writes an array name
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteStructure(System.String)">
            <summary>
            Writes a structure name
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteField(System.String)">
            <summary>
            Writes a field name
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteArrayField(System.UInt32)">
            <summary>
            Writes an array field
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteField(dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Writes the field at <paramref name="position"/>
            </summary>
            <param name="structure">Owner structure</param>
            <param name="position">Position of field within <paramref name="structure"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteValue(dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Writes the field value
            </summary>
            <param name="structure">Owner structure</param>
            <param name="position">Position of field within <paramref name="structure"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteFieldAndValue(dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Writes the field and value
            </summary>
            <param name="structure">Owner structure</param>
            <param name="position">Position of field within <paramref name="structure"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteToken(System.UInt32)">
            <summary>
            Writes a .NET metadata token
            </summary>
            <param name="token">Token</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteChar(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteByte(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteUInt24(System.UInt32)">
            <summary>
            Writes a 24-bit <see cref="T:System.UInt32"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteUInt64(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteSByte(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteInt16(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteInt32(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteInt64(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteSingle(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteDouble(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteDecimal(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteString(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteFlags(System.UInt64,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.FlagInfo})">
            <summary>
            Writes flags
            </summary>
            <param name="value">Value</param>
            <param name="infos">Flag infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteEnum(System.UInt64,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Hex.Files.EnumFieldInfo})">
            <summary>
            Writes an enum value
            </summary>
            <param name="value">Value</param>
            <param name="infos">Enum field infos</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteFilename(System.String)">
            <summary>
            Writes a filename which could contain path separators
            </summary>
            <param name="filename">Filename with or without path separators</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatter.WriteUnknownValue">
            <summary>
            Writes an unknown value, eg. "???"
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFieldFormatterFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.HexFieldFormatter"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatterFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatterFactory.Create(dnSpy.Contracts.Hex.Text.HexTextWriter)">
            <summary>
            Creates a formatter
            </summary>
            <param name="writer">Text writer</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFieldFormatterFactory.Create(dnSpy.Contracts.Hex.Text.HexTextWriter,dnSpy.Contracts.Hex.Files.HexFieldFormatterOptions,dnSpy.Contracts.Hex.Files.HexNumberOptions,dnSpy.Contracts.Hex.Files.HexNumberOptions)">
            <summary>
            Creates a formatter
            </summary>
            <param name="writer">Text writer</param>
            <param name="options">Options</param>
            <param name="arrayIndexOptions">Array index options</param>
            <param name="valueNumberOptions">Value number options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFieldFormatterOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.HexFieldFormatter"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexFieldFormatterOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexFieldFormatterOptions.DontPrintDecimalValueInParens">
            <summary>
            Don't show the decimal value in parentheses
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexFieldFormatterOptions.DontPrintFlagValueInParens">
            <summary>
            Don't show the value of the flag in parentheses
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexFieldFormatterOptions.DontPrintEnumValueInParens">
            <summary>
            Don't show the value of the enum in parentheses
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider">
            <summary>
            Provides tooltips and references
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider.GetSubStructureIndexes(dnSpy.Contracts.Hex.Files.HexBufferFile,dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets indexes of sub structures or null. The returned array must be sorted. If the array
            is empty, every field is a sub structure.
            </summary>
            <param name="file">File</param>
            <param name="structure">Structure</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider.GetToolTip(dnSpy.Contracts.Hex.Files.HexBufferFile,dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a tooltip or null
            </summary>
            <param name="file">File</param>
            <param name="structure">Structure</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider.GetReference(dnSpy.Contracts.Hex.Files.HexBufferFile,dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a reference or null
            </summary>
            <param name="file">File</param>
            <param name="structure">Structure</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile,dnSpy.Contracts.Hex.Files.ComplexData,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <param name="structure">Structure</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexIndexes">
            <summary>
            Indexes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexIndexes.Start">
            <summary>
            Gets the start index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexIndexes.End">
            <summary>
            Gets the end index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexIndexes.IsEmpty">
            <summary>
            true if it's empty
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexIndexes.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start index</param>
            <param name="length">Length</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider"/> instances. Export an instance with a
            <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> and an optional <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>.
            See <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedHexFileStructureInfoProviderFactoryNames"/>/
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory.Create(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProvider"/> or returns null
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService">
            <summary>
            Provides tooltips and references
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService.GetSubStructureIndexes(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets indexes of sub structures or null. The returned array must be sorted. If the array
            is empty, every field is a sub structure.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService.GetToolTip(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a tooltip or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService.GetReference(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a reference or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService.GetFieldReferenceSpan(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoServiceFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoServiceFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexFileStructureInfoServiceFactory.Create(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoService"/> or returns an existing one
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexNumberOptions">
            <summary>
            Formatted number options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.HexCSharp">
            <summary>
            C# hex numbers (0x56789ABC)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.HexVisualBasic">
            <summary>
            Visual Basic hex numbers (&amp;H56789ABC)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.HexAssembly">
            <summary>
            Assembly language hex numbers (56789ABCh)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.Hex">
            <summary>
            Hex numbers (56789ABC)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.Decimal">
            <summary>
            Decimal numbers
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.NumberBaseMask">
            <summary>
            Number base mask
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.LowerCaseHex">
            <summary>
            Lower case hex
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.HexNumberOptions.MinimumDigits">
            <summary>
            Use as few digits as possible
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.IBufferFileHeaders">
            <summary>
            Buffer file headers iface
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeFileLayoutProvider">
            <summary>
            Detects whether a PE file was loaded by the OS PE loader. Export an instance with
            a <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> and an optional <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeFileLayoutProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeFileLayoutProvider.GetLayout(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Gets the PE file layout
            </summary>
            <param name="file">File. This can be a nested file.</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeFileLayout">
            <summary>
            PE file layout
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PeFileLayout.Unknown">
            <summary>
            Unknown layout
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PeFileLayout.File">
            <summary>
            File layout
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PeFileLayout.Memory">
            <summary>
            Memory layout, the OS loader has loaded the file into memory
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeHeaders">
            <summary>
            PE headers
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeHeaders.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeHeaders.DosHeader">
            <summary>
            Gets the DOS header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeHeaders.FileHeader">
            <summary>
            Gets the file header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeHeaders.OptionalHeader">
            <summary>
            Gets the optional header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeHeaders.Sections">
            <summary>
            Gets the sections
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeHeaders.IsFileLayout">
            <summary>
            true if file layout, false if memory layout
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeHeaders.RvaToBufferPosition(System.UInt32)">
            <summary>
            Converts <paramref name="rva"/> to a buffer position. This method uses data
            from cached section headers.
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeHeaders.BufferPositionToRva(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Converts a buffer position to an RVA. If the input is invalid, 0 is returned.
            This method uses data from cached section headers.
            </summary>
            <param name="position">Buffer position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeHeaders.BufferPositionToFilePosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Converts a buffer position to a file position in the PE file. If the input is invalid, 0 is returned.
            This method uses data from cached section headers.
            </summary>
            <param name="position">Buffer position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeHeaders.FilePositionToBufferPosition(System.UInt64)">
            <summary>
            Converts a file position in the PE file to a buffer position. If the input is invalid, 0 is returned.
            This method uses data from cached section headers.
            </summary>
            <param name="position">File position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.UnixTime32Data">
            <summary>
            32-bit Unix (epoch) time
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.UnixTime32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.UnixTime32Data.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.UnixTime32Data.ReadDateTime">
            <summary>
            Reads the value as a <see cref="T:System.DateTime"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.UnixTime32Data.WriteValue(dnSpy.Contracts.Hex.Files.HexFieldFormatter)">
            <summary>
            Writes the value
            </summary>
            <param name="formatter">Formatter</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.RvaData">
            <summary>
            RVA data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.RvaData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.RvaData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.RvaData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.FileOffsetData">
            <summary>
            32-bit file offset
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.FileOffsetData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Data span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.FileOffsetData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.FileOffsetData.GetFieldReferenceSpan(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Returns the span the field value references or null. The span can be empty.
            </summary>
            <param name="file">File</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.DataDirectoryData">
            <summary>
            Data directory
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.DataDirectoryData.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.DataDirectoryData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.DataDirectoryData.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.DataDirectoryData.VirtualAddress">
            <summary>IMAGE_DATA_DIRECTORY.VirtualAddress</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.DataDirectoryData.Size">
            <summary>IMAGE_DATA_DIRECTORY.Size</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData">
            <summary>
            DOS header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Magic">
            <summary>IMAGE_DOS_HEADER.e_magic</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Cblp">
            <summary>IMAGE_DOS_HEADER.e_cblp</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Cp">
            <summary>IMAGE_DOS_HEADER.e_cp</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Crlc">
            <summary>IMAGE_DOS_HEADER.e_crlc</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Cparhdr">
            <summary>IMAGE_DOS_HEADER.e_cparhdr</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Minalloc">
            <summary>IMAGE_DOS_HEADER.e_minalloc</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Maxalloc">
            <summary>IMAGE_DOS_HEADER.e_maxalloc</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Ss">
            <summary>IMAGE_DOS_HEADER.e_ss</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Sp">
            <summary>IMAGE_DOS_HEADER.e_sp</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Csum">
            <summary>IMAGE_DOS_HEADER.e_csum</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Ip">
            <summary>IMAGE_DOS_HEADER.e_ip</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Cs">
            <summary>IMAGE_DOS_HEADER.e_cs</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Lfarlc">
            <summary>IMAGE_DOS_HEADER.e_lfarlc</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Ovno">
            <summary>IMAGE_DOS_HEADER.e_ovno</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Res">
            <summary>IMAGE_DOS_HEADER.e_res[4]</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Oemid">
            <summary>IMAGE_DOS_HEADER.e_oemid</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Oeminfo">
            <summary>IMAGE_DOS_HEADER.e_oeminfo</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Res2">
            <summary>IMAGE_DOS_HEADER.e_res2[10]</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData.Lfanew">
            <summary>IMAGE_DOS_HEADER.e_lfanew</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData">
            <summary>
            File header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.Machine">
            <summary>IMAGE_FILE_HEADER.Machine</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.NumberOfSections">
            <summary>IMAGE_FILE_HEADER.NumberOfSections</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.TimeDateStamp">
            <summary>IMAGE_FILE_HEADER.TimeDateStamp</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.PointerToSymbolTable">
            <summary>IMAGE_FILE_HEADER.PointerToSymbolTable</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.NumberOfSymbols">
            <summary>IMAGE_FILE_HEADER.NumberOfSymbols</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.SizeOfOptionalHeader">
            <summary>IMAGE_FILE_HEADER.SizeOfOptionalHeader</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData.Characteristics">
            <summary>IMAGE_FILE_HEADER.Characteristics</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData">
            <summary>
            Optional header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.#ctor(System.String,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="name">Structure name</param>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.Is32Bit">
            <summary>
            true if it's a <see cref="T:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data"/>, false if it's a <see cref="T:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.Magic">
            <summary>IMAGE_OPTIONAL_HEADER.Magic</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MajorLinkerVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MajorLinkerVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MinorLinkerVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MinorLinkerVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.SizeOfCode">
            <summary>IMAGE_OPTIONAL_HEADER.SizeOfCode</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.SizeOfInitializedData">
            <summary>IMAGE_OPTIONAL_HEADER.SizeOfInitializedData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.SizeOfUninitializedData">
            <summary>IMAGE_OPTIONAL_HEADER.SizeOfUninitializedData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.AddressOfEntryPoint">
            <summary>IMAGE_OPTIONAL_HEADER.AddressOfEntryPoint</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.BaseOfCode">
            <summary>IMAGE_OPTIONAL_HEADER.BaseOfCode</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.SectionAlignment">
            <summary>IMAGE_OPTIONAL_HEADER.SectionAlignment</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.FileAlignment">
            <summary>IMAGE_OPTIONAL_HEADER.FileAlignment</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MajorOperatingSystemVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MajorOperatingSystemVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MinorOperatingSystemVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MinorOperatingSystemVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MajorImageVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MajorImageVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MinorImageVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MinorImageVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MajorSubsystemVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MajorSubsystemVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.MinorSubsystemVersion">
            <summary>IMAGE_OPTIONAL_HEADER.MinorSubsystemVersion</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.Win32VersionValue">
            <summary>IMAGE_OPTIONAL_HEADER.Win32VersionValue</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.SizeOfImage">
            <summary>IMAGE_OPTIONAL_HEADER.SizeOfImage</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.SizeOfHeaders">
            <summary>IMAGE_OPTIONAL_HEADER.SizeOfHeaders</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.CheckSum">
            <summary>IMAGE_OPTIONAL_HEADER.CheckSum</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.Subsystem">
            <summary>IMAGE_OPTIONAL_HEADER.Subsystem</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.DllCharacteristics">
            <summary>IMAGE_OPTIONAL_HEADER.DllCharacteristics</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.LoaderFlags">
            <summary>IMAGE_OPTIONAL_HEADER.LoaderFlags</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.NumberOfRvaAndSizes">
            <summary>IMAGE_OPTIONAL_HEADER.NumberOfRvaAndSizes</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData.DataDirectory">
            <summary>IMAGE_OPTIONAL_HEADER.DataDirectory</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data">
            <summary>
            32-bit optional header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.Is32Bit">
            <summary>
            This is true, since it's a 32-bit optional header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.BaseOfData">
            <summary>IMAGE_OPTIONAL_HEADER32.BaseOfData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.ImageBase">
            <summary>IMAGE_OPTIONAL_HEADER32.ImageBase</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.SizeOfStackReserve">
            <summary>IMAGE_OPTIONAL_HEADER32.SizeOfStackReserve</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.SizeOfStackCommit">
            <summary>IMAGE_OPTIONAL_HEADER32.SizeOfStackCommit</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.SizeOfHeapReserve">
            <summary>IMAGE_OPTIONAL_HEADER32.SizeOfHeapReserve</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader32Data.SizeOfHeapCommit">
            <summary>IMAGE_OPTIONAL_HEADER32.SizeOfHeapCommit</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data">
            <summary>
            64-bit optional header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.Is32Bit">
            <summary>
            This is false, since it's a 64-bit optional header
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.ImageBase">
            <summary>IMAGE_OPTIONAL_HEADER64.ImageBase</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.SizeOfStackReserve">
            <summary>IMAGE_OPTIONAL_HEADER64.SizeOfStackReserve</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.SizeOfStackCommit">
            <summary>IMAGE_OPTIONAL_HEADER64.SizeOfStackCommit</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.SizeOfHeapReserve">
            <summary>IMAGE_OPTIONAL_HEADER64.SizeOfHeapReserve</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeader64Data.SizeOfHeapCommit">
            <summary>IMAGE_OPTIONAL_HEADER64.SizeOfHeapCommit</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeSectionsData">
            <summary>
            Sections array
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeSectionsData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Files.ArrayField{dnSpy.Contracts.Hex.Files.PE.PeSectionData}[])">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="fields">Array elements</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PeSectionData">
            <summary>
            Section header
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.PE.PeSectionData.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.SectionName">
            <summary>IMAGE_SECTION_HEADER.Name</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.VirtualSize">
            <summary>IMAGE_SECTION_HEADER.VirtualSize</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.VirtualAddress">
            <summary>IMAGE_SECTION_HEADER.VirtualAddress</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.SizeOfRawData">
            <summary>IMAGE_SECTION_HEADER.SizeOfRawData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.PointerToRawData">
            <summary>IMAGE_SECTION_HEADER.PointerToRawData</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.PointerToRelocations">
            <summary>IMAGE_SECTION_HEADER.PointerToRelocations</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.PointerToLinenumbers">
            <summary>IMAGE_SECTION_HEADER.PointerToLinenumbers</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.NumberOfRelocations">
            <summary>IMAGE_SECTION_HEADER.NumberOfRelocations</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.NumberOfLinenumbers">
            <summary>IMAGE_SECTION_HEADER.NumberOfLinenumbers</summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.PE.PeSectionData.Characteristics">
            <summary>IMAGE_SECTION_HEADER.Characteristics</summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds">
            <summary>
            Predefined PE <see cref="T:dnSpy.Contracts.Hex.Files.BufferData"/> ids
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds.PeDosHeader">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.PE.PeDosHeaderData"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds.PeFileHeader">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.PE.PeFileHeaderData"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds.PeOptionalHeader">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.PE.PeOptionalHeaderData"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds.PeSections">
            <summary><see cref="T:dnSpy.Contracts.Hex.Files.PE.PeSectionsData"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PredefinedHexFileStructureInfoProviderFactoryNames">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedHexFileStructureInfoProviderFactoryNames.Default">
            <summary>
            Default <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedHexFileStructureInfoProviderFactoryNames.PE">
            <summary>
            PE <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedHexFileStructureInfoProviderFactoryNames.DotNet">
            <summary>
            .NET <see cref="T:dnSpy.Contracts.Hex.Files.HexFileStructureInfoProviderFactory"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PredefinedStructureProviderFactoryNames">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.StructureProviderFactory"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedStructureProviderFactoryNames.PE">
            <summary>
            PE file data provider
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedStructureProviderFactoryNames.DotNet">
            <summary>
            .NET file data provider
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedStructureProviderFactoryNames.DotNetMultiResource">
            <summary>
            .NET multi-file resource data provider
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.StructureProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Files.ComplexData"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProvider.Initialize">
            <summary>
            Called before any other method, but since this method is allowed to call <see cref="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetStructure(System.String)"/>,
            the other methods could get called before this instance's <see cref="M:dnSpy.Contracts.Hex.Files.StructureProvider.Initialize"/> method has been called.
            
            The method returns false if this instance should be removed (eg. the file isn't supported).
            
            This method is allowed to call <see cref="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetStructure(System.String)"/> and <see cref="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetHeaders``1"/>
            but should make sure that any provider it depends on has already been initialized (eg. add a
            <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/> on your <see cref="T:dnSpy.Contracts.Hex.Files.StructureProviderFactory"/> class)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProvider.GetStructure(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a structure at <paramref name="position"/> or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProvider.GetStructure(System.String)">
            <summary>
            Returns a structure or null
            </summary>
            <param name="id">Id, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProvider.GetHeaders``1">
            <summary>
            Returns headers or null. This method is called before <see cref="M:dnSpy.Contracts.Hex.Files.BufferFileHeadersProvider.GetHeaders``1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.StructureProviderFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.StructureProvider"/>s. Export an instance with
            a <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/> and a <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>,
            see also <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedStructureProviderFactoryNames"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProviderFactory.#ctor">
            <summary>
            Construfctor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.StructureProviderFactory.Create(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.StructureProvider"/> or returns null
            </summary>
            <param name="file">Buffer file</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.EnumFieldInfo">
            <summary>
            Enum field info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.EnumFieldInfo.Value">
            <summary>
            Gets the enum field value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.EnumFieldInfo.Name">
            <summary>
            Gets the enum field name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.EnumFieldInfo.#ctor(System.UInt64,System.String)">
            <summary>
            Enum field info
            </summary>
            <param name="value">Enum field value</param>
            <param name="name">Enum field name</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.FlagInfo">
            <summary>
            Flag info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FlagInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FlagInfo.Mask">
            <summary>
            Mask
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FlagInfo.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FlagInfo.IsEnumName">
            <summary>
            true if it only stores the name of the enum and the enum mask. <see cref="P:dnSpy.Contracts.Hex.Files.FlagInfo.Value"/> is not used
            and should be ignored.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.FlagInfo.CreateEnumName(System.UInt64,System.String)">
            <summary>
            Creates an instance that only holds the name of the embedded enum value
            </summary>
            <param name="mask">Enum mask</param>
            <param name="name">Name of enum</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.FlagInfo.#ctor(System.UInt64,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="bitMask">Bit mask</param>
            <param name="name">Name</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.FlagInfo.#ctor(System.UInt64,System.UInt64,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="mask">Mask</param>
            <param name="value">Value</param>
            <param name="name">Name</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexBufferFile">
            <summary>
            A file in a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan,System.String,System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="span">Span of file</param>
            <param name="name">Name</param>
            <param name="filename">Filename if possible, otherwise any name</param>
            <param name="tags">Tags, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Properties">
            <summary>
            Gets the properties
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Span">
            <summary>
            Gets the file span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Filename">
            <summary>
            Gets the filename if possible, otherwise it could be any name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Tags">
            <summary>
            Gets all the tags, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.ParentFile">
            <summary>
            Parent file or null if it's not a nested file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.IsNestedFile">
            <summary>
            true if it's a nested file (<see cref="P:dnSpy.Contracts.Hex.Files.HexBufferFile.ParentFile"/> is not null)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.Files">
            <summary>
            Gets all nested files
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.CreateFile(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Creates a file. Overlapping files isn't supported.
            </summary>
            <param name="span">Span of file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.CreateFile(dnSpy.Contracts.Hex.HexSpan,System.String,System.String,System.String[])">
            <summary>
            Creates a file. Overlapping files isn't supported.
            </summary>
            <param name="span">Span of file</param>
            <param name="name">Name</param>
            <param name="filename">Filename if possible, otherwise any name</param>
            <param name="tags">Tags, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.CreateFiles(dnSpy.Contracts.Hex.Files.BufferFileOptions[])">
            <summary>
            Creates files. Overlapping files isn't supported.
            </summary>
            <param name="options">File options</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Files.HexBufferFile.BufferFilesAdded">
            <summary>
            Raised after files are added
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetFile(dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Finds a file
            </summary>
            <param name="position">Position</param>
            <param name="checkNestedFiles">true to check nested files</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.IsRemoved">
            <summary>
            true if it has been removed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Files.HexBufferFile.Removed">
            <summary>
            Raised after it is removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetStructure(dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Gets a structure
            </summary>
            <param name="position">Position</param>
            <param name="checkNestedFiles">true to check nested files, false to only check this file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetFileAndStructure(dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Gets a structure
            </summary>
            <param name="position">Position</param>
            <param name="checkNestedFiles">true to check nested files, false to only check this file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetStructure(System.String)">
            <summary>
            Gets a structure. Nested files aren't checked.
            </summary>
            <param name="id">Id, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PE.PredefinedPeDataIds"/></param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFile.IsStructuresInitialized">
            <summary>
            true if <see cref="E:dnSpy.Contracts.Hex.Files.HexBufferFile.StructuresInitialized"/> has been raised
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Files.HexBufferFile.StructuresInitialized">
            <summary>
            Raised after the default structures have been added
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.GetHeaders``1">
            <summary>
            Gets headers. Nested files aren't checked.
            </summary>
            <typeparam name="THeaders">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFile.AlignUp(dnSpy.Contracts.Hex.HexPosition,System.UInt32)">
            <summary>
            Aligns <paramref name="position"/> up. The returned position is aligned relative to the
            start of the file, not relative to buffer position 0. I.e., if the file starts at position
            2, <paramref name="position"/> is 3 and <paramref name="alignment"/> is 4, the returned
            value is 6, not 4.
            </summary>
            <param name="position">Position</param>
            <param name="alignment">Alignment, must be a power of 2</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexBufferFileService">
            <summary>
            Creates and removes <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/>s from a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFileService.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.HexBufferFileService.Files">
            <summary>
            Gets all files
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.CreateFile(dnSpy.Contracts.Hex.HexSpan,System.String,System.String,System.String[])">
            <summary>
            Creates a file. Overlapping files isn't supported.
            </summary>
            <param name="span">Span of file</param>
            <param name="name">Name</param>
            <param name="filename">Filename if possible, otherwise any name</param>
            <param name="tags">Tags, see eg. <see cref="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.CreateFiles(dnSpy.Contracts.Hex.Files.BufferFileOptions[])">
            <summary>
            Creates files. Overlapping files isn't supported.
            </summary>
            <param name="options">File options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.RemoveAllFiles">
            <summary>
            Removes all files
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.RemoveFiles(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Removes all files overlapping with <paramref name="span"/>
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.RemoveFile(dnSpy.Contracts.Hex.Files.HexBufferFile)">
            <summary>
            Removes a file
            </summary>
            <param name="file">File to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.RemoveFiles(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Hex.Files.HexBufferFile})">
            <summary>
            Removes files
            </summary>
            <param name="files">Files to remove</param>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Files.HexBufferFileService.BufferFilesAdded">
            <summary>
            Raised after files are added
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Files.HexBufferFileService.BufferFilesRemoved">
            <summary>
            Raised after files are removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.GetFile(dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Finds a file
            </summary>
            <param name="position">Position</param>
            <param name="checkNestedFiles">true to check nested files</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileService.GetFileAndStructure(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/> and structure at <paramref name="position"/> or null if
            there's no structure
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.FileAndStructure">
            <summary>
            File and structure
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FileAndStructure.File">
            <summary>
            Gets the file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.FileAndStructure.Structure">
            <summary>
            Gets the structure
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.FileAndStructure.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFile,dnSpy.Contracts.Hex.Files.ComplexData)">
            <summary>
            Constructor
            </summary>
            <param name="file">File</param>
            <param name="structure">Structure</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.HexBufferFileServiceFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFileService"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileServiceFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.HexBufferFileServiceFactory.Create(dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Gets or creates a <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFileService"/>
            </summary>
            <param name="buffer">Buffer</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Files.HexBufferFileServiceFactory.BufferFileServiceCreated">
            <summary>
            Raised after a new <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFileService"/> is created
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.BufferFileServiceCreatedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFileService"/> created event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.BufferFileServiceCreatedEventArgs.BufferFileService">
            <summary>
            Gets the created instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.BufferFileServiceCreatedEventArgs.#ctor(dnSpy.Contracts.Hex.Files.HexBufferFileService)">
            <summary>
            Constructor
            </summary>
            <param name="bufferFileService">Created instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Hex.Files.HexBufferFile"/> tags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags.FileLayout">
            <summary>
            Normal file layout, eg. a PE file on disk
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags.MemoryLayout">
            <summary>
            Memory layout, eg. a PE file loaded by the OS
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags.DotNetResources">
            <summary>
            The file is part of .NET resources
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags.DotNetMultiFileResource">
            <summary>
            This file is part of a multi-file .NET resource
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Files.PredefinedBufferFileTags.SerializedData">
            <summary>
            The content is serialized data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContent">
            <summary>
            Contains data used to create a tooltip
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContent.Image">
            <summary>
            Image shown in the tooltip or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContent.Text">
            <summary>
            Gets all classified text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContent.#ctor(dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection[],System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
            <param name="image">Image shown in the tooltip or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContent"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator.Image">
            <summary>
            Image shown in the tooltip
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator.Writer">
            <summary>
            Gets the current writer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator.CreateNewWriter">
            <summary>
            Creates and returns a new writer. The created text is shown on a new line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator.Create">
            <summary>
            Creates the content
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreatorFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreatorFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreatorFactory.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Files.ToolTips.HexToolTipContentCreator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexCachedBufferStream">
            <summary>
            A cached buffer stream
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCachedBufferStream.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCachedBufferStream.InvalidateAll">
            <summary>
            Invalidates all memory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCachedBufferStream.Invalidate(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Invalidates a region of memory
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexColumnPosition">
            <summary>
            A position in a hex column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexColumnPosition.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexColumnPosition.ActiveColumn">
            <summary>
            Active column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexColumnPosition.ValuePosition">
            <summary>
            Position in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexColumnPosition.AsciiPosition">
            <summary>
            Position in the ASCII column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexColumnPosition.ActivePosition">
            <summary>
            Gets the active position (<see cref="P:dnSpy.Contracts.Hex.HexColumnPosition.ValuePosition"/> or <see cref="P:dnSpy.Contracts.Hex.HexColumnPosition.AsciiPosition"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.#ctor(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexCellPosition,dnSpy.Contracts.Hex.HexCellPosition)">
            <summary>
            Constructor
            </summary>
            <param name="activeColumn">Active column</param>
            <param name="valuePosition">Position in the values column</param>
            <param name="asciiPosition">Position in the ASCII column</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.op_Equality(dnSpy.Contracts.Hex.HexColumnPosition,dnSpy.Contracts.Hex.HexColumnPosition)">
            <summary>
            operator ==()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.op_Inequality(dnSpy.Contracts.Hex.HexColumnPosition,dnSpy.Contracts.Hex.HexColumnPosition)">
            <summary>
            operator !=()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.Equals(dnSpy.Contracts.Hex.HexColumnPosition)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexColumnPosition.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService">
            <summary>
            Creates HTML strings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService.DefaultDelimiter">
            <summary>
            Gets the default delimiter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService.GenerateHtmlFragment(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,dnSpy.Contracts.Hex.HexBufferLineFormatter,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="bufferLines">Buffer lines provider</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService.GenerateHtmlFragment(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,dnSpy.Contracts.Hex.HexBufferLineFormatter,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="bufferLines">Buffer lines provider</param>
            <param name="delimiter">Delimiter added between generated html strings</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService.GenerateHtmlFragment(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,dnSpy.Contracts.Hex.Editor.HexView,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="hexView">Hex view</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexHtmlBuilderService.GenerateHtmlFragment(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,dnSpy.Contracts.Hex.Editor.HexView,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="hexView">Hex view</param>
            <param name="delimiter">Delimiter added between generated html strings</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexLineTransformSourceProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Formatting.HexLineTransformSource"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexLineTransformSourceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexLineTransformSourceProvider.Create(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Formatting.HexLineTransformSource"/> or returns null
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement">
            <summary>
            Adornment sequence element
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.Width">
            <summary>
            Gets the width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.TopSpace">
            <summary>
            Gets the top space
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.Baseline">
            <summary>
            Gets the base line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.TextHeight">
            <summary>
            Gets the text height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.BottomSpace">
            <summary>
            Gets the bottom space
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.Affinity">
            <summary>
            Gets the affinity
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.IdentityTag">
            <summary>
            Gets the identity tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.ProviderTag">
            <summary>
            Gets the provider tag
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexFormattedLine">
            <summary>
            A formatted line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.HasAdornments">
            <summary>
            true if there's at least one adornment
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.GetOrCreateVisual">
            <summary>
            Gets or creates the visual
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.RemoveVisual">
            <summary>
            Removes the visual
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.SetChange(Microsoft.VisualStudio.Text.Formatting.TextViewLineChange)">
            <summary>
            Sets the change
            </summary>
            <param name="change">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.SetDeltaY(System.Double)">
            <summary>
            Sets a new delta Y
            </summary>
            <param name="deltaY">New delta Y</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.SetLineTransform(Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Sets a new line transform
            </summary>
            <param name="transform">New line transform</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.SetTop(System.Double)">
            <summary>
            Sets a new top
            </summary>
            <param name="top">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.SetVisibleArea(System.Windows.Rect)">
            <summary>
            Sets the visible area
            </summary>
            <param name="visibleArea">Visible area</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLine.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexSequenceElement">
            <summary>
            Sequence element
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexSequenceElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexSequenceElement.ShouldRenderText">
            <summary>
            true to show the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexSequenceElement.Span">
            <summary>
            Line span
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.FormattedHexSourceFactoryService">
            <summary>
            Formatted hex source factory service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.FormattedHexSourceFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.FormattedHexSourceFactoryService.Create(System.Double,System.Boolean,dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource"/> that doesn't classify anything
            </summary>
            <param name="baseIndent">Base indentation</param>
            <param name="useDisplayMode">true to use display mode, false to use ideal mode</param>
            <param name="sequencer">Sequencer</param>
            <param name="classificationFormatMap">Classification format map</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.FormattedHexSourceFactoryService.Create(System.Double,System.Boolean,dnSpy.Contracts.Hex.Classification.HexClassifier,dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource"/>
            </summary>
            <param name="baseIndent">Base indentation</param>
            <param name="useDisplayMode">true to use display mode, false to use ideal mode</param>
            <param name="aggregateClassifier">Classifier</param>
            <param name="sequencer">Sequencer</param>
            <param name="classificationFormatMap">Classification format map</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Formatting.HexSequenceElement"/> collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection.Sequencer">
            <summary>
            Gets the sequencer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection.Item(System.Int32)">
            <summary>
            Gets an element
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection.Count">
            <summary>
            Gets the number of elements in this collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer">
            <summary>
            Creates a sequence of text and adornment elements
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer.SequenceChanged">
            <summary>
            Raised after a sequence has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer.CreateHexAndAdornmentCollection(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer.CreateHexAndAdornmentCollection(dnSpy.Contracts.Hex.HexBufferLine)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentCollection"/>
            </summary>
            <param name="line">Line</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequenceChangedEventArgs">
            <summary>
            Event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequenceChangedEventArgs.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequenceChangedEventArgs.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencerFactoryService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencerFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencerFactoryService.Create(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Formatting.HexAndAdornmentSequencer"/> instance
            </summary>
            <param name="view">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource">
            <summary>
            Formatted line source
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.DefaultTextProperties">
            <summary>
            Gets the default text properties
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.HexAndAdornmentSequencer">
            <summary>
            Gets the sequencer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.BaseIndentation">
            <summary>
            Gets the base indentation
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.ColumnWidth">
            <summary>
            Gets the width of a column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.LineHeight">
            <summary>
            Gets the nominal line height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.TextHeightAboveBaseline">
            <summary>
            Gets the nominal height of the text above the baseline
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.TextHeightBelowBaseline">
            <summary>
            Gets the nominal height of the text below the baseline
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.UseDisplayMode">
            <summary>
            true to use <see cref="F:System.Windows.Media.TextFormattingMode.Display"/> mode, false to use
            <see cref="F:System.Windows.Media.TextFormattingMode.Ideal"/> mode
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexFormattedLineSource.FormatLineInVisualBuffer(dnSpy.Contracts.Hex.HexBufferLine)">
            <summary>
            Formats a line
            </summary>
            <param name="line">Buffer line</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexLineTransformSource">
            <summary>
            Line transform source
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexLineTransformSource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexLineTransformSource.GetLineTransform(dnSpy.Contracts.Hex.Formatting.HexViewLine,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Calculates the line transform for a given line of formatted text
            </summary>
            <param name="line">Line</param>
            <param name="yPosition">Y position</param>
            <param name="placement">Placement</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.HexViewLine">
            <summary>
            Hex view line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.IdentityTag">
            <summary>
            Gets a tag that can be used to track the instance across layouts
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.IsValid">
            <summary>
            true if this line is valid, false if it has been disposed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Baseline">
            <summary>
            Gets the base line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Top">
            <summary>
            Gets the position of the top edge of this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Bottom">
            <summary>
            Gets the position of the bottom edge of this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Left">
            <summary>
            Gets the position of the left edge of this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Right">
            <summary>
            Gets the position of the right edge of this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Width">
            <summary>
            Gets the width of the line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Height">
            <summary>
            Gets the height of the line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextTop">
            <summary>
            Gets the position of the top edge of the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextBottom">
            <summary>
            Gets the position of the bottom edge of the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextLeft">
            <summary>
            Gets the position of the left edge of the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextRight">
            <summary>
            Gets the position of the right edge of the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextWidth">
            <summary>
            Gets the text width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextHeight">
            <summary>
            Gets the text height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.VirtualSpaceWidth">
            <summary>
            Get the width of the virtual spaces at the end of this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.DeltaY">
            <summary>
            Gets the delta Y between current layout and previous layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.EndOfLineWidth">
            <summary>
            Gets the width of the end of line character
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.VisibilityState">
            <summary>
            Gets the visibility
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Change">
            <summary>
            Gets the change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.DefaultLineTransform">
            <summary>
            Gets the default line transform
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.LineTransform">
            <summary>
            Gets the line transform
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.BufferLine">
            <summary>
            Gets the buffer line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.Text">
            <summary>
            Gets the text shown in this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.TextSpan">
            <summary>
            Gets the text span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.BufferSpan">
            <summary>
            Gets the buffer span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.BufferStart">
            <summary>
            Gets the start position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.HexViewLine.BufferEnd">
            <summary>
            Gets the end position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.ContainsBufferPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Returns true if <paramref name="bufferPosition"/> lies within this line
            </summary>
            <param name="bufferPosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetAdornmentBounds(System.Object)">
            <summary>
            Gets the bounds of an adornment
            </summary>
            <param name="identityTag">Identity tag (<see cref="P:dnSpy.Contracts.Hex.Formatting.HexAdornmentElement.IdentityTag"/>)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetAdornmentTags(System.Object)">
            <summary>
            Gets all adornment tags
            </summary>
            <param name="providerTag">Provider tag (<see cref="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.ProviderTag"/>)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetLinePositionFromXCoordinate(System.Double)">
            <summary>
            Gets the line position
            </summary>
            <param name="xCoordinate">x coordinate</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetLinePositionFromXCoordinate(System.Double,System.Boolean)">
            <summary>
            Gets the line position
            </summary>
            <param name="xCoordinate">x coordinate</param>
            <param name="textOnly">true to return null if it's over an adornment</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetCharacterBounds(System.Int32)">
            <summary>
            Gets character bounds
            </summary>
            <param name="linePosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetExtendedCharacterBounds(System.Int32)">
            <summary>
            Gets extended character bounds, including any adornments
            </summary>
            <param name="linePosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetVirtualLinePositionFromXCoordinate(System.Double)">
            <summary>
            Gets the line position
            </summary>
            <param name="xCoordinate">x coordinate</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetInsertionLinePositionFromXCoordinate(System.Double)">
            <summary>
            Gets the insertion line position
            </summary>
            <param name="xCoordinate">x coordinate</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetNormalizedTextBounds(dnSpy.Contracts.Hex.HexLineSpan)">
            <summary>
            Gets normalized text bounds
            </summary>
            <param name="lineSpan">Line span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Gets normalized text bounds
            </summary>
            <param name="lineSpan">Line span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetNormalizedTextBounds(dnSpy.Contracts.Hex.HexBufferSpanSelection)">
            <summary>
            Gets normalized text bounds
            </summary>
            <param name="span">Span and selection flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetNormalizedTextBounds(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets normalized text bounds
            </summary>
            <param name="bufferPosition">Position</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.GetTextElementSpan(System.Int32)">
            <summary>
            Gets the span whose text element index corresponds to the given line position
            </summary>
            <param name="linePosition">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.HexViewLine.IntersectsBufferSpan(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if the line intersects with <paramref name="bufferSpan"/>
            </summary>
            <param name="bufferSpan">Span</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.NullHexClassifier">
            <summary>
            A <see cref="T:dnSpy.Contracts.Hex.Classification.HexClassifier"/> that does nothing
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Formatting.NullHexClassifier.Instance">
            <summary>
            Gets the instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Formatting.WpfHexViewLine">
            <summary>
            WPF hex view line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.WpfHexViewLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.WpfHexViewLine.TextLines">
            <summary>
            Gets all text lines
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Formatting.WpfHexViewLine.VisibleArea">
            <summary>
            Gets the visible area
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Formatting.WpfHexViewLine.GetCharacterFormatting(System.Int32)">
            <summary>
            Gets the character formatting
            </summary>
            <param name="linePosition">Line position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferLine">
            <summary>
            Line information
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.LineProvider">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Hex.HexBufferLineFormatter"/> instance that created this line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.LineNumber">
            <summary>
            Gets the line number
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.ColumnOrder">
            <summary>
            Gets the column order
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.BufferSpan">
            <summary>
            Buffer span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.BufferStart">
            <summary>
            Gets the start position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.BufferEnd">
            <summary>
            Gets the end position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.HexBytes">
            <summary>
            All raw bytes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.Text">
            <summary>
            Text shown in the UI. The positions of the offset column, values column
            and ASCII column are not fixed, use one of the GetXXX methods to get
            the spans.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.TextSpan">
            <summary>
            Gets a span covering <see cref="P:dnSpy.Contracts.Hex.HexBufferLine.Text"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.IsOffsetColumnPresent">
            <summary>
            true if the offset column is present
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.IsValuesColumnPresent">
            <summary>
            true if the values column is present
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.IsAsciiColumnPresent">
            <summary>
            true if the ASCII column is present
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.IsColumnPresent(dnSpy.Contracts.Hex.HexColumnType)">
            <summary>
            Returns true if a column is present
            </summary>
            <param name="column">Column</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.LogicalOffset">
            <summary>
            Gets the value of the offset shown in <see cref="P:dnSpy.Contracts.Hex.HexBufferLine.Text"/>. The real offset
            is stored in <see cref="P:dnSpy.Contracts.Hex.HexBufferLine.BufferSpan"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetSpan(dnSpy.Contracts.Hex.HexColumnType,System.Boolean)">
            <summary>
            Gets the span of a column
            </summary>
            <param name="column">Colum</param>
            <param name="onlyVisibleCells">true to only include visible values, false to include the full column</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetOffsetSpan">
            <summary>
            Gets the span of the offset in <see cref="P:dnSpy.Contracts.Hex.HexBufferLine.Text"/>. This can be an empty span if
            the offset column isn't shown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetValuesSpan(System.Boolean)">
            <summary>
            Gets the span of the values column
            </summary>
            <param name="onlyVisibleCells">true to only include visible values, false to include the full column</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetValuesSpans(dnSpy.Contracts.Hex.HexBufferSpanSelection)">
            <summary>
            Gets values spans
            </summary>
            <param name="span">Span and selection flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetValuesSpans(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets values spans
            </summary>
            <param name="span">Buffer span</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetAsciiSpan(System.Boolean)">
            <summary>
            Gets the span of the ASCII column. This can be an empty span
            if the ASCII column isn't shown.
            </summary>
            <param name="onlyVisibleCells">true to only include visible characters, false to include the full column</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetAsciiSpans(dnSpy.Contracts.Hex.HexBufferSpanSelection)">
            <summary>
            Gets ASCII spans
            </summary>
            <param name="span">Span and selection flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetAsciiSpans(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets ASCII spans
            </summary>
            <param name="span">Buffer span</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetSpans(dnSpy.Contracts.Hex.HexBufferSpanSelection)">
            <summary>
            Gets column spans in column order
            </summary>
            <param name="span">Span and selection flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetSpans(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets column spans in column order
            </summary>
            <param name="span">Buffer span</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.ValueCells">
            <summary>
            Gets the value cell collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLine.AsciiCells">
            <summary>
            Gets the ASCII cell collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetLinePosition(dnSpy.Contracts.Hex.HexCellPosition)">
            <summary>
            Gets a text line position or null
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetLinePositionInfo(System.Int32)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexLinePositionInfo"/>
            </summary>
            <param name="linePosition">Line position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetClosestCellPosition(System.Int32,System.Boolean)">
            <summary>
            Gets the closest cell position
            </summary>
            <param name="linePosition">Line position</param>
            <param name="onlyVisibleCells">true to only return cells with data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetClosestCellPosition(dnSpy.Contracts.Hex.HexLinePositionInfo,System.Boolean)">
            <summary>
            Gets the closest cell position
            </summary>
            <param name="position">Position</param>
            <param name="onlyVisibleCells">true to only return cells with data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.GetText(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Gets the text. All cells outside the input range are cleared.
            </summary>
            <param name="visibleBytes">Visible bytes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLine.ToString">
            <summary>
            Returns <see cref="P:dnSpy.Contracts.Hex.HexBufferLine.Text"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions">
            <summary>
            Options passed to <see cref="M:dnSpy.Contracts.Hex.HexBufferLineFormatterFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexBufferLineFormatterOptions)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.CharsPerLine">
            <summary>
            Number of visible characters per line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.BytesPerLine">
            <summary>
            Number of bytes per line or 0 to fit to width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.GroupSizeInBytes">
            <summary>
            Size of a group in bytes or 0 to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.ShowOffset">
            <summary>
            true to show the offset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.OffsetLowerCaseHex">
            <summary>
            true to use lower case hex
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.OffsetFormat">
            <summary>
            Offset format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.StartPosition">
            <summary>
            First position to show
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.EndPosition">
            <summary>
            End position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.BasePosition">
            <summary>
            Base position. The real position is added to this value which is then
            shown in the offset column.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.UseRelativePositions">
            <summary>
            true if all visible positions are relative to <see cref="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.StartPosition"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.ShowValues">
            <summary>
            true to show the values
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.ValuesLowerCaseHex">
            <summary>
            true to use lower case hex
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.OffsetBitSize">
            <summary>
            Number of bits of the offset to show. Must be a multiple of 4. If it's 0, the default
            value is used.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.ValuesFormat">
            <summary>
            Values format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.ShowAscii">
            <summary>
            true to show ASCII chars
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.ColumnOrder">
            <summary>
            Column order or null to use the default order
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.MinOffsetBitSize">
            <summary>
            Minimum <see cref="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.OffsetBitSize"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.MaxOffsetBitSize">
            <summary>
            Maximum <see cref="P:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.OffsetBitSize"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.MinBytesPerLine">
            <summary>
            Min bytes per line
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.MaxBytesPerLine">
            <summary>
            Max bytes per line
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.HexValuesDisplayFormat_First">
            <summary>
            First valid <see cref="T:dnSpy.Contracts.Hex.HexValuesDisplayFormat"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.HexValuesDisplayFormat_Last">
            <summary>
            Last valid <see cref="T:dnSpy.Contracts.Hex.HexValuesDisplayFormat"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.HexOffsetFormat_First">
            <summary>
            First valid <see cref="T:dnSpy.Contracts.Hex.HexOffsetFormat"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.HexOffsetFormat_Last">
            <summary>
            Last valid <see cref="T:dnSpy.Contracts.Hex.HexOffsetFormat"/> value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.Equals(dnSpy.Contracts.Hex.HexBufferLineFormatterOptions)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatterOptions.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferSpanSelection">
            <summary>
            Buffer span and selection flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpanSelection.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpanSelection.BufferSpan">
            <summary>
            Buffer span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpanSelection.SelectionFlags">
            <summary>
            Selection flags or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanSelection.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Constructor
            </summary>
            <param name="bufferSpan">Buffer span</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanSelection.Equals(dnSpy.Contracts.Hex.HexBufferSpanSelection)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanSelection.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanSelection.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanSelection.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexCell">
            <summary>
            Cell information
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.HasData">
            <summary>
            true if there's data in the cell even if there's no memory there; false if it's a blank cell
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.Index">
            <summary>
            Index in <see cref="T:dnSpy.Contracts.Hex.HexCellCollection"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.GroupIndex">
            <summary>
            Group index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.BufferSpan">
            <summary>
            Gets the buffer span. It's valid if <see cref="P:dnSpy.Contracts.Hex.HexCell.HasData"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.BufferStart">
            <summary>
            Gets the start position. It's valid if <see cref="P:dnSpy.Contracts.Hex.HexCell.HasData"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.BufferEnd">
            <summary>
            Gets the end position. It's valid if <see cref="P:dnSpy.Contracts.Hex.HexCell.HasData"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.TextSpan">
            <summary>
            Span of the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.CellSpan">
            <summary>
            Span of the cell, some of the span could be whitespace
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.SeparatorSpan">
            <summary>
            Span of the cell separator
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCell.FullSpan">
            <summary>
            Includes the whole cell and separator span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCell.#ctor(System.Int32,System.Int32,dnSpy.Contracts.Hex.HexBufferSpan,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="index">Cell index</param>
            <param name="groupIndex">Group index</param>
            <param name="bufferSpan">Buffer span or the default value if there's no data</param>
            <param name="textSpan">Span of the text. This span doesn't include any whitespace before and after the text.</param>
            <param name="cellSpan">Span of the cell, some of the span could be whitespace</param>
            <param name="separatorSpan">Span of the cell separator</param>
            <param name="fullSpan">Includes the whole cell and separator span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCell.GetSpan(dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Gets a text span
            </summary>
            <param name="flags">Flags, only <see cref="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Cell"/> and
            <see cref="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Separator"/> are checked</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexCellCollection">
            <summary>
            Hex cell collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellCollection.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexCellCollection.Empty">
            <summary>
            Gets the empty collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellCollection.Count">
            <summary>
            Gets the number of elements in this collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellCollection.HasDataSpan">
            <summary>
            Gets the span of cells in the collection that have data (<see cref="P:dnSpy.Contracts.Hex.HexCell.HasData"/> is true)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellCollection.Item(System.Int32)">
            <summary>
            Gets a cell
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellCollection.#ctor(dnSpy.Contracts.Hex.HexCell[])">
            <summary>
            Constructor
            </summary>
            <param name="cells">All cells</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellCollection.GetCell(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the cell that contains <paramref name="point"/>
            </summary>
            <param name="point">Point</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellCollection.GetCells">
            <summary>
            Gets all cells, including unused cells
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellCollection.GetVisibleCells">
            <summary>
            Gets all visible cells
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellCollection.GetCells(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Gets all cells that are contained in <paramref name="span"/>. The returned cells
            are ordered by index.
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexCellPosition">
            <summary>
            A position within a cell
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellPosition.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellPosition.Column">
            <summary>
            Gets the column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellPosition.BufferPosition">
            <summary>
            Gets the buffer position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexCellPosition.CellPosition">
            <summary>
            Gets the position within the cell
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.#ctor(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexBufferPoint,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column</param>
            <param name="bufferPosition">Buffer position</param>
            <param name="cellPosition">Position within the cell</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.op_Equality(dnSpy.Contracts.Hex.HexCellPosition,dnSpy.Contracts.Hex.HexCellPosition)">
            <summary>
            operator ==()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.op_Inequality(dnSpy.Contracts.Hex.HexCellPosition,dnSpy.Contracts.Hex.HexCellPosition)">
            <summary>
            operator !=()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.Equals(dnSpy.Contracts.Hex.HexCellPosition)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexCellPosition.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexColumnType">
            <summary>
            Hex column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexColumnType.Offset">
            <summary>
            Offset column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexColumnType.Values">
            <summary>
            Values column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexColumnType.Ascii">
            <summary>
            ASCII column
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexGroupInformation">
            <summary>
            Group information
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexGroupInformation.GroupIndex">
            <summary>
            Group index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexGroupInformation.FullSpan">
            <summary>
            Gets the full span including a possible separator at the end of the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexGroupInformation.Span">
            <summary>
            Gets the span without the separator at the end of the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexGroupInformation.#ctor(System.Int32,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="groupIndex">Group index</param>
            <param name="fullSpan">Full span including a possible separator at the end of the span</param>
            <param name="span">Span without the separator at the end of the span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexLinePositionInfo">
            <summary>
            Line position info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.IsOffset">
            <summary>
            true if it's a position within the offset column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.IsValueCell">
            <summary>
            true if it's a position within a value cell
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.IsAsciiCell">
            <summary>
            true if it's a position within an ASCII cell
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.IsValueCellSeparator">
            <summary>
            true if it's a value cell separator position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.IsColumnSeparator">
            <summary>
            true if it's a position between two columns
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.IsVirtualSpace">
            <summary>
            true if it's a position greater than or equal to the line length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.Position">
            <summary>
            Gets the line position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.CellPosition">
            <summary>
            Gets the position within the cell, offset column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLinePositionInfo.Cell">
            <summary>
            Gets the cell if any
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLinePositionInfo.CreateOffset(System.Int32,System.Int32)">
            <summary>
            Creates a position within the offset column
            </summary>
            <param name="linePosition">Line position</param>
            <param name="offsetIndex">Offset character index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLinePositionInfo.CreateValue(System.Int32,dnSpy.Contracts.Hex.HexCell)">
            <summary>
            Creates a position within a value cell
            </summary>
            <param name="linePosition">Line position</param>
            <param name="cell">Cell</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLinePositionInfo.CreateValueCellSeparator(System.Int32,dnSpy.Contracts.Hex.HexCell)">
            <summary>
            Creates a value cell separator position
            </summary>
            <param name="linePosition">Line position</param>
            <param name="cell">Cell</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLinePositionInfo.CreateAscii(System.Int32,dnSpy.Contracts.Hex.HexCell)">
            <summary>
            Creates a position within an ASCII cell
            </summary>
            <param name="linePosition">Line position</param>
            <param name="cell">Cell</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLinePositionInfo.CreateColumnSeparator(System.Int32)">
            <summary>
            Creates a column separator position
            </summary>
            <param name="linePosition">Line position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLinePositionInfo.CreateVirtualSpace(System.Int32,System.Int32)">
            <summary>
            Creates a virtual space position
            </summary>
            <param name="linePosition">Line position</param>
            <param name="lineLength">Length of line</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexLinePositionInfoType">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.HexLinePositionInfo"/> type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexLinePositionInfoType.Offset">
            <summary>
            Offset column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexLinePositionInfoType.ValueCell">
            <summary>
            Value cell
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexLinePositionInfoType.ValueCellSeparator">
            <summary>
            Value cell separator
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexLinePositionInfoType.AsciiCell">
            <summary>
            ASCII cell
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexLinePositionInfoType.ColumnSeparator">
            <summary>
            Column separator
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexLinePositionInfoType.VirtualSpace">
            <summary>
            Virtual space (a position greater than or equal to the line length)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexLineSpan">
            <summary>
            Hex line span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLineSpan.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLineSpan.BufferSpan">
            <summary>
            Buffer span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLineSpan.SelectionFlags">
            <summary>
            Selection flags or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLineSpan.TextSpan">
            <summary>
            Line span or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexLineSpan.IsTextSpan">
            <summary>
            true if it's a text span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLineSpan.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags)">
            <summary>
            Constructor
            </summary>
            <param name="bufferSpan">Buffer span</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexLineSpan.#ctor(dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="line">Line</param>
            <param name="textSpan">Text span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexOffsetFormat">
            <summary>
            Hex offset format
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexOffsetFormat.Hex">
            <summary>
            Show just the hex digits
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexOffsetFormat.HexCSharp">
            <summary>
            Use a 0x prefix
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexOffsetFormat.HexVisualBasic">
            <summary>
            Use a &amp;H prefix
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexOffsetFormat.HexAssembly">
            <summary>
            Use a h suffix
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBuffer">
            <summary>
            Hex buffer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.#ctor(dnSpy.Contracts.Hex.HexTags)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.Properties">
            <summary>
            Gets all properties
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.Tags">
            <summary>
            Gets the tags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.IsMemory">
            <summary>
            true if the underlying stream reads data from some process' memory
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.IsVolatile">
            <summary>
            true if the content can change at any time
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.IsReadOnly">
            <summary>
            true if the buffer is read-only
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.Name">
            <summary>
            Gets the name. This could be the filename if the data was read from a file
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.BufferSpanInvalidated">
            <summary>
            Raised when a span of data got modified by other code
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Refresh">
            <summary>
            Clears any read caches and raises <see cref="E:dnSpy.Contracts.Hex.HexBuffer.BufferSpanInvalidated"/> if needed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.Version">
            <summary>
            Gets the version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.EditInProgress">
            <summary>
            true if an edit is in progress
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.CheckEditAccess">
            <summary>
            Returns true if the current thread is allowed to modify the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.TakeThreadOwnership">
            <summary>
            Claims ownership of this buffer for the current thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetSpanInfo(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets information about a position in the buffer. The returned info isn't
            normalized, there may be consecutive spans with the same flags. It's the
            responsibility of the caller to merge such spans.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetNextValidSpan(dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Gets the next valid span or null if there's none left. This includes the input
            (<paramref name="position"/>) if it happens to lie within this valid span.
            This method merges all consecutive valid spans.
            </summary>
            <param name="position">Start position to check</param>
            <param name="fullSpan">true if positions before <paramref name="position"/> should be included
            in the returned result. This could result in worse performance.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetNextValidSpan(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Gets the next valid span or null if there's none left. This includes the input
            (<paramref name="position"/>) if it happens to lie within this valid span.
            This method merges all consecutive valid spans.
            </summary>
            <param name="position">Start position to check</param>
            <param name="upperBounds">End position</param>
            <param name="fullSpan">true if positions before <paramref name="position"/> should be included
            in the returned result. This could result in worse performance.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetPreviousValidSpan(dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Gets the previous valid span or null if there's none left. This includes the input
            (<paramref name="position"/>) if it happens to lie within this valid span.
            This method merges all consecutive valid spans.
            </summary>
            <param name="position">Start position to check</param>
            <param name="fullSpan">true if positions after <paramref name="position"/> should be included
            in the returned result. This could result in worse performance.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetPreviousValidSpan(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexPosition,System.Boolean)">
            <summary>
            Gets the previous valid span or null if there's none left. This includes the input
            (<paramref name="position"/>) if it happens to lie within this valid span.
            This method merges all consecutive valid spans.
            </summary>
            <param name="position">Start position to check</param>
            <param name="lowerBounds">End position</param>
            <param name="fullSpan">true if positions after <paramref name="position"/> should be included
            in the returned result. This could result in worse performance.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetValidSpans">
            <summary>
            Gets all valid spans. This could be empty if it's a 0-byte buffer stream.
            This method merges all consecutive valid spans.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.GetValidSpans(dnSpy.Contracts.Hex.HexSpan,System.Boolean)">
            <summary>
            Gets all valid spans overlapping <paramref name="span"/>. This method merges all
            consecutive valid spans.
            </summary>
            <param name="span">Span</param>
            <param name="fullSpan">true if positions before <paramref name="span"/> should be included
            in the returned result. This could result in worse performance.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.CreateEdit">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexEdit"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.CreateEdit(System.Nullable{System.Int32},System.Object)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexEdit"/> object
            </summary>
            <param name="reiteratedVersionNumber">Use by undo/redo to restore a previous version</param>
            <param name="editTag">Edit tag, can be anything</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Byte)">
            <summary>
            Replaces the <see cref="T:System.Byte"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.SByte)">
            <summary>
            Replaces the <see cref="T:System.SByte"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Int16)">
            <summary>
            Replaces the <see cref="T:System.Int16"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.UInt16)">
            <summary>
            Replaces the <see cref="T:System.UInt16"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Int32)">
            <summary>
            Replaces the <see cref="T:System.Int32"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.UInt32)">
            <summary>
            Replaces the <see cref="T:System.UInt32"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Int64)">
            <summary>
            Replaces the <see cref="T:System.Int64"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.UInt64)">
            <summary>
            Replaces the <see cref="T:System.UInt64"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Single)">
            <summary>
            Replaces the <see cref="T:System.Single"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Double)">
            <summary>
            Replaces the <see cref="T:System.Double"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Byte[])">
            <summary>
            Replaces the data at <paramref name="position"/> with <paramref name="data"/>
            </summary>
            <param name="position">Position</param>
            <param name="data">New data</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Replace(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Replaces the data at <paramref name="position"/> with <paramref name="data"/>
            </summary>
            <param name="position">Position</param>
            <param name="data">New data</param>
            <param name="index">Index</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.TryReadByte(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Tries to read a <see cref="T:System.Byte"/>. If there's no data, a value less than 0 is returned.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadChar(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Char"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadByte(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Byte"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadSByte(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.SByte"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadInt16(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadUInt16(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadInt32(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadUInt32(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadInt64(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadUInt64(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadSingle(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadDouble(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadCharBigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Char"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadInt16BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadUInt16BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadInt32BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadUInt32BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadInt64BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadUInt64BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadSingleBigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadDoubleBigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadBytes(dnSpy.Contracts.Hex.HexPosition,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="length">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadBytes(dnSpy.Contracts.Hex.HexPosition,System.UInt64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="length">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadBytes(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Reads bytes
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadBytes(dnSpy.Contracts.Hex.HexPosition,System.Byte[])">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="destination">Destination array</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadBytes(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="destination">Destination array</param>
            <param name="destinationIndex">Index</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.ReadHexBytes(dnSpy.Contracts.Hex.HexPosition,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.Changing">
            <summary>
            Raised before the text buffer gets changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.ChangedHighPriority">
            <summary>
            Raised when the buffer has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.Changed">
            <summary>
            Raised when the buffer has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.ChangedLowPriority">
            <summary>
            Raised when the buffer has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.PostChanged">
            <summary>
            Raised after an edit operation has completed or after it has been canceled
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBuffer.Disposed">
            <summary>
            Raised after it is disposed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBuffer.IsDisposed">
            <summary>
            true if the instance has been disposed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBuffer.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferSpanInvalidatedEventArgs">
            <summary>
            Invalidated span event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpanInvalidatedEventArgs.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanInvalidatedEventArgs.#ctor(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferCreatedEventArgs">
            <summary>
            Hex buffer created event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferCreatedEventArgs.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferCreatedEventArgs.#ctor(dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferFactoryService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferFactoryService.EmptyTags">
            <summary>
            Gets the empty tags collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferFactoryService.DefaultMemoryTags">
            <summary>
            Default memory tags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferFactoryService.DefaultFileTags">
            <summary>
            Default file / byte array tags
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferFactoryService.CreateTags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.HexTags"/> instance
            </summary>
            <param name="tags">Tags</param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBufferFactoryService.HexBufferCreated">
            <summary>
            Raised when a new <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/> has been created
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferFactoryService.Create(System.String,dnSpy.Contracts.Hex.HexTags)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
            <param name="filename">Filename</param>
            <param name="tags">Tags or null to use the default file tags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferFactoryService.Create(System.Byte[],System.String,dnSpy.Contracts.Hex.HexTags)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
            <param name="data">Data</param>
            <param name="name">Name, can be anything and is usually the filename</param>
            <param name="tags">Tags or null to use the default file tags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferFactoryService.Create(dnSpy.Contracts.Hex.HexBufferStream,dnSpy.Contracts.Hex.HexTags,System.Boolean)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
            <param name="stream">Stream to use</param>
            <param name="tags">Tags</param>
            <param name="disposeStream">true if the returned buffer owns <paramref name="stream"/> and
            disposes it when the buffer gets disposed</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferLineFormatter">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.HexBufferLine"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.BufferSpan">
            <summary>
            Gets the buffer span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.BufferStart">
            <summary>
            Gets the start position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.BufferEnd">
            <summary>
            Gets the end position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.LineCount">
            <summary>
            Number of lines. There's always at least one line.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.OffsetSpan">
            <summary>
            Gets the span of the offset column. This is empty if the column isn't present.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ValuesSpan">
            <summary>
            Gets the span of the values column. This is empty if the column isn't present.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.AsciiSpan">
            <summary>
            Gets the span of the ASCII column. This is empty if the column isn't present.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetColumnSpan(dnSpy.Contracts.Hex.HexColumnType)">
            <summary>
            Gets the span of a column. This is empty if the column isn't present.
            </summary>
            <param name="column">Column</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ValuesGroup">
            <summary>
            Values group collection. It's empty if the values column isn't present.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.AsciiGroup">
            <summary>
            ASCII group collection. It's empty if the ASCII column isn't present.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.CharsPerLine">
            <summary>
            Number of characters per line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.BytesPerLine">
            <summary>
            Number of bytes per line or 0 to fit to width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.GroupSizeInBytes">
            <summary>
            Number of bytes per group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ShowOffset">
            <summary>
            true to show the offset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.OffsetLowerCaseHex">
            <summary>
            true to use lower case hex
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.OffsetFormat">
            <summary>
            Offset format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.StartPosition">
            <summary>
            First position to show
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.EndPosition">
            <summary>
            End position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.BasePosition">
            <summary>
            Base position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.UseRelativePositions">
            <summary>
            true if all visible positions are relative to <see cref="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.StartPosition"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ShowValues">
            <summary>
            true to show the values
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ValuesLowerCaseHex">
            <summary>
            true to use lower case hex
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.OffsetBitSize">
            <summary>
            Number of bits of the offset to show
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ValuesFormat">
            <summary>
            Values format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.BytesPerValue">
            <summary>
            Number of bytes per value in the values column
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ShowAscii">
            <summary>
            true to show ASCII chars
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.ColumnOrder">
            <summary>
            Column order
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetCharsPerCell(dnSpy.Contracts.Hex.HexColumnType)">
            <summary>
            Gets the number of characters per cell value. This value doesn't include any cell separators
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetCharsPerCellIncludingSeparator(dnSpy.Contracts.Hex.HexColumnType)">
            <summary>
            Gets the total number of characters per cell. This includes cell separators if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetBufferPositionFromLineNumber(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets the buffer position of a line
            </summary>
            <param name="lineNumber">Line number</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetLineFromLineNumber(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns a line
            </summary>
            <param name="lineNumber">Line number</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetLineFromPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Creates a line
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetLineNumberFromPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Gets the line number
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.ToLogicalPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Converts a physical (stream) position to a logical position
            </summary>
            <param name="physicalPosition">Physical (stream) position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.ToPhysicalPosition(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Converts a logical position to a physical (stream) position
            </summary>
            <param name="logicalPosition">Logical position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.IsValidPosition(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Returns true if <paramref name="position"/> is a valid position that can be passed to
            methods expecting a (physical) position.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.FilterAndVerify(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Filters the position so it's less than <see cref="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.EndPosition"/> if it equals <see cref="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.EndPosition"/>.
            It will throw if <see cref="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.IsValidPosition(dnSpy.Contracts.Hex.HexBufferPoint)"/> returns false.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetValueBufferSpan(dnSpy.Contracts.Hex.HexCell,System.Int32)">
            <summary>
            Gets a buffer span within a cell
            </summary>
            <param name="cell">Cell</param>
            <param name="cellPosition">Position within the cell</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferLineFormatter.CanEditValueCell">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.EditValueCell(dnSpy.Contracts.Hex.HexCell,System.Int32,System.Char)"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.EditValueCell(dnSpy.Contracts.Hex.HexCell,System.Int32,System.Char)">
            <summary>
            Edits a value cell. Returns null if editing isn't supported or if the character
            isn't a valid input character (eg. it's not a hex digit character), else it
            returns the position in the buffer and new value.
            </summary>
            <param name="cell">Cell</param>
            <param name="cellPosition">Position within the cell</param>
            <param name="c">Character</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatter.GetFormattedOffset(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns the offset as a string
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferLineFormatterFactoryService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.HexBufferLineFormatter"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatterFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferLineFormatterFactoryService.Create(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexBufferLineFormatterOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.HexBufferLineFormatter"/> instance
            </summary>
            <param name="buffer">Buffer</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferPoint">
            <summary>
            Contains a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/> and a position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferPoint.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferPoint.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferPoint.Position">
            <summary>
            Gets the position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="position">Position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.op_Implicit(dnSpy.Contracts.Hex.HexBufferPoint)~dnSpy.Contracts.Hex.HexPosition">
            <summary>
            Converts <paramref name="point"/> to a <see cref="T:dnSpy.Contracts.Hex.HexPosition"/>
            </summary>
            <param name="point">Point</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.GetByte">
            <summary>
            Gets the byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.TryGetByte">
            <summary>
            Gets the <see cref="T:System.Byte"/> or a value less than 0 if there's no data at <see cref="P:dnSpy.Contracts.Hex.HexBufferPoint.Position"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.Add(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Add <paramref name="value"/>
            </summary>
            <param name="value">Value to add</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.Subtract(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Subtract <paramref name="value"/>
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.Difference(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Returns the difference of <paramref name="other"/> with this instance
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.CompareTo(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Compares this instance with <paramref name="other"/>
            </summary>
            <param name="other">Ohter instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.Equals(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferPoint.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferSpan">
            <summary>
            Contains a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/> and a <see cref="T:dnSpy.Contracts.Hex.HexSpan"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.Length">
            <summary>
            Gets the length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.IsFull">
            <summary>
            true if this span covers everything from 0 to 2^64-1, inclusive
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.IsEmpty">
            <summary>
            true if it's an empty span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.Start">
            <summary>
            Gets the start point
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpan.End">
            <summary>
            Gets the end point. This can be 0 if the last byte is at position 2^64-1
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexPosition,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="start">Start point</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.#ctor(dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start position</param>
            <param name="end">End position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.#ctor(dnSpy.Contracts.Hex.HexBufferPoint,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start point</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.FromBounds(dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Hex.HexBufferSpan"/> instance
            </summary>
            <param name="start">Start point</param>
            <param name="end">End point</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.op_Implicit(dnSpy.Contracts.Hex.HexBufferSpan)~dnSpy.Contracts.Hex.HexSpan">
            <summary>
            Converts this instance to a <see cref="T:dnSpy.Contracts.Hex.HexSpan"/>
            </summary>
            <param name="hexBufferSpan"></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.GetData">
            <summary>
            Gets the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Contains(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Returns true if <paramref name="point"/> lies within this span
            </summary>
            <param name="point">Point</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Contains(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if <paramref name="span"/> lies within this span
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Contains(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if <paramref name="span"/> lies within this span
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Contains(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns true if <paramref name="position"/> lies within this span
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.OverlapsWith(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if this instances overlaps with <paramref name="span"/>
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.OverlapsWith(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if this instances overlaps with <paramref name="span"/>
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Overlap(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Gets the overlap with <paramref name="span"/> or null if there's none
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Overlap(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Gets the overlap with <paramref name="span"/> or null if there's none
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.IntersectsWith(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if <paramref name="span"/> intersects with this instance
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.IntersectsWith(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if <paramref name="span"/> intersects with this instance
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Intersection(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns the intersection or null if there's none
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Intersection(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns the intersection or null if there's none
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.op_Equality(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            operator ==()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.op_Inequality(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            operator !=()
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Equals(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpan.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferSpanEventArgs">
            <summary>
            Hex buffer span event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferSpanEventArgs.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferSpanEventArgs.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferStream">
            <summary>
            A stream used by a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferStream.IsVolatile">
            <summary>
            true if the content can change at any time
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferStream.IsReadOnly">
            <summary>
            true if it's a read-only stream
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferStream.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferStream.Name">
            <summary>
            Gets the name. This could be the filename if the data was read from a file
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBufferStream.BufferStreamSpanInvalidated">
            <summary>
            Raised when a span of data got modified by other code
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ClearCache">
            <summary>
            Clears the cache if it uses a cache
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.GetSpanInfo(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets information about a position in the stream
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.GetSpanInfo(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Gets information about a position in the stream
            </summary>
            <param name="position">Position</param>
            <param name="validSpan">Span of all valid data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.TryReadByte(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Tries to read a <see cref="T:System.Byte"/>. If there's no data, a value less than 0 is returned.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadByte(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Byte"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadSByte(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.SByte"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadInt16(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadUInt16(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadInt32(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadUInt32(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadInt64(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadUInt64(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadSingle(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadDouble(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadInt16BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadUInt16BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadInt32BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadUInt32BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadInt64BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadUInt64BigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadSingleBigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadDoubleBigEndian(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadBytes(dnSpy.Contracts.Hex.HexPosition,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="length">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadBytes(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="destination">Destination array</param>
            <param name="destinationIndex">Index</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.ReadHexBytes(dnSpy.Contracts.Hex.HexPosition,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="position">Position</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.Write(dnSpy.Contracts.Hex.HexPosition,System.Byte[])">
            <summary>
            Writes bytes
            </summary>
            <param name="position">Position</param>
            <param name="source">Data</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.Write(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Writes bytes
            </summary>
            <param name="position">Position</param>
            <param name="source">Data</param>
            <param name="sourceIndex">Index</param>
            <param name="length">Length</param>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexBufferStream.Disposed">
            <summary>
            Raised after it is disposed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferStream.IsDisposed">
            <summary>
            true if the instance has been disposed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStream.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferStreamSpanInvalidatedEventArgs">
            <summary>
            Invalidated span event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBufferStreamSpanInvalidatedEventArgs.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamSpanInvalidatedEventArgs.#ctor(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBufferStreamFactoryService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.HexBufferStream"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamFactoryService.Create(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexBufferStream"/>
            </summary>
            <param name="filename">Filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamFactoryService.Create(System.Byte[],System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexBufferStream"/>
            </summary>
            <param name="data">Data</param>
            <param name="name">Name, can be anything and is usually the filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamFactoryService.CreateCached(dnSpy.Contracts.Hex.HexSimpleBufferStream,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexBufferStream"/>
            </summary>
            <param name="simpleStream">Underlying stream</param>
            <param name="disposeStream">true if the returned stream owns <paramref name="simpleStream"/> and
            disposes it when the returned stream gets disposed</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamFactoryService.CreateCachedProcessStream(System.IntPtr,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a process stream
            </summary>
            <param name="hProcess">Process handle</param>
            <param name="name">Name or null to use the default name</param>
            <param name="isReadOnly">true if it's read only</param>
            <param name="isVolatile">true if the memory can be changed by other code</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBufferStreamFactoryService.CreateSimpleProcessStream(System.IntPtr,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a process stream
            </summary>
            <param name="hProcess">Process handle</param>
            <param name="name">Name or null to use the default name</param>
            <param name="isReadOnly">true if it's read only</param>
            <param name="isVolatile">true if the memory can be changed by other code</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexBytes">
            <summary>
            Contains bytes and information about whether a byte exists in the stream
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexBytes.Empty">
            <summary>
            Gets the empty instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBytes.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBytes.Length">
            <summary>
            Gets the length in bytes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBytes.AllValid">
            <summary>
            Returns true if all bytes are valid, false if all bytes are invalid, or null
            if it's not known (use <see cref="M:dnSpy.Contracts.Hex.HexBytes.IsValid(System.Int32)"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="bytes">All bytes and all of them are valid</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bytes">All bytes</param>
            <param name="allValid">true if all bytes are valid, false if all bytes are invalid</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.#ctor(System.Byte[],System.Collections.BitArray)">
            <summary>
            Constructor
            </summary>
            <param name="bytes">All bytes. All invalid bytes should be cleared</param>
            <param name="validBytes">Valid bytes</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.IsValid(System.Int32)">
            <summary>
            Checks whether the byte at <paramref name="index"/> is valid
            </summary>
            <param name="index">Index of byte</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.IsValid(System.Int64)">
            <summary>
            Checks whether the byte at <paramref name="index"/> is valid
            </summary>
            <param name="index">Index of byte</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadByte(System.Int32)">
            <summary>
            Returns the byte at <paramref name="index"/> or a value less than 0 if the byte is invalid
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadByte(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Byte"/> at <paramref name="index"/> or a value less than 0 if the byte is invalid
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBytes.Item(System.Int32)">
            <summary>
            Reads the byte at <paramref name="index"/>
            </summary>
            <param name="index">Index of byte</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexBytes.Item(System.Int64)">
            <summary>
            Reads the byte at <paramref name="index"/>
            </summary>
            <param name="index">Index of byte</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadSByte(System.Int64)">
            <summary>
            Returns the <see cref="T:System.SByte"/> at <paramref name="index"/> or null if the byte is invalid
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadUInt16(System.Int64)">
            <summary>
            Returns the <see cref="T:System.UInt16"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadInt16(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Int16"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadUInt32(System.Int64)">
            <summary>
            Returns the <see cref="T:System.UInt32"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadInt32(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Int32"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadUInt64(System.Int64)">
            <summary>
            Returns the <see cref="T:System.UInt64"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadInt64(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Int64"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadSingle(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Single"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadDouble(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Double"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadUInt16BigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.UInt16"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadInt16BigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Int16"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadUInt32BigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.UInt32"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadInt32BigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Int32"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadUInt64BigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.UInt64"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadInt64BigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Int64"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadSingleBigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Single"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.TryReadDoubleBigEndian(System.Int64)">
            <summary>
            Returns the <see cref="T:System.Double"/> at <paramref name="index"/> or null if all bytes are invalid
            </summary>
            <param name="index">Index of value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexBytes.ReadBytes(System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Reads bytes
            </summary>
            <param name="index">Index of data</param>
            <param name="destination">Destination array</param>
            <param name="destinationIndex">Index in <paramref name="destination"/></param>
            <param name="length">Number of bytes to copy</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexChange">
            <summary>
            A <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/> change
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexChange.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.Delta">
            <summary>
            Gets the difference in buffer length after the change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.NewData">
            <summary>
            Gets the new data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.NewPosition">
            <summary>
            Gets the new position after the hex change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.NewEnd">
            <summary>
            Gets the new end position after the hex change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.NewLength">
            <summary>
            Gets the new length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.NewSpan">
            <summary>
            Gets the span after the hex change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.OldData">
            <summary>
            Gets the old data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.OldPosition">
            <summary>
            Gets the old position before the hex change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.OldEnd">
            <summary>
            Gets the old end position before the hex change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.OldLength">
            <summary>
            Gets the old length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexChange.OldSpan">
            <summary>
            Gets the span before the hex change
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexContentChangedEventArgs">
            <summary>
            Hex content changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexContentChangedEventArgs.Changes">
            <summary>
            Gets the changes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexContentChangedEventArgs.#ctor(dnSpy.Contracts.Hex.HexVersion,dnSpy.Contracts.Hex.HexVersion,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="beforeVersion">Version before the change</param>
            <param name="afterVersion">Version after the change</param>
            <param name="editTag">Edit tag</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexContentChangingEventArgs">
            <summary>
            Hex content changing event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexContentChangingEventArgs.Canceled">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Hex.HexContentChangingEventArgs.Cancel"/> has been called
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexContentChangingEventArgs.BeforeVersion">
            <summary>
            Version before the change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexContentChangingEventArgs.EditTag">
            <summary>
            Edit tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexContentChangingEventArgs.#ctor(dnSpy.Contracts.Hex.HexVersion,System.Object,System.Action{dnSpy.Contracts.Hex.HexContentChangingEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="beforeVersion">Version before the change</param>
            <param name="editTag">Edit tag</param>
            <param name="cancelAction">Called when <see cref="M:dnSpy.Contracts.Hex.HexContentChangingEventArgs.Cancel"/> gets called</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexContentChangingEventArgs.Cancel">
            <summary>
            Cancels the edit
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexEdit">
            <summary>
            Edits a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexEdit.Canceled">
            <summary>
            true if this edit has been canceled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexEdit.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexEdit.HasEffectiveChanges">
            <summary>
            true if the edit has changes in non-read-only regions
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexEdit.HasFailedChanges">
            <summary>
            true if any changes failed to be added to this edit due to read-only regions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Byte)">
            <summary>
            Replaces the <see cref="T:System.Byte"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.SByte)">
            <summary>
            Replaces the <see cref="T:System.SByte"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Int16)">
            <summary>
            Replaces the <see cref="T:System.Int16"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.UInt16)">
            <summary>
            Replaces the <see cref="T:System.UInt16"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Int32)">
            <summary>
            Replaces the <see cref="T:System.Int32"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.UInt32)">
            <summary>
            Replaces the <see cref="T:System.UInt32"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Int64)">
            <summary>
            Replaces the <see cref="T:System.Int64"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.UInt64)">
            <summary>
            Replaces the <see cref="T:System.UInt64"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Single)">
            <summary>
            Replaces the <see cref="T:System.Single"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Double)">
            <summary>
            Replaces the <see cref="T:System.Double"/> at <paramref name="position"/> with <paramref name="value"/>
            </summary>
            <param name="position">Position</param>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Byte[])">
            <summary>
            Replaces the data at <paramref name="position"/> with <paramref name="data"/>
            </summary>
            <param name="position">Position</param>
            <param name="data">New data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Replace(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Replaces the data at <paramref name="position"/> with <paramref name="data"/>
            </summary>
            <param name="position">Position</param>
            <param name="data">New data</param>
            <param name="index">Index</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Apply">
            <summary>
            Commits all the modifications
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Cancel">
            <summary>
            Cancels all modifications
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexEdit.Dispose">
            <summary>
            Disposes this instance. If <see cref="M:dnSpy.Contracts.Hex.HexEdit.Apply"/> hasn't been called, the hex edit operation is canceled
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexPosition">
            <summary>
            A position in a <see cref="T:dnSpy.Contracts.Hex.HexBufferStream"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexPosition.Zero">
            <summary>
            Gets the value 0
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexPosition.MinValue">
            <summary>
            Gets the minimum value (0)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexPosition.MaxValue">
            <summary>
            Gets the maximum value (2^128-1)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexPosition.MaxEndPosition">
            <summary>
            Max end position (2^64)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="highValue">High 64 bits of the value</param>
            <param name="lowValue">Low 64 bits of the value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.#ctor(System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.ToUInt64">
            <summary>
            Converts the value to a <see cref="T:System.UInt64"/>, truncating the result if it doesn't fit in 64 bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.Max(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns the larger of two values
            </summary>
            <param name="val1">First value</param>
            <param name="val2">Second value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.Min(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns the smaller of two values
            </summary>
            <param name="val1">First value</param>
            <param name="val2">Second value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.CompareTo(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Compares this instance with <paramref name="other"/>. Returns less than 0, 0, or greater
            than 0 depending on whether this instance is less than, equal to, or greather than
            <paramref name="other"/>.
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.Equals(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Compares this instance with <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.Equals(System.Object)">
            <summary>
            Compares this instance with <paramref name="obj"/>
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.GetHashCode">
            <summary>
            Gets the hash code of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.ToString">
            <summary>
            Gets the value as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.Parse(System.String)">
            <summary>
            Parses a string and creates new <see cref="T:dnSpy.Contracts.Hex.HexPosition"/>
            </summary>
            <param name="value">String</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPosition.TryParse(System.String,dnSpy.Contracts.Hex.HexPosition@)">
            <summary>
            Tries to parse a string and creates a <see cref="T:dnSpy.Contracts.Hex.HexPosition"/>
            </summary>
            <param name="value">String</param>
            <param name="result">Result</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexPositionConverter">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.HexPosition"/> converter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPositionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexPositionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexSimpleBufferStream">
            <summary>
            A buffer stream with less methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSimpleBufferStream.IsVolatile">
            <summary>
            true if the content can change at any time
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSimpleBufferStream.IsReadOnly">
            <summary>
            true if it's a read-only stream
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSimpleBufferStream.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSimpleBufferStream.Name">
            <summary>
            Gets the name. This could be the filename if the data was read from a file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSimpleBufferStream.PageSize">
            <summary>
            Gets the page size of the underlying data store or 0 if it's unknown. Eg. if it's
            memory in some process, <see cref="P:System.Environment.SystemPageSize"/> can be returned
            here. The returned value must be 0 or a power of 2.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.GetSpanInfo(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Gets information about a position in the stream
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.GetSpanInfo(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Gets information about a position in the stream
            </summary>
            <param name="position">Position</param>
            <param name="validSpan">Span of all valid data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.Read(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Reads bytes. Returns number of bytes read.
            </summary>
            <param name="position">Position</param>
            <param name="destination">Destination array</param>
            <param name="destinationIndex">Index</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.Write(dnSpy.Contracts.Hex.HexPosition,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Writes bytes. Returns number of bytes written.
            </summary>
            <param name="position">Position</param>
            <param name="source">Data</param>
            <param name="sourceIndex">Index</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.ClearCache">
            <summary>
            Clears the cache if it uses a cache
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.HexSimpleBufferStream.Disposed">
            <summary>
            Raised after it is disposed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSimpleBufferStream.IsDisposed">
            <summary>
            true if the instance has been disposed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSimpleBufferStream.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexSpan">
            <summary>
            A span in a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpan.FullSpan">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Hex.HexSpan"/> instance that covers everything from 0 to 2^64-1, inclusive
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpan.IsFull">
            <summary>
            true if this span covers everything from 0 to 2^64-1, inclusive
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpan.IsEmpty">
            <summary>
            true if it's an empty span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpan.Length">
            <summary>
            Gets the length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpan.Start">
            <summary>
            Gets the start of the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpan.End">
            <summary>
            Gets the end of the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.#ctor(dnSpy.Contracts.Hex.HexPosition,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="start">Position</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.FromBounds(dnSpy.Contracts.Hex.HexPosition,dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.HexSpan"/>
            </summary>
            <param name="start">Start position</param>
            <param name="end">End position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.Contains(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if <paramref name="span"/> lies within this span
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.Contains(dnSpy.Contracts.Hex.HexPosition)">
            <summary>
            Returns true if <paramref name="position"/> lies within this span
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.Intersection(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns the intersection or null if there's none
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.IntersectsWith(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if <paramref name="span"/> intersects with this instance
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.Overlap(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Gets the overlap with <paramref name="span"/> or null if there's none
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.OverlapsWith(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if this instances overlaps with <paramref name="span"/>
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.op_Equality(dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            operator ==()
            </summary>
            <param name="left">Left</param>
            <param name="right">Right</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.op_Inequality(dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            operator !=()
            </summary>
            <param name="left">Left</param>
            <param name="right">Right</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.Equals(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpan.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexSpanInfoFlags">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.HexSpanInfo"/> flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanInfoFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanInfoFlags.HasData">
            <summary>
            Set if the span contains data, clear if the span doesn't contain any data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexSpanInfo">
            <summary>
            Information about a span in a <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpanInfo.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpanInfo.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexSpanInfo.HasData">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Hex.HexSpanInfo.Span"/> contains data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexSpanInfo.#ctor(dnSpy.Contracts.Hex.HexSpan,dnSpy.Contracts.Hex.HexSpanInfoFlags)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexSpanSelectionFlags">
            <summary>
            Span selection flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Offset">
            <summary>
            Offset column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Values">
            <summary>
            Values column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Ascii">
            <summary>
            ASCII column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Group0">
            <summary>
            Cells in group #0
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Group1">
            <summary>
            Cells in group #1
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Cell">
            <summary>
            Select the full cell instead of only the text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Separator">
            <summary>
            Include the cell separator, if any
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.OneValue">
            <summary>
            One value at a time
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.AllCells">
            <summary>
            Select all cells in the values/ASCII column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.AllVisibleCells">
            <summary>
            Select all visible cells in the values/ASCII column
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexSpanSelectionFlags.Selection">
            <summary>
            Same as selection, select full cells and cells in values and ASCII columns
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexTags">
            <summary>
            Hex buffer tags
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexTags.Contains(System.String)">
            <summary>
            Checks whether <paramref name="tag"/> exists in the collection
            </summary>
            <param name="tag">Tag</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexTags.GetEnumerator">
            <summary>
            Gets all tags
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexValuesDisplayFormat">
            <summary>
            Hex bytes display format
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexByte">
            <summary>
            Hex, <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexUInt16">
            <summary>
            Hex, <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexUInt32">
            <summary>
            Hex, <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexUInt64">
            <summary>
            Hex, <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexSByte">
            <summary>
            Hex, <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexInt16">
            <summary>
            Hex, <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexInt32">
            <summary>
            Hex, <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexInt64">
            <summary>
            Hex, <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalByte">
            <summary>
            Decimal, <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalUInt16">
            <summary>
            Decimal, <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalUInt32">
            <summary>
            Decimal, <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalUInt64">
            <summary>
            Decimal, <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalSByte">
            <summary>
            Decimal, <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalInt16">
            <summary>
            Decimal, <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalInt32">
            <summary>
            Decimal, <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalInt64">
            <summary>
            Decimal, <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.Single">
            <summary>
            <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.Double">
            <summary>
            <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.Bit8">
            <summary>
            8 bits
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexUInt16BigEndian">
            <summary>
            Hex, <see cref="T:System.UInt16"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexUInt32BigEndian">
            <summary>
            Hex, <see cref="T:System.UInt32"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexUInt64BigEndian">
            <summary>
            Hex, <see cref="T:System.UInt64"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexInt16BigEndian">
            <summary>
            Hex, <see cref="T:System.Int16"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexInt32BigEndian">
            <summary>
            Hex, <see cref="T:System.Int32"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.HexInt64BigEndian">
            <summary>
            Hex, <see cref="T:System.Int64"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalUInt16BigEndian">
            <summary>
            Decimal, <see cref="T:System.UInt16"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalUInt32BigEndian">
            <summary>
            Decimal, <see cref="T:System.UInt32"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalUInt64BigEndian">
            <summary>
            Decimal, <see cref="T:System.UInt64"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalInt16BigEndian">
            <summary>
            Decimal, <see cref="T:System.Int16"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalInt32BigEndian">
            <summary>
            Decimal, <see cref="T:System.Int32"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DecimalInt64BigEndian">
            <summary>
            Decimal, <see cref="T:System.Int64"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.SingleBigEndian">
            <summary>
            <see cref="T:System.Single"/>, Big Endian
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.HexValuesDisplayFormat.DoubleBigEndian">
            <summary>
            <see cref="T:System.Double"/>, Big Endian
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexVersion">
            <summary>
            <see cref="P:dnSpy.Contracts.Hex.HexVersion.Buffer"/> version
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexVersion.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersion.Buffer">
            <summary>
            Gets the <see cref="P:dnSpy.Contracts.Hex.HexVersion.Buffer"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersion.Changes">
            <summary>
            Gets all hex changes or null if this is the latest version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersion.Next">
            <summary>
            Next version or null if this is the latest version
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersion.VersionNumber">
            <summary>
            Version number
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersion.ReiteratedVersionNumber">
            <summary>
            Re-iterated version number used by undo/redo
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.HexVersionChangedEventArgs">
            <summary>
            Hex version changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersionChangedEventArgs.BeforeVersion">
            <summary>
            Version before the change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersionChangedEventArgs.AfterVersion">
            <summary>
            Version after the change
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.HexVersionChangedEventArgs.EditTag">
            <summary>
            Edit tag passed to <see cref="M:dnSpy.Contracts.Hex.HexBuffer.CreateEdit(System.Nullable{System.Int32},System.Object)"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.HexVersionChangedEventArgs.#ctor(dnSpy.Contracts.Hex.HexVersion,dnSpy.Contracts.Hex.HexVersion,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="beforeVersion">Version before the change</param>
            <param name="afterVersion">Version after the change</param>
            <param name="editTag">Edit tag</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseController">
            <summary>
            Intellisense controller
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseController.Detach(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Detaches from <paramref name="hexView"/>
            </summary>
            <param name="hexView">Hex view</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseControllerProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseController"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseControllerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseControllerProvider.TryCreateIntellisenseController(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseController"/> or returns null
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter">
            <summary>
            Intellisense presenter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter.Session">
            <summary>
            Gets the session
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.IHexIntellisensePresenter">
            <summary>
            Intellisense presenter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexIntellisensePresenter.Session">
            <summary>
            Gets the session
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenterProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenterProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenterProvider.TryCreateIntellisensePresenter(dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter"/> or returns null
            </summary>
            <param name="session">Session</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession">
            <summary>
            Intellisense session
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Properties">
            <summary>
            Gets all properties
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.TriggerPoint">
            <summary>
            Gets the trigger point
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Presenter">
            <summary>
            Gets the presenter
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.PresenterChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Presenter"/> is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Start">
            <summary>
            Starts the session
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Dismiss">
            <summary>
            Dismisses the session
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Dismissed">
            <summary>
            Raised after <see cref="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Dismiss"/> is called
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.IsDismissed">
            <summary>
            true if the session has been dismissed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Recalculate">
            <summary>
            Recalculates the state
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Recalculated">
            <summary>
            Raised after <see cref="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Recalculate"/> is called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Match">
            <summary>
            Tries to get a match
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession.Collapse">
            <summary>
            Collapses the UI, or if it's not collapsible, closes the UI
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack">
            <summary>
            Intellisense session stack
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.PushSession(dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession)">
            <summary>
            Adds a session to the top of the stack
            </summary>
            <param name="session">Session</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.PopSession">
            <summary>
            Removes the session from the top of the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.MoveSessionToTop(dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSession)">
            <summary>
            Moves a session to the top of the stack
            </summary>
            <param name="session">Session</param>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.Sessions">
            <summary>
            Gets all sessions
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.TopSession">
            <summary>
            Gets the session at the top of the stack or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack.CollapseAllSessions">
            <summary>
            Collapses all sessions
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStackMapService">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack"/> service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStackMapService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStackMapService.GetStackForHexView(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSessionStack"/> instance
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSpaceReservationManagerNames">
            <summary>
            Intellisense <see cref="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Intellisense.HexIntellisenseSpaceReservationManagerNames.QuickInfoSpaceReservationManagerName">
            <summary>
            Quick info
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker">
            <summary>
            Quick info broker
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker.IsQuickInfoActive(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Returns true if quick info is active in <paramref name="hexView"/>
            </summary>
            <param name="hexView">Hex view to check</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker.TriggerQuickInfo(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Triggers a quick info session
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker.TriggerQuickInfo(dnSpy.Contracts.Hex.Editor.HexView,dnSpy.Contracts.Hex.HexCellPosition,System.Boolean)">
            <summary>
            Triggers a quick info session
            </summary>
            <param name="hexView">Hex view</param>
            <param name="triggerPoint">Trigger point</param>
            <param name="trackMouse">true to track the mouse</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker.CreateQuickInfoSession(dnSpy.Contracts.Hex.Editor.HexView,dnSpy.Contracts.Hex.HexCellPosition,System.Boolean)">
            <summary>
            Creates a quick info session
            </summary>
            <param name="hexView">Hex view</param>
            <param name="triggerPoint">Trigger point</param>
            <param name="trackMouse">true to track the mouse</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoBroker.GetSessions(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets all active quick info sessions in <paramref name="hexView"/>
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession">
            <summary>
            Quick info session
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.QuickInfoContent">
            <summary>
            Gets the quick info content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.ApplicableToSpan">
            <summary>
            Gets the applicable-to span
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.ApplicableToSpanChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.ApplicableToSpan"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.TrackMouse">
            <summary>
            true if the mouse is tracked
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession.HasInteractiveContent">
            <summary>
            true if it has interactive content
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource">
            <summary>
            Quick info source
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource.AugmentQuickInfoSession(dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSession,System.Collections.Generic.IList{System.Object},dnSpy.Contracts.Hex.HexBufferSpanSelection@)">
            <summary>
            Augments the quick info session
            </summary>
            <param name="session">Session</param>
            <param name="quickInfoContent">Updated with new content</param>
            <param name="applicableToSpan">Updated with applicable-to span or the default value if nothing was added to <paramref name="quickInfoContent"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSourceProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSourceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSourceProvider.TryCreateQuickInfoSource(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexQuickInfoSource"/> or returns null
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.IHexCustomIntellisensePresenter">
            <summary>
            Custom <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Intellisense.IHexCustomIntellisensePresenter.Render">
            <summary>
            Renders the UI
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.IHexInteractiveQuickInfoContent">
            <summary>
            Can be implemented by quick info content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexInteractiveQuickInfoContent.KeepQuickInfoOpen">
            <summary>
            true to keep quick info open
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexInteractiveQuickInfoContent.IsMouseOverAggregated">
            <summary>
            true if mouse is over the content
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter">
            <summary>
            Popup <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenter"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.SurfaceElement">
            <summary>
            Gets the UI element
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.SurfaceElementChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.SurfaceElement"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.PresentationSpan">
            <summary>
            Gets the presentation span
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.PresentationSpanChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.PresentationSpan"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.PopupStyles">
            <summary>
            Gets the popup style
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.PopupStylesChanged">
            <summary>
            Raised after <see cref="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.PopupStyles"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.SpaceReservationManagerName">
            <summary>
            Gets the name of the <see cref="T:dnSpy.Contracts.Hex.Editor.HexSpaceReservationManager"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Intellisense.IHexPopupIntellisensePresenter.Opacity">
            <summary>
            Gets/sets the opacity
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Intellisense.PredefinedHexIntellisensePresenterProviders">
            <summary>
            Names of <see cref="T:dnSpy.Contracts.Hex.Intellisense.HexIntellisensePresenterProvider"/>s
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Intellisense.PredefinedHexIntellisensePresenterProviders.DefaultQuickInfoPresenter">
            <summary>
            Name of default quick info presenter provider
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection">
            <summary>
            Normalized <see cref="T:dnSpy.Contracts.Hex.HexBufferSpan"/> collection
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.Empty">
            <summary>
            An empty collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.NormalizedHexSpanCollection)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="spans">Spans</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.#ctor(dnSpy.Contracts.Hex.HexBuffer,System.Collections.Generic.IEnumerable{dnSpy.Contracts.Hex.HexSpan})">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="spans">Spans</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.#ctor(dnSpy.Contracts.Hex.HexBuffer,dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Buffer</param>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.#ctor(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Hex.HexBufferSpan})">
            <summary>
            Constructor
            </summary>
            <param name="spans">Spans</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.op_Implicit(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)~dnSpy.Contracts.Hex.NormalizedHexSpanCollection">
            <summary>
            implicit operator NormalizedHexSpanCollection
            </summary>
            <param name="spans"></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.OverlapsWith(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if any of the spans in this instance overlaps with <paramref name="span"/>
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.IntersectsWith(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns true if any of the spans in this instance intersects with <paramref name="span"/>
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.Item(System.Int32)">
            <summary>
            Gets the span at <paramref name="index"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.op_Equality(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)">
            <summary>
            operator ==()
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.op_Inequality(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)">
            <summary>
            operator !=()
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.Equals(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.NormalizedHexChangeCollection">
            <summary>
            A normalized read-only <see cref="T:dnSpy.Contracts.Hex.HexChange"/> collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.Item(System.Int32)">
            <summary>
            Gets 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.Count">
            <summary>
            Gets the number of elements in this collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.Create(dnSpy.Contracts.Hex.HexChange)">
            <summary>
            Creates an instance
            </summary>
            <param name="change">Change</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.Create(System.Collections.Generic.IList{dnSpy.Contracts.Hex.HexChange})">
            <summary>
            Creates an instance
            </summary>
            <param name="changes">Changes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.Contains(dnSpy.Contracts.Hex.HexChange)">
            <summary>
            Returns true if <paramref name="item"/> is a part of this collection
            </summary>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.IndexOf(dnSpy.Contracts.Hex.HexChange)">
            <summary>
            Returns the index of <paramref name="item"/> in this collection or a value less than 0 if it's not a part of this collection
            </summary>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.CopyTo(dnSpy.Contracts.Hex.HexChange[],System.Int32)">
            <summary>
            Copies this collection to an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Destination array index</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexChangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.NormalizedHexSpanCollection">
            <summary>
            Normalized <see cref="T:dnSpy.Contracts.Hex.HexSpan"/> collection
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.Empty">
            <summary>
            An empty collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.#ctor(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.#ctor(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Hex.HexSpan})">
            <summary>
            Constructor
            </summary>
            <param name="spans">Spans</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.OverlapsWith(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if any of the spans in this instance overlaps with <paramref name="span"/>
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.IntersectsWith(dnSpy.Contracts.Hex.HexSpan)">
            <summary>
            Returns true if any of the spans in this instance intersects with <paramref name="span"/>
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.op_Equality(dnSpy.Contracts.Hex.NormalizedHexSpanCollection,dnSpy.Contracts.Hex.NormalizedHexSpanCollection)">
            <summary>
            operator ==()
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.op_Inequality(dnSpy.Contracts.Hex.NormalizedHexSpanCollection,dnSpy.Contracts.Hex.NormalizedHexSpanCollection)">
            <summary>
            operator !=()
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.Equals(dnSpy.Contracts.Hex.NormalizedHexSpanCollection)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.NormalizedHexSpanCollection.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexEditorOperations">
            <summary>
            Hex editor operations
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Operations.HexEditorOperations.HexView">
            <summary>
            Gets the hex view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Operations.HexEditorOperations.Options">
            <summary>
            Gets the editor options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ProvisionalCompositionSpan">
            <summary>
            Gets/sets the provisional composition span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Operations.HexEditorOperations.CanCopy">
            <summary>
            true if it's possible to copy text to the clipboard
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Operations.HexEditorOperations.CanPaste">
            <summary>
            true if it's possible to paste data from the clipboard
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectAndMoveCaret(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.HexBufferPoint,System.Boolean)">
            <summary>
            Selects data and moves the caret
            </summary>
            <param name="column">Column</param>
            <param name="anchorPoint">Anchor position</param>
            <param name="activePoint">Active position</param>
            <param name="alignPoints">true to align the span to include all bytes of the cells</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectAndMoveCaret(dnSpy.Contracts.Hex.HexColumnType,dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.HexBufferPoint,System.Boolean,System.Nullable{Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions})">
            <summary>
            Selects data and moves the caret
            </summary>
            <param name="column">Column</param>
            <param name="anchorPoint">Anchor position</param>
            <param name="activePoint">Active position</param>
            <param name="alignPoints">true to align the span to include all bytes of the cells</param>
            <param name="scrollOptions">Scroll options</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToNextCharacter(System.Boolean)">
            <summary>
            Moves the caret to the next character
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToPreviousCharacter(System.Boolean)">
            <summary>
            Moves the caret to the previous character
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToNextWord(System.Boolean)">
            <summary>
            Moves the caret to the next word (cell)
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToPreviousWord(System.Boolean)">
            <summary>
            Moves the caret to the previous word (cell)
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveLineUp(System.Boolean)">
            <summary>
            Move up a line
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveLineDown(System.Boolean)">
            <summary>
            Move down a line
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.PageUp(System.Boolean)">
            <summary>
            Page up
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.PageDown(System.Boolean)">
            <summary>
            Page down
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToEndOfLine(System.Boolean)">
            <summary>
            Move to the end of the line
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToStartOfLine(System.Boolean)">
            <summary>
            Move to the start of the line
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToStartOfDocument(System.Boolean)">
            <summary>
            Move to start of document
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToEndOfDocument(System.Boolean)">
            <summary>
            Move to end of document
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveCurrentLineToTop">
            <summary>
            Move current line to top of the view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveCurrentLineToBottom">
            <summary>
            Move current line to bottom of the view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToTopOfView(System.Boolean)">
            <summary>
            Move the caret to the top of the view
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToBottomOfView(System.Boolean)">
            <summary>
            Move the caret to the bottom of the view
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SwapCaretAndAnchor">
            <summary>
            Swap selection caret and anchor positions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.InsertText(System.String)">
            <summary>
            Inserts text
            </summary>
            <param name="text">Text</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectLine(dnSpy.Contracts.Hex.Formatting.HexViewLine,System.Boolean)">
            <summary>
            Selects the line
            </summary>
            <param name="viewLine">Line</param>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectCurrentWord">
            <summary>
            Selects the current word (cell)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectAll">
            <summary>
            Select all
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ExtendSelection(dnSpy.Contracts.Hex.HexBufferPoint)">
            <summary>
            Extend selection
            </summary>
            <param name="newEnd">New end position</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveCaret(dnSpy.Contracts.Hex.Formatting.HexViewLine,System.Double,System.Boolean)">
            <summary>
            Move caret to a line
            </summary>
            <param name="hexLine">Line</param>
            <param name="horizontalOffset">Horizontal offset</param>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveCaret(dnSpy.Contracts.Hex.Formatting.HexViewLine,System.Double,System.Boolean,dnSpy.Contracts.Hex.Editor.HexMoveToFlags)">
            <summary>
            Move caret to a line
            </summary>
            <param name="hexLine">Line</param>
            <param name="horizontalOffset">Horizontal offset</param>
            <param name="extendSelection">true to extend the selection</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ResetSelection">
            <summary>
            Reset selection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.CopySelectionBytes">
            <summary>
            Copy selection, bytes (as text)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.CopySelectionText">
            <summary>
            Copy selection, UI text
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.CopySpecial(dnSpy.Contracts.Hex.Operations.HexCopySpecialKind)">
            <summary>
            Copies text to the clipboard
            </summary>
            <param name="copyKind">What kind of data to copy</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.Paste">
            <summary>
            Paste
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.PasteSpecial(dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind)">
            <summary>
            Pastes data from the clipboard
            </summary>
            <param name="pasteKind">What kind of data to paste</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollUpAndMoveCaretIfNecessary">
            <summary>
            Scroll up and move caret so it's within the viewport
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollDownAndMoveCaretIfNecessary">
            <summary>
            Scroll down and move caret so it's within the viewport
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollPageUp">
            <summary>
            Page up, but don't move caret
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollPageDown">
            <summary>
            Page down, but don't move caret
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollColumnLeft">
            <summary>
            Scoll one column left
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollColumnRight">
            <summary>
            Scoll one column right
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollLineBottom">
            <summary>
            Move current line to the bottom of the view, don't move the caret
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollLineTop">
            <summary>
            Move current line to the top of the view, don't move the caret
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ScrollLineCenter">
            <summary>
            Move current line to the center of the view, don't move the caret
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ZoomTo(System.Double)">
            <summary>
            Zoom to <paramref name="zoomLevel"/>
            </summary>
            <param name="zoomLevel">Zoom level, between 20% and 400% (20.0 and 400.0)</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ToggleColumn">
            <summary>
            Toggles active column
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ClearData">
            <summary>
            Clears data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ShowAllBytes">
            <summary>
            Shows all bytes (<see cref="P:dnSpy.Contracts.Hex.HexBuffer.Span"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.ShowOnlySelectedBytes">
            <summary>
            Shows only the selected bytes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.Refresh">
            <summary>
            Refreshes the screen and clears any read caches
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectAllBytesBlock">
            <summary>
            Selects all bytes in the current block, unless the caret is in a memory hole
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToNextValidStartEnd(System.Boolean)">
            <summary>
            Move to the next closest start/end position of a block of memory
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.MoveToPreviousValidStartEnd(System.Boolean)">
            <summary>
            Move to the previous closest start/end position of a block of memory
            </summary>
            <param name="extendSelection">true to extend the selection</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.GoToCodeOrStructure">
            <summary>
            Go to high-level code (eg. decompiled code) or other high level structure
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.FollowFieldValueReference">
            <summary>
            Follows the field reference
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectNestedFile">
            <summary>
            Select the most nested file at current position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectFile">
            <summary>
            Select the non-nested file at current position
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.SelectStructure">
            <summary>
            Selects the current structure
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind">
            <summary>
            Passed to <see cref="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.CopySpecial(dnSpy.Contracts.Hex.Operations.HexCopySpecialKind)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.Utf8String">
            <summary>
            UTF-8 string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UnicodeString">
            <summary>
            Unicode string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.CSharpArray">
            <summary>
            C# array
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.VisualBasicArray">
            <summary>
            Visual Basic array
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.Value">
            <summary>
            Value at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UInt16">
            <summary>
            <see cref="T:System.UInt16"/> (little endian) at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UInt16BigEndian">
            <summary>
            <see cref="T:System.UInt16"/> (big endian) at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UInt32">
            <summary>
            <see cref="T:System.UInt32"/> (little endian) at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UInt32BigEndian">
            <summary>
            <see cref="T:System.UInt32"/> (big endian) at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UInt64">
            <summary>
            <see cref="T:System.UInt64"/> (little endian) at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.UInt64BigEndian">
            <summary>
            <see cref="T:System.UInt64"/> (big endian) at caret
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.FileOffset">
            <summary>
            File offset. If it's a PE file, the position is converted to a position
            within the PE file on disk. If it's not a PE file, it's the offset relative
            to the start of the file.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.AbsoluteFileOffset">
            <summary>
            Current position
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexCopySpecialKind.RVA">
            <summary>
            RVA
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind">
            <summary>
            Passed to <see cref="M:dnSpy.Contracts.Hex.Operations.HexEditorOperations.PasteSpecial(dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind.Utf8String">
            <summary>
            UTF-8 string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind.Utf8String7BitEncodedLengthPrefix">
            <summary>
            7-bit encoded length followed by UTF-8 bytes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind.UnicodeString">
            <summary>
            Unicode (UTF-16) string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind.UnicodeString7BitEncodedLengthPrefix">
            <summary>
            7-bit encoded length followed by Unicode (UTF-16) bytes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexPasteSpecialKind.Blob">
            <summary>
            Metadata blob
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexEditorOperationsFactoryService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Operations.HexEditorOperations"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperationsFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexEditorOperationsFactoryService.GetEditorOperations(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Gets the hex view's <see cref="T:dnSpy.Contracts.Hex.Operations.HexEditorOperations"/> instance
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexFindOptions">
            <summary>
            Find options used by <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexFindOptions.None">
            <summary>
            No options have been set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexFindOptions.SearchReverse">
            <summary>
            Search in reverse direction
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexFindOptions.Wrap">
            <summary>
            Wrap around
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexFindOptions.NoOverlaps">
            <summary>
            Don't return spans that overlap a previous result. Useful by Replace All code.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexSearchService">
            <summary>
            Search service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Operations.HexSearchService.ByteCount">
            <summary>
            Gets the size of the data this instance searches for
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchService.Find(dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.Operations.HexFindOptions,System.Threading.CancellationToken)">
            <summary>
            Finds the pattern
            </summary>
            <param name="startingPosition">Starting position</param>
            <param name="options">Options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchService.Find(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.Operations.HexFindOptions,System.Threading.CancellationToken)">
            <summary>
            Finds the pattern
            </summary>
            <param name="searchRange">Search range</param>
            <param name="startingPosition">Starting position</param>
            <param name="options">Options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchService.FindAll(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.Operations.HexFindOptions,System.Threading.CancellationToken)">
            <summary>
            Finds all matches
            </summary>
            <param name="searchRange">Search range</param>
            <param name="options">Options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchService.FindAll(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexBufferPoint,dnSpy.Contracts.Hex.Operations.HexFindOptions,System.Threading.CancellationToken)">
            <summary>
            Finds all matches
            </summary>
            <param name="searchRange">Search range</param>
            <param name="startingPosition">Starting position</param>
            <param name="options">Options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> instances that can search for bytes or strings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.wildcardCharacter">
            <summary>
            The character that matches any nibble in a byte
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Byte)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.Byte"/> values
            </summary>
            <param name="value">Value to search for</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.SByte)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.SByte"/> values
            </summary>
            <param name="value">Value to search for</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Int16,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.Int16"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.UInt16,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.UInt16"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.Int32"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.UInt32,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.UInt32"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Int64,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.Int64"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.UInt64,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.UInt64"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Single,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.Single"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Double,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for <see cref="T:System.Double"/> values
            </summary>
            <param name="value">Value to search for</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for bytes. The wildcard character ? matches any nibble (upper or lower 4 bits) in a byte.
            Use <see cref="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.IsValidByteSearchString(System.String)"/> to validate the input before calling this method.
            </summary>
            <param name="pattern">Pattern. Supported characters: whitespace, hex digits and the wildcard character '?'</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.IsValidByteSearchString(System.String)">
            <summary>
            Checks whether <paramref name="pattern"/> only contains valid characters and at least one valid character
            </summary>
            <param name="pattern">Pattern</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Byte[])">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for bytes
            </summary>
            <param name="pattern">Bytes to search for</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateByteSearchService(System.Byte[],System.Byte[])">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for bytes
            </summary>
            <param name="pattern">Bytes to search for</param>
            <param name="mask">Mask used when comparing values. This array must have the same length as <paramref name="pattern"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateUtf8StringSearchService(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for UTF-8 strings
            </summary>
            <param name="pattern">Pattern to search for</param>
            <param name="isCaseSensitive">true if it's case sensitive, false if it's case insensitive</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Operations.HexSearchServiceProvider.CreateUtf16StringSearchService(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Operations.HexSearchService"/> that can search for UTF-16 strings
            </summary>
            <param name="pattern">Pattern to search for</param>
            <param name="isCaseSensitive">true if it's case sensitive, false if it's case insensitive</param>
            <param name="isBigEndian">true if big-endian, false if little-endian</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.PositionAndData">
            <summary>
            Position and data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.PositionAndData.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.PositionAndData.Position">
            <summary>
            Gets the position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.PositionAndData.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.PositionAndData.#ctor(dnSpy.Contracts.Hex.HexBufferPoint,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="position">Position</param>
            <param name="data">Data</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.PredefinedHexBufferTags">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Hex.HexBuffer"/> tags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.Memory">
            <summary>
            The underlying stream is a memory stream
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File">
            <summary>
            The underlying stream is a file or a byte array stream
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexBatchedTagsChangedEventArgs">
            <summary>
            Batched tags changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexBatchedTagsChangedEventArgs.Spans">
            <summary>
            Gets the spans
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexBatchedTagsChangedEventArgs.#ctor(System.Collections.Generic.IList{dnSpy.Contracts.Hex.HexBufferSpan})">
            <summary>
            Constructor
            </summary>
            <param name="spans">Spans</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexBufferTagAggregatorFactoryService">
            <summary>
            Hex buffer tag aggregator factory service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexBufferTagAggregatorFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexBufferTagAggregatorFactoryService.CreateTagAggregator``1(dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="buffer">Buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexClassificationTag">
            <summary>
            Classification tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexClassificationTag.ClassificationType">
            <summary>
            Gets the classification type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexClassificationTag.#ctor(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Constructor
            </summary>
            <param name="classificationType">Classification type</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexMarkerTag">
            <summary>
            Hex marker tag used by <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexAdornmentLayers.TextMarker"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexMarkerTag.Type">
            <summary>
            Gets the classification type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexMarkerTag.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Classification type</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag">
            <summary>
            Space negotiating adornment tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.Width">
            <summary>
            Gets the width
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.TopSpace">
            <summary>
            Gets the top space
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.Baseline">
            <summary>
            Gets the base line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.TextHeight">
            <summary>
            Gets the text height
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.BottomSpace">
            <summary>
            Gets the bottom space
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.Affinity">
            <summary>
            Gets the affinity
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.IdentityTag">
            <summary>
            Gets the identity tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.ProviderTag">
            <summary>
            Gets the provider tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexSpaceNegotiatingAdornmentTag.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Text.PositionAffinity,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="width">Width</param>
            <param name="topSpace">Top space</param>
            <param name="baseline">Base line</param>
            <param name="textHeight">Text height</param>
            <param name="bottomSpace">Bottom space</param>
            <param name="affinity">Affinity</param>
            <param name="identityTag">Identity tag</param>
            <param name="providerTag">Provider tag</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTag">
            <summary>
            Hex tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTag.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1">
            <summary>
            Tag aggregator
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.Buffer">
            <summary>
            Gets the buffer
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.TagsChanged">
            <summary>
            Raised after tags have changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.BatchedTagsChanged">
            <summary>
            Raised on the original thread after tags have changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetTags(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Returns all tags intersecting with <paramref name="span"/>
            </summary>
            <param name="span">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetTags(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)">
            <summary>
            Returns all tags intersecting with <paramref name="spans"/>
            </summary>
            <param name="spans">Span</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetTags(dnSpy.Contracts.Hex.HexBufferSpan,System.Threading.CancellationToken)">
            <summary>
            Returns all tags intersecting with <paramref name="span"/>. This method is synchronous.
            </summary>
            <param name="span">Span</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetTags(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Returns all tags intersecting with <paramref name="spans"/>. This method is synchronous.
            </summary>
            <param name="spans">Span</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetLineTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext)">
            <summary>
            Gets all tags intersecting with the line
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetLineTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext,System.Threading.CancellationToken)">
            <summary>
            Gets all tags intersecting with the line. This method is synchronous.
            </summary>
            <param name="context">Context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetAllTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext)">
            <summary>
            Gets all tags intersecting with the line. It merges all <see cref="T:dnSpy.Contracts.Hex.Tagging.IHexTagSpan`1"/> tags with all
            <see cref="T:dnSpy.Contracts.Hex.Tagging.IHexTextTagSpan`1"/> tags.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.GetAllTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext,System.Threading.CancellationToken)">
            <summary>
            Gets all tags intersecting with the line. It merges all <see cref="T:dnSpy.Contracts.Hex.Tagging.IHexTagSpan`1"/> tags with all
            <see cref="T:dnSpy.Contracts.Hex.Tagging.IHexTextTagSpan`1"/> tags. This method is synchronous.
            </summary>
            <param name="context">Context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1.DisposeCore">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.IHexTagger`1">
            <summary>
            Tagger
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Tagging.IHexTagger`1.TagsChanged">
            <summary>
            Raised after tags have changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.IHexTagger`1.GetTags(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)">
            <summary>
            Gets all tags intersecting with <paramref name="spans"/>
            </summary>
            <param name="spans">Spans</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.IHexTagger`1.GetTags(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets all tags intersecting with <paramref name="spans"/>. This method is synchronous.
            </summary>
            <param name="spans">Spans</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.IHexTagger`1.GetTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext)">
            <summary>
            Gets all tags
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.IHexTagger`1.GetTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext,System.Threading.CancellationToken)">
            <summary>
            Gets all tags. This method is synchronous.
            </summary>
            <param name="context">Context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTagger`1">
            <summary>
            Tagger
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagger`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Hex.Tagging.HexTagger`1.TagsChanged">
            <summary>
            Raised after tags have changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagger`1.GetTags(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection)">
            <summary>
            Gets all tags intersecting with <paramref name="spans"/>
            </summary>
            <param name="spans">Spans</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagger`1.GetTags(dnSpy.Contracts.Hex.NormalizedHexBufferSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets all tags intersecting with <paramref name="spans"/>. This method is synchronous.
            </summary>
            <param name="spans">Spans</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagger`1.GetTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext)">
            <summary>
            Gets all tags
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagger`1.GetTags(dnSpy.Contracts.Hex.Tagging.HexTaggerContext,System.Threading.CancellationToken)">
            <summary>
            Gets all tags. This method is synchronous.
            </summary>
            <param name="context">Context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTaggerContext">
            <summary>
            Hex tagger context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTaggerContext.IsDefault">
            <summary>
            true if this is a default instance that hasn't been initialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTaggerContext.Line">
            <summary>
            Gets the line info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTaggerContext.LineSpan">
            <summary>
            Line span to tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTaggerContext.#ctor(dnSpy.Contracts.Hex.HexBufferLine,Microsoft.VisualStudio.Text.Span)">
            <summary>
            Constructor
            </summary>
            <param name="line">Line info</param>
            <param name="lineSpan">Line span to tag</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTaggerProvider">
            <summary>
            Hex tagger provider
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTaggerProvider.CreateTagger``1(dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Creates a tagger or returns null
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="buffer">Hex buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTagsChangedEventArgs">
            <summary>
            Tags changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTagsChangedEventArgs.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagsChangedEventArgs.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.IHexTagSpan`1">
            <summary>
            Hex tag and span
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.IHexTagSpan`1.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.IHexTagSpan`1.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.IHexTagSpan`1.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTagSpan`1">
            <summary>
            Hex tag and span
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTagSpan`1.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTagSpan`1.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTagSpan`1.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagSpan`1.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,dnSpy.Contracts.Hex.HexSpanSelectionFlags,`0)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="flags">Flags</param>
            <param name="tag">Tag</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTagTypeAttribute">
            <summary>
            Used by taggers to declare which tag types they support
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTagTypeAttribute.TagTypes">
            <summary>
            Gets the tag type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTagTypeAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="tagType">Tag type; it must derive from <see cref="T:dnSpy.Contracts.Hex.Tagging.HexTag"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.IHexTextTagSpan`1">
            <summary>
            Text span and tag
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.IHexTextTagSpan`1.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.IHexTextTagSpan`1.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexTextTagSpan`1">
            <summary>
            Text span and tag
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTextTagSpan`1.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexTextTagSpan`1.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexTextTagSpan`1.#ctor(Microsoft.VisualStudio.Text.Span,`0)">
            <summary>
            Constructor
            </summary>
            <param name="span"></param>
            <param name="tag"></param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexToolTipStructureSpanTag">
            <summary>
            Hex tooltip structure tag, the tooltip is shown when hovering over a value in the hex view.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexToolTipStructureSpanTag.BufferSpan">
            <summary>
            Span of data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexToolTipStructureSpanTag.ToolTip">
            <summary>
            Tooltip to show or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Tagging.HexToolTipStructureSpanTag.Reference">
            <summary>
            A reference to some high level object that represents the data or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexToolTipStructureSpanTag.#ctor(dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="bufferSpan">Span of field</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexToolTipStructureSpanTag.#ctor(dnSpy.Contracts.Hex.HexBufferSpan,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="bufferSpan">Span of field</param>
            <param name="toolTip">Tooltip to show or null</param>
            <param name="reference">A reference to some high level object that represents the data or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexViewTagAggregatorFactoryService">
            <summary>
            Hex view tag aggregator factory service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexViewTagAggregatorFactoryService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexViewTagAggregatorFactoryService.CreateTagAggregator``1(dnSpy.Contracts.Hex.Editor.HexView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Hex.Tagging.HexTagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Tagging.HexViewTaggerProvider">
            <summary>
            Hex view tag aggregator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexViewTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Tagging.HexViewTaggerProvider.CreateTagger``1(dnSpy.Contracts.Hex.Editor.HexView,dnSpy.Contracts.Hex.HexBuffer)">
            <summary>
            Creates a tagger or returns null
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="hexView">Hex view</param>
            <param name="buffer">Buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.TextAndHexSpan">
            <summary>
            Text span and hex span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.TextAndHexSpan.TextSpan">
            <summary>
            Gets the text span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.TextAndHexSpan.BufferSpan">
            <summary>
            Gets the buffer span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.TextAndHexSpan.#ctor(Microsoft.VisualStudio.Text.Span,dnSpy.Contracts.Hex.HexBufferSpan)">
            <summary>
            Constructor
            </summary>
            <param name="textSpan">Text span</param>
            <param name="bufferSpan">Buffer span</param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Text.HexClassifiedText">
            <summary>
            Classified text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Text.HexClassifiedText.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Text.HexClassifiedText.Tag">
            <summary>
            Tag, see <see cref="T:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexClassifiedText.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
            <param name="tag">Tag, see <see cref="T:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Text.HexClassifiedText"/> collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Hex.Text.HexClassifiedText"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection.#ctor(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Hex.Text.HexClassifiedText})">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection.#ctor(dnSpy.Contracts.Hex.Text.HexClassifiedText[])">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexClassifiedTextCollection.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Text.HexTextWriter">
            <summary>
            Writes text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexTextWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexTextWriter.Write(System.String,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
            <param name="tag">Tag, see <see cref="T:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexTextWriter.WriteSpace">
            <summary>
            Writes a space
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Hex.Text.HexTextWriter.WriteLine">
            <summary>
            Writes a new line
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags">
            <summary>
            <see cref="T:dnSpy.Contracts.Hex.Text.HexClassifiedText"/> tags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Text">
            <summary>Normal text</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Error">
            <summary>Error</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Keyword">
            <summary>Keyword</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Number">
            <summary>Number</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.String">
            <summary>String</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Char">
            <summary>Char</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Operator">
            <summary>Operator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Punctuation">
            <summary>Punctuation</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.ArrayName">
            <summary>Array name</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.StructureName">
            <summary>Structure name</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.ValueType">
            <summary>Value type</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Enum">
            <summary>Enum type</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.EnumField">
            <summary>Enum field</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Field">
            <summary>Field</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.PathName">
            <summary>Path name</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.PathSeparator">
            <summary>Path separator</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.Filename">
            <summary>Filename without extension</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.FileDot">
            <summary>Dot between filename and extension</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.FileExtension">
            <summary>File extension</summary>
        </member>
        <member name="F:dnSpy.Contracts.Hex.Text.PredefinedClassifiedTextTags.DotNetHeapName">
            <summary>.NET heap name, eg. #GUID</summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.DsImage">
            <summary>
            Image using <see cref="T:dnSpy.Contracts.Images.IImageService"/> to load the correct image depending
            on DPI, zoom and background color
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Images.DsImage.ImageReferenceProperty">
            <summary>
            <see cref="P:dnSpy.Contracts.Images.DsImage.ImageReference"/> dependency property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.DsImage.ImageReference">
            <summary>
            Gets/sets the image reference, eg. <see cref="P:dnSpy.Contracts.Images.DsImages.Assembly"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Images.DsImage.BackgroundColorProperty">
            <summary>
            Background color attached property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.GetBackgroundColor(System.Windows.DependencyObject)">
            <summary>
            Gets the background color
            </summary>
            <param name="depo">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.SetBackgroundColor(System.Windows.DependencyObject,System.Nullable{System.Windows.Media.Color})">
            <summary>
            Sets the background color
            </summary>
            <param name="depo">Object</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="F:dnSpy.Contracts.Images.DsImage.BackgroundBrushProperty">
            <summary>
            Background brush attached property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.GetBackgroundBrush(System.Windows.DependencyObject)">
            <summary>
            Gets the background brush
            </summary>
            <param name="depo">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.SetBackgroundBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the background brush
            </summary>
            <param name="depo">Object</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="F:dnSpy.Contracts.Images.DsImage.ZoomProperty">
            <summary>
            Zoom attached property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.GetZoom(System.Windows.DependencyObject)">
            <summary>
            Gets the zoom (1.0 == 100%)
            </summary>
            <param name="depo">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.SetZoom(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the zoom (1.0 == 100%)
            </summary>
            <param name="depo">Object</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="F:dnSpy.Contracts.Images.DsImage.DpiProperty">
            <summary>
            Dpi attached property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.GetDpi(System.Windows.DependencyObject)">
            <summary>
            Gets the dpi
            </summary>
            <param name="depo">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.DsImage.SetDpi(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the dpi
            </summary>
            <param name="depo">Object</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.DsImages">
            <summary>
            Image references to images used by dnSpy
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.DsImagesAttribute">
            <summary>
            Contains image reference strings that can be used in attributes, eg. menu item attributes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.DsImageStrings">
            <summary>
            Image references to images used by dnSpy
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.IDotNetImageService">
            <summary>
            Image manager for .NET fields, types, etc
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.ModuleDef)">
            <summary>
            Gets an image
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.TypeDef)">
            <summary>
            Gets an image
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.FieldDef)">
            <summary>
            Gets an image
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.MethodDef)">
            <summary>
            Gets an image
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.EventDef)">
            <summary>
            Gets an image
            </summary>
            <param name="event">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.PropertyDef)">
            <summary>
            Gets an image
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceModuleRef">
            <summary>
            Gets a module reference image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.DotNet.AssemblyDef)">
            <summary>
            Gets an image
            </summary>
            <param name="assembly">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceAssemblyRef">
            <summary>
            Gets an assembly reference image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceGenericParameter">
            <summary>
            Gets a generic parameter image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceLocal">
            <summary>
            Gets a local image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceParameter">
            <summary>
            Gets a parameter image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceType">
            <summary>
            Gets a type image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceMethod">
            <summary>
            Gets a method image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReferenceField">
            <summary>
            Gets a field image
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetImageReference(dnlib.PE.IPEImage)">
            <summary>
            Gets an image
            </summary>
            <param name="peImage">PE image</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.IDotNetImageService.GetNamespaceImageReference">
            <summary>
            Gets a namespace image
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.IImageService">
            <summary>
            Image service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.IImageService.GetImage(dnSpy.Contracts.Images.ImageReference,dnSpy.Contracts.Images.ImageOptions)">
            <summary>
            Returns an image
            </summary>
            <param name="imageReference">Image reference</param>
            <param name="options">Image options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.IImageSourceInfoProvider">
            <summary>
            Converts <see cref="T:dnSpy.Contracts.Images.ImageReference"/>s to <see cref="T:dnSpy.Contracts.Images.ImageSourceInfo"/>s. Use
            <see cref="T:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute"/> to export an instance.
            There's usually no need to export an instance since the default implementation is
            usually enough.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.IImageSourceInfoProvider.GetImageSourceInfos(System.String)">
            <summary>
            Returns all <see cref="T:dnSpy.Contracts.Images.ImageSourceInfo"/>s or null if the next (or default)
            <see cref="T:dnSpy.Contracts.Images.IImageSourceInfoProvider"/> instance should be asked.
            </summary>
            <param name="name">Name from <see cref="P:dnSpy.Contracts.Images.ImageReference.Name"/> but with any options removed from the string</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.IImageSourceInfoProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.IImageSourceInfoProviderMetadata.Type">
            <summary>See <see cref="P:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.Type"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.IImageSourceInfoProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Images.IImageSourceInfoProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.#ctor(System.Type)">
            <summary>Constructor</summary>
            <param name="type">Some type in the assembly, eg. this <see cref="T:dnSpy.Contracts.Images.IImageSourceInfoProvider"/> type itself</param>
        </member>
        <member name="M:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.#ctor(System.Type,System.Double)">
            <summary>Constructor</summary>
            <param name="type">Some type in the assembly, eg. this <see cref="T:dnSpy.Contracts.Images.IImageSourceInfoProvider"/> type itself</param>
            <param name="order">Order of this instance</param>
        </member>
        <member name="M:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance</param>
        </member>
        <member name="P:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ExportImageSourceInfoProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Images.ImageOptions">
            <summary>
            Image options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageOptions.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageOptions.BackgroundBrush">
            <summary>
            Background brush or null. Only <see cref="T:System.Windows.Media.SolidColorBrush"/>es are supported.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageOptions.LogicalSize">
            <summary>
            Image size in logical pixels. 16x16 is used if this is 0x0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageOptions.Zoom">
            <summary>
            Total zoom applied to the element containing the image or (0,0) if the property shouldn't be used.
            1.0 == 100%
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageOptions.DpiObject">
            <summary>
            If initialized, the DPI of its containing window will be used and <see cref="P:dnSpy.Contracts.Images.ImageOptions.Dpi"/> doesn't have to be initialized.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageOptions.Dpi">
            <summary>
            DPI or (0,0) to use the default DPI (DPI of main window)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageOptions.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructor
            </summary>
            <param name="textView">Text view with which to initialize <see cref="P:dnSpy.Contracts.Images.ImageOptions.Zoom"/> and <see cref="P:dnSpy.Contracts.Images.ImageOptions.DpiObject"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Images.ImageReference">
            <summary>
            Image reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Images.ImageReference.None">
            <summary>
            Gets an <see cref="T:dnSpy.Contracts.Images.ImageReference"/> which isn't referencing any image
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageReference.IsDefault">
            <summary>
            true if it's the default instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageReference.Assembly">
            <summary>
            Assembly of image or null if <see cref="P:dnSpy.Contracts.Images.ImageReference.Name"/> is a URI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageReference.Name">
            <summary>
            Name of image
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReference.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="assembly">Assembly of image or null if <paramref name="name"/> is a pack: URI</param>
            <param name="name">Name of image</param>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReference.TryParse(System.String,dnSpy.Contracts.Images.ImageReference@)">
            <summary>
            Parses a string and tries to create an <see cref="T:dnSpy.Contracts.Images.ImageReference"/>
            </summary>
            <param name="value">String to parse</param>
            <param name="result">Result</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReference.ToString">
            <summary>
            Converts this instance to a string that can be passed to <see cref="M:dnSpy.Contracts.Images.ImageReference.TryParse(System.String,dnSpy.Contracts.Images.ImageReference@)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.ImageReferenceConverter">
            <summary>
            Converts a <see cref="T:System.String"/> to an <see cref="T:dnSpy.Contracts.Images.ImageReference"/> or vice versa
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Images.ImageReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Images.ImageSourceInfo">
            <summary>
            Image source info
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Images.ImageSourceInfo.AnySize">
            <summary>
            Any size
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageSourceInfo.Uri">
            <summary>
            URI of image
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Images.ImageSourceInfo.Size">
            <summary>
            Size of image in pixels or <see cref="F:dnSpy.Contracts.Images.ImageSourceInfo.AnySize"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.Full">
            <summary>
            Full match, case sensitive
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.FullAcronym">
            <summary>
            Full acronym match, eg. <c>TA</c> matches <c>TaskAwaiter</c>.
            This has less priority than <see cref="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.Full"/> because if there's an
            identifier named <c>TA</c>, then it should be selected, and not <c>TaskAwaiter</c>.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.FullIgnoringCase">
            <summary>
            Full match, case insensitive
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.Start">
            <summary>
            Matches start of filter, case sensitive
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.StartAcronym">
            <summary>
            Matches acronyms at start of filter.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.StartIgnoringCase">
            <summary>
            Matches start of filter, case insensitive
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.AnyLocation">
            <summary>
            Matches any location, case sensitive
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.AnyLocationAcronym">
            <summary>
            Matches acronyms at any location.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.AnyLocationIgnoringCase">
            <summary>
            Matches any location, case insensitive
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.Other">
            <summary>
            Other match
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.BestMatchSelector.MatchPriority.Nothing">
            <summary>
            Not a match
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierContext">
            <summary>
            Completion classifier context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierContext.Kind">
            <summary>
            Context kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierContext.CompletionSet">
            <summary>
            Gets the collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierContext.Completion">
            <summary>
            Gets the completion to classify
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.CompletionSet,Microsoft.VisualStudio.Language.Intellisense.Completion,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="completionSet">Completion set</param>
            <param name="completion">Completion to classify</param>
            <param name="text">Text to classify</param>
            <param name="colorize">true if it should be colorized</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierKind">
            <summary>
            Completion classifier kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierKind.DisplayText">
            <summary>
            Classify <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText"/>, the context is a <see cref="T:dnSpy.Contracts.Language.Intellisense.Classification.CompletionDisplayTextClassifierContext"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierKind.Suffix">
            <summary>
            Classify <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion4.Suffix"/>, the context is a <see cref="T:dnSpy.Contracts.Language.Intellisense.Classification.CompletionSuffixClassifierContext"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.Classification.CompletionDisplayTextClassifierContext">
            <summary>
            Context needed to classify <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.Classification.CompletionDisplayTextClassifierContext.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierKind.DisplayText"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.Classification.CompletionDisplayTextClassifierContext.InputText">
            <summary>
            Gets the current user input text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.Classification.CompletionDisplayTextClassifierContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.CompletionSet,Microsoft.VisualStudio.Language.Intellisense.Completion,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="completionSet">Completion set</param>
            <param name="completion">Completion to classify</param>
            <param name="displayText">Text to classify</param>
            <param name="inputText">Current user input text</param>
            <param name="colorize">true if it should be colorized</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.Classification.CompletionSuffixClassifierContext">
            <summary>
            Context needed to classify <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion4.Suffix"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.Classification.CompletionSuffixClassifierContext.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierKind.Suffix"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.Classification.CompletionSuffixClassifierContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.CompletionSet,Microsoft.VisualStudio.Language.Intellisense.Completion,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="completionSet">Completion set</param>
            <param name="completion">Completion to classify</param>
            <param name="suffix">Text to classify</param>
            <param name="colorize">true if it should be colorized</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.CompletionConstants">
            <summary>
            Completion constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.CompletionConstants.MimimumSearchLengthForFilter">
            <summary>
            Minimum length of search string before the collection gets filtered
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.CompletionExtensions">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> extensions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.CompletionExtensions.TryGetFilterText(Microsoft.VisualStudio.Language.Intellisense.Completion)">
            <summary>
            Gets the filter text or null. This is <see cref="P:dnSpy.Contracts.Language.Intellisense.IDsCompletion.FilterText"/> or <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText"/>
            if <paramref name="completion"/> is not a <see cref="T:dnSpy.Contracts.Language.Intellisense.IDsCompletion"/>
            </summary>
            <param name="completion">Completion</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.CompletionFilter">
            <summary>
            Default <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> filter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.CompletionFilter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="searchText">Search text</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.DsCompletion">
            <summary>
            A completion item
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.DsCompletion.FilterText">
            <summary>
            Gets the text that is used to filter this item
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.DsCompletion.IconMoniker">
            <summary>
            Gets the icon
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletion.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletion.#ctor(System.String,System.String,System.String,System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="displayText">Text shown in the UI</param>
            <param name="filterText">Text used to filter out items or null to use <paramref name="displayText"/></param>
            <param name="insertionText">Text that gets inserted in the text buffer or null to use <paramref name="displayText"/></param>
            <param name="description">Description or null</param>
            <param name="iconMoniker">Icon moniker or null</param>
            <param name="iconAutomationText">Icon automation text or null</param>
            <param name="attributeIcons">Attribute icons shown on the right side</param>
            <param name="suffix">Text shown after the normal completion text</param>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletion.GetIconMoniker">
            <summary>
            Gets the image reference. Only called if <see cref="P:dnSpy.Contracts.Language.Intellisense.DsCompletion.IconMoniker"/> hasn't been initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletion.Commit(Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Adds the new text to the text buffer
            </summary>
            <param name="replaceSpan">Span to replace with new content</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.DsCompletionSet">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> collection
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.Completions">
            <summary>
            Gets the filtered <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.CompletionBuilders">
            <summary>
            Gets the filtered <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> builders
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.ApplicableTo">
            <summary>
            Gets or sets the text tracking span to which this completion applies
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter})">
            <summary>
            Constructor
            </summary>
            <param name="moniker">Unique non-localized identifier</param>
            <param name="displayName">Name shown in the UI if there are multiple <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/>s</param>
            <param name="applicableTo">Span that will be modified when a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> gets committed</param>
            <param name="completions">Completion items</param>
            <param name="completionBuilders">Completion builders</param>
            <param name="filters">Filters or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.GetHighlightedSpansInDisplayText(System.String)">
            <summary>
            Gets highlighted text spans or null
            </summary>
            <param name="displayText">Text shown in the UI</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.CreateCompletionFilter(System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Language.Intellisense.ICompletionFilter"/>
            </summary>
            <param name="searchText">Search text</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.Filter(System.Collections.Generic.List{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.Completion})">
            <summary>
            Uses <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2.Filters"/> to filter <paramref name="completions"/>
            </summary>
            <param name="filteredResult">Result</param>
            <param name="completions">Completion items to filter</param>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.Filter">
            <summary>
            Filters the list. <see cref="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.SelectBestMatch"/> should be called after this method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.SelectBestMatch">
            <summary>
            Selects the best match and should be called after <see cref="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.Filter"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.GetBestMatch">
            <summary>
            Gets the best match in <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Completions"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.DsCompletionSet.GetMruIndex(Microsoft.VisualStudio.Language.Intellisense.Completion)">
            <summary>
            Gets the MRU index of <paramref name="completion"/>
            </summary>
            <param name="completion">Completion item</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection">
            <summary>
            A read-only filtered <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. Its content changes when the list gets filtered.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.CollectionChanged">
            <summary>
            Raised when the collection has changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index
            </summary>
            <param name="index">Index of item</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion})">
            <summary>
            Constructor
            </summary>
            <param name="items">Items</param>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.SetNewFilteredCollection(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion})">
            <summary>
            Should be called when the list has been filtered
            </summary>
            <param name="newItems">New items</param>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.Contains(Microsoft.VisualStudio.Language.Intellisense.Completion)">
            <summary>
            Checks whether <paramref name="item"/> is present in the collection
            </summary>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.IndexOf(Microsoft.VisualStudio.Language.Intellisense.Completion)">
            <summary>
            Returns the index of <paramref name="item"/> in the collection or -1 if it's not present
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.CopyTo(Microsoft.VisualStudio.Language.Intellisense.Completion[],System.Int32)">
            <summary>
            Copies the collection to <paramref name="array"/>
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Index</param>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.FilteredCompletionCollection.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.ICompletionFilter">
            <summary>
            Filters <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.ICompletionFilter.IsMatch(Microsoft.VisualStudio.Language.Intellisense.Completion)">
            <summary>
            Returns true if the search text matches this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/>
            </summary>
            <param name="completion">Completion</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.ICompletionFilter.GetMatchSpans(System.String)">
            <summary>
            Returns spans matching the search text
            </summary>
            <param name="completionText">Source text to match, eg. <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.ICompletionSetContentTypeProvider">
            <summary>
            Can be implemented by a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/> to return a content type that
            should be used when classifying completion items
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.ICompletionSetContentTypeProvider.GetContentType(Microsoft.VisualStudio.Utilities.IContentTypeRegistryService,dnSpy.Contracts.Language.Intellisense.Classification.CompletionClassifierKind)">
            <summary>
            Returns the content type or null
            </summary>
            <param name="contentTypeRegistryService">Content type registry service</param>
            <param name="kind">Kind</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.IDsCompletion">
            <summary>
            dnSpy Completion interface
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.IDsCompletion.FilterText">
            <summary>
            Gets the text that is used to filter this item
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.IDsCompletion.Commit(Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Adds the new text to the text buffer
            </summary>
            <param name="replaceSpan">Span to replace with new content</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.IDsCompletionIcon">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2"/>s can implement this to override whether the image
            should be fixed to match the background color. Default is to not modify the image.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.IDsCompletionIcon.ThemeImage">
            <summary>
            true to theme the image by changing it so it matches the background color. Default value is false.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.IImageMonikerService">
            <summary>
            Converts <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>s to and from <see cref="T:dnSpy.Contracts.Images.ImageReference"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.IImageMonikerService.ToImageMoniker(dnSpy.Contracts.Images.ImageReference)">
            <summary>
            Converts <paramref name="imageReference"/> to an <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker"/>
            </summary>
            <param name="imageReference">Image reference</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.IImageMonikerService.ToImageReference(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Converts <paramref name="imageMoniker"/> to an <see cref="T:dnSpy.Contracts.Images.ImageReference"/>
            </summary>
            <param name="imageMoniker">Image moniker</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.PredefinedDsCompletionSourceProviders">
            <summary>
            Predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider"/>s
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedDsCompletionSourceProviders.Roslyn">
            <summary>
            Roslyn languages (C# or Visual Basic)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.PredefinedDsQuickInfoSourceProviders">
            <summary>
            Predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedDsQuickInfoSourceProviders.DocumentViewer">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedDsQuickInfoSourceProviders.Roslyn">
            <summary>
            Roslyn languages (C# or Visual Basic)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedDsQuickInfoSourceProviders.Uri">
            <summary>
            URI
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.PredefinedDsSignatureHelpSourceProviders">
            <summary>
            Predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedDsSignatureHelpSourceProviders.Roslyn">
            <summary>
            Roslyn languages (C# or Visual Basic)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.PredefinedIntellisensePresenterProviders">
            <summary>
            Names of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider"/>s
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedIntellisensePresenterProviders.DefaultSignatureHelpPresenter">
            <summary>
            Name of default signature help presenter provider
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedIntellisensePresenterProviders.DefaultQuickInfoPresenter">
            <summary>
            Name of default quick info presenter provider
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedIntellisensePresenterProviders.DefaultCompletionPresenter">
            <summary>
            Name of default completion presenter provider
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.PredefinedUIElementProviderNames">
            <summary>
            Names of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2"/> exports
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.PredefinedUIElementProviderNames.RoslynCompletionToolTipProvider">
            <summary>
            Roslyn <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> tooltip provider
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContext">
            <summary>
            Signature help classifier context. Use <see cref="M:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.TryGetSignatureHelpClassifierContext(Microsoft.VisualStudio.Text.ITextBuffer)"/>
            to get the instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContext.Type">
            <summary>
            Gets the type, eg. <see cref="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContextTypes.ParameterDocumentation"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContext.Session">
            <summary>
            Gets the signature help session
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContext.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession)">
            <summary>
            Constructor
            </summary>
            <param name="type">Context type, eg. <see cref="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContextTypes.ParameterDocumentation"/></param>
            <param name="session">Signature help session</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.SignatureDocumentationSignatureHelpClassifierContext">
            <summary>
            Signature documentation signature help classifier context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.SignatureDocumentationSignatureHelpClassifierContext.Signature">
            <summary>
            Gets the signature to classify
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.SignatureDocumentationSignatureHelpClassifierContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,Microsoft.VisualStudio.Language.Intellisense.ISignature)">
            <summary>
            Constructor
            </summary>
            <param name="session">Signature help session</param>
            <param name="signature">Signature to classify</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.ParameterNameSignatureHelpClassifierContext">
            <summary>
            Parameter name signature help classifier context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.ParameterNameSignatureHelpClassifierContext.Parameter">
            <summary>
            Gets the parameter to classify
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.ParameterNameSignatureHelpClassifierContext.NameOffset">
            <summary>
            Gets the offset of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Name"/> in the text buffer.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.ParameterNameSignatureHelpClassifierContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,Microsoft.VisualStudio.Language.Intellisense.IParameter,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="session">Signature help session</param>
            <param name="parameter">Parameter to classify</param>
            <param name="nameOffset">Offset of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Name"/> in the text buffer</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.ParameterDocumentationSignatureHelpClassifierContext">
            <summary>
            Parameter documentation signature help classifier context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Language.Intellisense.ParameterDocumentationSignatureHelpClassifierContext.Parameter">
            <summary>
            Gets the parameter to classify
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.ParameterDocumentationSignatureHelpClassifierContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,Microsoft.VisualStudio.Language.Intellisense.IParameter)">
            <summary>
            Constructor
            </summary>
            <param name="session">Signature help session</param>
            <param name="parameter">Parameter to classify</param>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContextTypes">
            <summary>
            Signature help context types (see <see cref="P:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContext.Type"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContextTypes.SignatureDocumentation">
            <summary>
            Signature documentation
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContextTypes.ParameterName">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContextTypes.ParameterDocumentation">
            <summary>
            Parameter documentation
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants">
            <summary>
            Signature help constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.SignatureHelpContentTypeSuffix">
            <summary>
            Suffix added to the current signature's content type name (<see cref="P:Microsoft.VisualStudio.Utilities.IContentType.TypeName"/>)
            to get the name of the content type for the signature help text.
            This content type is created if it doesn't exist.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.ExtendedSignatureHelpContentTypeSuffix">
            <summary>
            Suffix added to the current signature's content type name (<see cref="P:Microsoft.VisualStudio.Utilities.IContentType.TypeName"/>)
            to get the name of the content type for the signature help documentation and parameter text and
            documentation.
            This feature is only enabled if this content type has been defined, it's not created by
            the signature help code. The classifier should use <see cref="M:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.TryGetSignatureHelpClassifierContext(Microsoft.VisualStudio.Text.ITextBuffer)"/>
            to get the information it needs.
            </summary>
            <remarks>
            <see cref="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.SignatureHelpContentTypeSuffix"/> is used by VS and dnSpy supports it but it can't
            be extended to also support other text.
            </remarks>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.UsePrettyPrintedContentBufferKey">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> property key of a <see cref="T:System.Boolean"/> that indicates whether
            the pretty printed content should be used (<see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.PrettyPrintedContent"/>
            vs <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Content"/> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Locus"/> vs
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.PrettyPrintedLocus"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.SessionBufferKey">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> property key to get the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/> instance.
            It's used by the signature help classifiers to get the session to classify.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.SignatureHelpClassifierContextBufferKey">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> property key to get the <see cref="T:dnSpy.Contracts.Language.Intellisense.SignatureHelpClassifierContext"/> instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.TryGetSignatureHelpSession(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns the signature help session or null if <paramref name="buffer"/> is not a signature help buffer
            </summary>
            <param name="buffer">Text buffer</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.GetUsePrettyPrintedContent(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <c>UsePrettyPrintedContent</c> value
            </summary>
            <param name="buffer">Signature help text buffer</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Language.Intellisense.SignatureHelpConstants.TryGetSignatureHelpClassifierContext(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns the signature help classifier context or null if <paramref name="buffer"/> is not a signature help buffer
            </summary>
            <param name="buffer">Text buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.CommandTargetMenuItemBase">
            <summary>
            A menu item base class for <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> commands
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.#ctor(dnSpy.Contracts.Command.StandardIds)">
            <summary>
            Constructor
            </summary>
            <param name="cmdId">Command id</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.#ctor(dnSpy.Contracts.Command.TextEditorIds)">
            <summary>
            Constructor
            </summary>
            <param name="cmdId">Command id</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="cmdId">Command ID</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.GetCommandTarget(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns the <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> or null if none
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.IsVisible(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.IsEnabled(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase.Execute(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1">
            <summary>
            A menu item base class for <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> commands
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.#ctor(dnSpy.Contracts.Command.StandardIds)">
            <summary>
            Constructor
            </summary>
            <param name="cmdId">Command id</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.#ctor(dnSpy.Contracts.Command.TextEditorIds)">
            <summary>
            Constructor
            </summary>
            <param name="cmdId">Command id</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="group">Command group, eg. <see cref="F:dnSpy.Contracts.Command.CommandConstants.StandardGroup"/></param>
            <param name="cmdId">Command ID</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.GetCommandTarget(`0)">
            <summary>
            Returns the <see cref="T:dnSpy.Contracts.Command.ICommandTarget"/> or null if none
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.IsVisible(`0)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.IsEnabled(`0)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CommandTargetMenuItemBase`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Menus.CreatedMenuItem">
            <summary>
            <see cref="P:dnSpy.Contracts.Menus.CreatedMenuItem.MenuItem"/> info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.CreatedMenuItem.Metadata">
            <summary>
            Metadata, eg. an <see cref="T:dnSpy.Contracts.Menus.ExportMenuItemAttribute"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.CreatedMenuItem.MenuItem">
            <summary>
            Menu item
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.CreatedMenuItem.#ctor(dnSpy.Contracts.Menus.IMenuItemMetadata,dnSpy.Contracts.Menus.IMenuItem)">
            <summary>
            Constructor
            </summary>
            <param name="md">Metadata, eg. an <see cref="T:dnSpy.Contracts.Menus.ExportMenuItemAttribute"/> instance</param>
            <param name="menuItem">Menu item</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.GuidObject">
            <summary>
            Object with a <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.GuidObject.Object">
            <summary>Object</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.GuidObject.Guid">
            <summary>Guid of object</summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.GuidObject.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid of object (eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_TEXTVIEW_GUID"/>)</param>
            <param name="obj">Object</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.GuidObject.#ctor(System.Guid,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid of object (eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_TEXTVIEW_GUID"/>)</param>
            <param name="obj">Object</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.GuidObjectsProviderArgs">
            <summary>
            Data passed to <see cref="M:dnSpy.Contracts.Menus.IGuidObjectsProvider.GetGuidObjects(dnSpy.Contracts.Menus.GuidObjectsProviderArgs)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.GuidObjectsProviderArgs.CreatorObject">
            <summary>
            The owner object (<see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.GuidObjectsProviderArgs.OpenedFromKeyboard">
            <summary>
            true if it was opened from the keyboard
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.GuidObjectsProviderArgs.#ctor(dnSpy.Contracts.Menus.GuidObject,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="creatorObject">The owner object (<see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject"/>)</param>
            <param name="openedFromKeyboard">true if it was opened from the keyboard</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IContextMenuInitializer">
            <summary>
            Implement it to change where the context menu should appear inside of a control
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IContextMenuInitializer.Initialize(dnSpy.Contracts.Menus.IMenuItemContext,System.Windows.Controls.ContextMenu)">
            <summary>
            Initializes a context menu
            </summary>
            <param name="context">Context</param>
            <param name="menu">Context menu</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IContextMenuProvider">
            <summary>
            Shows context menus
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IContextMenuProvider.Show(System.Windows.FrameworkElement)">
            <summary>
            Shows the context menu
            </summary>
            <param name="elem">Element</param>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IGuidObjectsProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Menus.GuidObject"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IGuidObjectsProvider.GetGuidObjects(dnSpy.Contracts.Menus.GuidObjectsProviderArgs)">
            <summary>
            Gets extra <see cref="T:dnSpy.Contracts.Menus.GuidObject"/>s to add to <see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.GuidObjects"/>
            </summary>
            <param name="args">Args</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenu">
            <summary>
            A menu
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.OwnerGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.OwnerGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuMetadata.Header">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Header"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.ExportMenuAttribute">
            <summary>
            Exports a menu (<see cref="T:dnSpy.Contracts.Menus.IMenu"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.ExportMenuAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.OwnerGuid">
            <summary>
            Guid of menu or null to use <see cref="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Guid">
            <summary>
            Guid of this item
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Order">
            <summary>
            Order within the menu, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_FILE"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuAttribute.Header">
            <summary>
            Menu header, eg. "_File"
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItem">
            <summary>
            A menu item command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.IsVisible(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns true if the menu item is visible in the menu
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.IsEnabled(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns true if the menu item is enabled and its <see cref="M:dnSpy.Contracts.Menus.IMenuItem.Execute(dnSpy.Contracts.Menus.IMenuItemContext)"/>
            method can be called.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.Execute(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Executes the command
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.GetHeader(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the menu item header or null if the default header from the attribute should be
            used.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.GetInputGestureText(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the menu item input gesture text or null if the default input gesture text from the
            attribute should be used.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.GetIcon(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the menu item icon or null if the default icon from the attribute should be used.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItem.IsChecked(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns true if the menu item is checked
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItemMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.OwnerGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.OwnerGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Group">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Group"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Header">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Header"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.InputGestureText">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.InputGestureText"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemMetadata.Icon">
            <summary>See <see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Icon"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.ExportMenuItemAttribute">
            <summary>
            Exports a menu item (<see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.ExportMenuItemAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.OwnerGuid">
            <summary>
            Guid of owner menu or menu item. <c>null</c> if it's a context menu (<see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Guid">
            <summary>
            Guid of this item or null if it can't contain any child items
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Group">
            <summary>
            Group name, must be of the format "order,name" where order is a decimal number and the
            order of the group in this menu.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Order">
            <summary>
            Order within the menu group (<see cref="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Group"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Header">
            <summary>
            Menu item header property value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.InputGestureText">
            <summary>
            Menu item input gesture text property value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.ExportMenuItemAttribute.Icon">
            <summary>
            Icon name
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItemContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.MenuGuid">
            <summary>
            Gets the guid of the top-level menu, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/> or
            <see cref="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.OpenedFromKeyboard">
            <summary>
            true if it was opened from the keyboard, else mouse. If it's the main menu (and not
            a context menu), this will always be true.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject">
            <summary>
            Creator object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.IMenuItemContext.GuidObjects">
            <summary>
            All objects. <see cref="P:dnSpy.Contracts.Menus.IMenuItemContext.CreatorObject"/> is always the first one
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItemContext.GetOrCreateState``1(System.Object,System.Func{``0})">
            <summary>
            Gets or creates user state that can be saved in the context to prevent re-generating the
            same state when various <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/> methods get called.
            </summary>
            <typeparam name="T">State type</typeparam>
            <param name="key">Key, eg. a guid or a static key in some base command class</param>
            <param name="createState">Delegate that creates a new value if it hasn't been created yet</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItemContext.Find``1">
            <summary>
            Finds the first object of a certain type. Returns default({T}) if none was found
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuItemProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuItemProvider.Create(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Returns an enumerable of <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>s
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.IMenuService">
            <summary>
            Menu manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuService.InitializeContextMenu(System.Windows.FrameworkElement,System.Guid,dnSpy.Contracts.Menus.IGuidObjectsProvider,dnSpy.Contracts.Menus.IContextMenuInitializer,System.Nullable{System.Guid})">
            <summary>
            Initializes a context menu. Should be called when <paramref name="elem"/> has been created.
            </summary>
            <param name="elem">Element that needs a context menu</param>
            <param name="guid">Guid of <paramref name="elem"/></param>
            <param name="provider">A <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsProvider"/> instance or null</param>
            <param name="initCtxMenu">A <see cref="T:dnSpy.Contracts.Menus.IContextMenuInitializer"/> instance or null</param>
            <param name="ctxMenuGuid">Guid of context menu, default is <see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuService.InitializeContextMenu(System.Windows.FrameworkElement,System.String,dnSpy.Contracts.Menus.IGuidObjectsProvider,dnSpy.Contracts.Menus.IContextMenuInitializer,System.String)">
            <summary>
            Initializes a context menu. Should be called when <paramref name="elem"/> has been created.
            </summary>
            <param name="elem">Element that needs a context menu</param>
            <param name="guid">Guid of <paramref name="elem"/></param>
            <param name="provider">A <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsProvider"/> instance or null</param>
            <param name="initCtxMenu">A <see cref="T:dnSpy.Contracts.Menus.IContextMenuInitializer"/> instance or null</param>
            <param name="ctxMenuGuid">Guid of context menu, default is <see cref="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.IMenuService.CreateMenu(System.Guid,System.Windows.IInputElement)">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.Menu"/>
            </summary>
            <param name="menuGuid">Guid of menu, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID"/></param>
            <param name="commandTarget">Command target for menu items, eg. the owner window, or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.MenuConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.CTX_MENU_GUID">
            <summary>Guid of context menu</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_GUID">
            <summary>Guid of app menu</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_FILE_GUID">
            <summary>Guid of app menu: File</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_EDIT_GUID">
            <summary>Guid of app menu: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_VIEW_GUID">
            <summary>Guid of app menu: View</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_DEBUG_GUID">
            <summary>Guid of app menu: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_WINDOW_GUID">
            <summary>Guid of app menu: Window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.APP_MENU_HELP_GUID">
            <summary>Guid of app menu: Help</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GLYPHMARGIN_GUID">
            <summary>Guid of glyph margin</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_FILE">
            <summary>App menu order: File</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_EDIT">
            <summary>App menu order: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_VIEW">
            <summary>App menu order: View</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_DEBUG">
            <summary>App menu order: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_WINDOW">
            <summary>App menu order: Window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.ORDER_APP_MENU_HELP">
            <summary>App menu order: Help</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_UNKNOWN_GUID">
            <summary>An unknown object</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_DOCUMENTS_TREEVIEW_GUID">
            <summary>Documents treeview</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_ANALYZER_TREEVIEW_GUID">
            <summary>Analyzer's treeview</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_SEARCH_GUID">
            <summary>Search ListBox</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TREEVIEW_NODES_ARRAY_GUID">
            <summary>Treeview nodes array (<see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/>[])</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_SEARCHRESULT_GUID">
            <summary><see cref="T:dnSpy.Contracts.Search.ISearchResult"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_CODE_REFERENCE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.TextReference"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_DOCUMENTS_TABCONTROL_GUID">
            <summary>Document <see cref="T:System.Windows.Controls.TabControl"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TABGROUP_GUID">
            <summary><see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TOOLWINDOWGROUP_GUID">
            <summary><see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TOOLWINDOW_TABCONTROL_GUID">
            <summary>Tool window <see cref="T:System.Windows.Controls.TabControl"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_DOCUMENTVIEWERCONTROL_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/>'s UI control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_DOCUMENTVIEWER_GUID">
            <summary><see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TEXTEDITORPOSITION_GUID">
            <summary><see cref="T:dnSpy.Contracts.Text.TextEditorPosition"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_HEXEDITORPOSITION_GUID">
            <summary><see cref="T:dnSpy.Contracts.Hex.Editor.HexCaretPosition"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_ASMEDITOR_HEXVIEW_GUID">
            <summary>Asm editor's hex view</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_HEXBOX_GUID">
            <summary><c>HexBox</c>, it's now obsolete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_DEBUGGER_MEMORY_HEXVIEW_GUID">
            <summary>Debugger's memory hex view</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_GLYPHMARGIN_GUID">
            <summary>Glyph margin</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_REPL_TEXTEDITORCONTROL_GUID">
            <summary>REPL text editor control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_REPL_EDITOR_GUID">
            <summary><see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_TEXTVIEW_GUID">
            <summary><see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_TEXTVIEW_HOST_GUID">
            <summary><see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_TEXTVIEW_MARGIN_GUID">
            <summary><see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_HEXVIEW_HOST_GUID">
            <summary><see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewHost"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_HEXVIEW_GUID">
            <summary><see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexView"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_WPF_HEXVIEW_MARGIN_GUID">
            <summary><see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewMargin"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_MARGIN_POINT_GUID">
            <summary>Point of mouse relative to a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> or a <see cref="T:dnSpy.Contracts.Hex.Editor.WpfHexViewMargin"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_LOG_TEXTEDITORCONTROL_GUID">
            <summary>Log text editor control</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_LOG_EDITOR_GUID">
            <summary><see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_OUTPUT_SERVICE_GUID">
            <summary><see cref="T:dnSpy.Contracts.Output.IOutputService"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_ACTIVE_OUTPUT_TEXTPANE_GUID">
            <summary>Active <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_CODE_EDITOR_GUID">
            <summary><see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_BREAKPOINT_GUID">
            <summary>Breakpoint</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_FILE_SAVE">
            <summary>Group: App Menu: File, Group: Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_FILE_OPEN">
            <summary>Group: App Menu: File, Group: Open</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_FILE_EXIT">
            <summary>Group: App Menu: File, Group: Exit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_UNDO">
            <summary>Group: App Menu: Edit, Group: Undo/Redo</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_FIND">
            <summary>Group: App Menu: Edit, Group: Find</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_DELETE">
            <summary>Group: App Menu: Edit, Group: AsmEditor Delete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_MISC">
            <summary>Group: App Menu: Edit, Group: AsmEditor Misc</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_NEW">
            <summary>Group: App Menu: Edit, Group: AsmEditor New</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_ASMED_SETTINGS">
            <summary>Group: App Menu: Edit, Group: AsmEditor Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX">
            <summary>Group: App Menu: Edit, Group: Hex</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX_MD">
            <summary>Group: App Menu: Edit, Group: Hex MD</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX_GOTO_MD">
            <summary>Group: App Menu: Edit, Group: Hex MD Go To</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_EDIT_HEX_COPY">
            <summary>Group: App Menu: Edit, Group: Hex Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_VIEW_OPTS">
            <summary>Group: App Menu: View, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_VIEW_WINDOWS">
            <summary>Group: App Menu: View, Group: Tool Windows</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_VIEW_OPTSDLG">
            <summary>Group: App Menu: View, Group: Options dlg</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_THEMES_THEMES">
            <summary>Group: App Menu: Themes, Group: Themes</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_START">
            <summary>Group: App Menu: Debug, Group: Start</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_CONTINUE">
            <summary>Group: App Menu: Debug, Group: Continue/Stop/etc commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_STEP">
            <summary>Group: App Menu: Debug, Group: Step commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_BREAKPOINTS">
            <summary>Group: App Menu: Debug, Group: Breakpoint commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_DEBUG_SHOW">
            <summary>Group: App Menu: Debug, Group: Show Debug Windows</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_WINDOW">
            <summary>Group: App Menu: Window, Group: Window</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_TABGROUPS">
            <summary>Group: App Menu: Window, Group: Tab Groups</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_TABGROUPSCLOSE">
            <summary>Group: App Menu: Window, Group: Tab Groups Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_TABGROUPSVERT">
            <summary>Group: App Menu: Window, Group: Tab Groups Vert/Horiz commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_WINDOW_ALLWINDOWS">
            <summary>Group: App Menu: Window, Group: All Windows</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_HELP_LINKS">
            <summary>Group: App Menu: Help, Group: Links</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_APP_MENU_HELP_ABOUT">
            <summary>Group: App Menu: Help, Group: About</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_TABS">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_DEBUG">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_ASMED_SAVE">
            <summary>Group: Context Menu, Type: Document Viewer, Group: AsmEditor Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_ASMED_DELETE">
            <summary>Group: Context Menu, Type: Document Viewer, Group: AsmEditor Delete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_ASMED_NEW">
            <summary>Group: Context Menu, Type: Document Viewer, Group: AsmEditor New</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_ASMED_SETTINGS">
            <summary>Group: Context Menu, Type: Document Viewer, Group: AsmEditor Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_ASMED_ILED">
            <summary>Group: Context Menu, Type: Document Viewer, Group: AsmEditor IL ED</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_TOKENS">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_HEX">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Hex</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_HEX_MD">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Hex MD</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_HEX_COPY">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Hex Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_DEBUGRT">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Debug RT</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_OTHER">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCVIEWER_EDITOR">
            <summary>Group: Context Menu, Type: Document Viewer, Group: Editor</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXVIEW_SHOW">
            <summary>Group: Context Menu, Type: HexView, Group: Show commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXVIEW_EDIT">
            <summary>Group: Context Menu, Type: HexView, Group: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXVIEW_MISC">
            <summary>Group: Context Menu, Type: HexView, Group: Misc</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXVIEW_COPY">
            <summary>Group: Context Menu, Type: HexView, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXVIEW_OPTS">
            <summary>Group: Context Menu, Type: HexView, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXVIEW_FIND">
            <summary>Group: Context Menu, Type: HexView, Group: Find</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_SHOW">
            <summary>Group: Context Menu, Type: HexBox, Group: Show commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_EDIT">
            <summary>Group: Context Menu, Type: HexBox, Group: Edit</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_OPTS">
            <summary>Group: Context Menu, Type: HexBox, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_HEXBOX_COPY">
            <summary>Group: Context Menu, Type: HexBox, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_CLOSE">
            <summary>Group: Context Menu, Type: Tabs, Group: Close/New commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_GROUPS">
            <summary>Group: Context Menu, Type: Tabs, Group: Tab Groups</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_GROUPSCLOSE">
            <summary>Group: Context Menu, Type: Tabs, Group: Tab Groups Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TABS_GROUPSVERT">
            <summary>Group: Context Menu, Type: Tabs, Group: Tab Groups Vert/Horiz commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_CLOSE">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_GROUPS">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Tab Groups</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_GROUPSCLOSE">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Tab Groups Close commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_TOOLWINS_GROUPSVERT">
            <summary>Group: Context Menu, Type: Tool Windows, Group: Tab Groups Vert/Horiz commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_TABS">
            <summary>Group: Context Menu, Type: Search, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_TOKENS">
            <summary>Group: Context Menu, Type: Search, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_DEBUG">
            <summary>Group: Context Menu, Type: Search, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_OTHER">
            <summary>Group: Context Menu, Type: Search, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_SEARCH_OPTIONS">
            <summary>Group: Context Menu, Type: Search, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_TABS">
            <summary>Group: Context Menu, Type: Analyzer, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_TOKENS">
            <summary>Group: Context Menu, Type: Analyzer, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_DEBUG">
            <summary>Group: Context Menu, Type: Analyzer, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_OTHER">
            <summary>Group: Context Menu, Type: Analyzer, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_ANALYZER_OPTIONS">
            <summary>Group: Context Menu, Type: Analyzer, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_TABS">
            <summary>Group: Context Menu, Type: Documents, Group: Tabs</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_ASMED_SAVE">
            <summary>Group: Context Menu, Type: Documents, Group: AsmEditor Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_ASMED_DELETE">
            <summary>Group: Context Menu, Type: Documents, Group: AsmEditor Delete</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_ASMED_MISC">
            <summary>Group: Context Menu, Type: Documents, Group: AsmEditor Misc</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_ASMED_NEW">
            <summary>Group: Context Menu, Type: Documents, Group: AsmEditor New</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_ASMED_SETTINGS">
            <summary>Group: Context Menu, Type: Documents, Group: AsmEditor Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_ASMED_ILED">
            <summary>Group: Context Menu, Type: Documents, Group: AsmEditor IL ED</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_TOKENS">
            <summary>Group: Context Menu, Type: Documents, Group: Tokens</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_DEBUGRT">
            <summary>Group: Context Menu, Type: Documents, Group: Debug RT</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_DEBUG">
            <summary>Group: Context Menu, Type: Documents, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DOCUMENTS_OTHER">
            <summary>Group: Context Menu, Type: Document, Group: Other</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_BPS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Breakpoints, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_BPS_CODE">
            <summary>Group: Context Menu, Type: Debugger/Breakpoints, Group: Code</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_BPS_OPTS">
            <summary>Group: Context Menu, Type: Debugger/Breakpoints, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_COPY">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_FRAME">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Frame</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_CALLSTACK_OPTS">
            <summary>Group: Context Menu, Type: Debugger/CallStack, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_EXCEPTIONS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Exceptions, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_EXCEPTIONS_ADD">
            <summary>Group: Context Menu, Type: Debugger/Exceptions, Group: Add</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_VALUES">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Values</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_TREE">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Tree</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_LOCALS_OPTS">
            <summary>Group: Context Menu, Type: Debugger/Locals, Group: Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_COPY">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_GOTO">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Go To</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_DIRS">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Directories</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_MODULES_SAVE">
            <summary>Group: Context Menu, Type: Debugger/Modules, Group: Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_THREADS_COPY">
            <summary>Group: Context Menu, Type: Debugger/Threads, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_THREADS_HEXOPTS">
            <summary>Group: Context Menu, Type: Debugger/Threads, Group: Hex Options</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_DBG_THREADS_CMDS">
            <summary>Group: Context Menu, Type: Debugger/Threads, Group: Commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_RESET">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Reset</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_COPY">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_CLEAR">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Clear</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_SAVE">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Save</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_REPL_SETTINGS">
            <summary>Group: Context Menu, Type: REPL text editor, Group: Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_OUTPUT_COPY">
            <summary>Group: Context Menu, Type: Output text editor, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_OUTPUT_SETTINGS">
            <summary>Group: Context Menu, Type: Output text editor, Group: Settings</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_OUTPUT_USER_COMMANDS">
            <summary>Group: Context Menu, Type: Output text editor, Group: User Commands</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODEEDITOR_COMPILE">
            <summary>Group: Context Menu, Type: Code editor, Group: Compile</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODEEDITOR_COPY">
            <summary>Group: Context Menu, Type: Code editor, Group: Copy</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_CTX_CODEEDITOR_FIND">
            <summary>Group: Context Menu, Type: Code editor, Group: Find</summary>
        </member>
        <member name="F:dnSpy.Contracts.Menus.MenuConstants.GROUP_GLYPHMARGIN_DEBUG_BPS">
            <summary>Group: Glyph margin, Type: Debugger, Group: Breakpoints</summary>
        </member>
        <member name="T:dnSpy.Contracts.Menus.MenuItemBase">
            <summary>
            Menu item base class, implements <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.Execute(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.IsEnabled(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.IsVisible(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.GetHeader(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.GetIcon(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.GetInputGestureText(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase.IsChecked(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Menus.MenuItemBase`1">
            <summary>
            Menu item base class, implements <see cref="T:dnSpy.Contracts.Menus.IMenuItem"/>
            </summary>
            <typeparam name="TContext">Context type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.CreateContext(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Creates the context
            </summary>
            <param name="context">Menu item context</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Menus.MenuItemBase`1.CachedContextKey">
            <summary>
            Gets the context key. Should be a unique value per class, eg. an <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.GetCachedContext(dnSpy.Contracts.Menus.IMenuItemContext)">
            <summary>
            Gets the cached context
            </summary>
            <param name="context">Menu item context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.Execute(`0)">
            <summary>
            Executes the command
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.IsEnabled(`0)">
            <summary>
            Returns true if it's enabled
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.IsVisible(`0)">
            <summary>
            Returns true if it's visible. If false, none of the other methods get called
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.GetHeader(`0)">
            <summary>
            Returns the header or null to use the default value from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.GetIcon(`0)">
            <summary>
            Returns the icon or null to use the default value from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.GetInputGestureText(`0)">
            <summary>
            Returns the input gesture text or null to use the default value from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemBase`1.IsChecked(`0)">
            <summary>
            Returns true if it's checked
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Menus.MenuItemCommand">
            <summary>
            A menu item that executes an <see cref="T:System.Windows.Input.ICommand"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.MenuItemCommand.Command">
            <summary>
            Gets the real command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemCommand.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Constructor
            </summary>
            <param name="realCommand">The real command that gets executed</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemCommand.Execute(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemCommand.IsEnabled(dnSpy.Contracts.Menus.IMenuItemContext)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Menus.MenuItemCommand`1">
            <summary>
            A menu item that executes an <see cref="T:System.Windows.Input.ICommand"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Menus.MenuItemCommand`1.Command">
            <summary>
            Gets the real command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemCommand`1.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Constructor
            </summary>
            <param name="realCommand">The real command that gets executed</param>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemCommand`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Menus.MenuItemCommand`1.IsEnabled(`0)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.Metadata.IModuleIdFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Metadata.ModuleId"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Metadata.IModuleIdFactory.Create(dnlib.DotNet.ModuleDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Metadata.ModuleId"/> or returns null. The returned value can be cached so
            it must always produce the same value for the same input module.
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Metadata.IModuleIdFactoryProvider">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Metadata.IModuleIdFactory"/>. Use <see cref="T:dnSpy.Contracts.Metadata.ExportModuleIdFactoryProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Metadata.IModuleIdFactoryProvider.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Metadata.IModuleIdFactory"/> or returns null
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Metadata.IModuleIdFactoryProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Metadata.IModuleIdFactoryProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Metadata.ExportModuleIdFactoryProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Metadata.ExportModuleIdFactoryProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Metadata.IModuleIdFactoryProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Metadata.ExportModuleIdFactoryProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:dnSpy.Contracts.Metadata.ExportModuleIdFactoryProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance, eg. <see cref="F:dnSpy.Contracts.Metadata.ModuleIdFactoryProviderConstants.OrderDebugger"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Metadata.ExportModuleIdFactoryProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Metadata.IModuleIdProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Metadata.ModuleId"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Metadata.IModuleIdProvider.Create(dnlib.DotNet.ModuleDef)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Metadata.ModuleId"/>
            </summary>
            <param name="module">Module or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Metadata.ModuleIdFactoryProviderConstants">
            <summary>
            <see cref="T:dnSpy.Contracts.Metadata.IModuleIdFactoryProvider"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Metadata.ModuleIdFactoryProviderConstants.OrderDefault">
            <summary>
            Default order
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Metadata.ModuleIdFactoryProviderConstants.OrderDebugger">
            <summary>
            Order of debugger extension's <see cref="T:dnSpy.Contracts.Metadata.IModuleIdFactoryProvider"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Converters.FontSizeConverter">
            <summary>
            Font size converter
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Converters.NegateBooleanConverter">
            <summary>
            Negates booleans
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DataFieldVM">
            <summary>
            Data field base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.DataFieldVM.ObjectValue">
            <summary>
            Gets/sets the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.DataFieldVM.StringValue">
            <summary>
            Gets the string representation of the value. This could be an invalid string. Use
            <see cref="M:dnSpy.Contracts.MVVM.DataFieldVM.Validate"/> to check whether it's valid.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.WriteStringValueFromConstructor(System.String)">
            <summary>
            Must only be called from the constructor
            </summary>
            <param name="value">Initial <see cref="P:dnSpy.Contracts.MVVM.DataFieldVM.StringValue"/></param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.ForceWriteStringValue(System.String)">
            <summary>
            Force writing a new <see cref="P:dnSpy.Contracts.MVVM.DataFieldVM.StringValue"/> even if nothing changed
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.Revalidate">
            <summary>
            Revalidates the field for errors
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.OnStringValueChanged">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.MVVM.DataFieldVM.StringValue"/> gets updated
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.DataFieldVM.IsNull">
            <summary>
            true if the value is null (<see cref="P:dnSpy.Contracts.MVVM.DataFieldVM.StringValue"/> is empty)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.Validate">
            <summary>
            Validates the data. Returns null or an empty string if there was no error,
            or an error string that can be shown to the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.ConvertToObjectValue(System.Object@)">
            <summary>
            Converts the string to the target value. Returns null or an empty string if
            there were no errors, else an error string that can be shown to the user.
            </summary>
            <param name="value">Result</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM.Verify(System.String)">
            <summary>
            Checks the string for errors
            </summary>
            <param name="columnName">Property name</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.DataFieldVM.HasError">
            <summary>
            true if there's at least one error
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DataFieldVM`1">
            <summary>
            Data field base class
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.DataFieldVM`1.ObjectValue">
            <summary>
            Gets/sets the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.DataFieldVM`1.Value">
            <summary>
            Gets/sets the value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.SetValueFromConstructor(`0)">
            <summary>
            Must only be called from the constructor
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.SetValue(`0)">
            <summary>
            Writes a new value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.OnNewValue(`0)">
            <summary>
            Converts <paramref name="value"/> to a string
            </summary>
            <param name="value">New value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.ConvertToValue(`0@)">
            <summary>
            Converts the current string to the real value. Returns null or an empty string if
            there were no errors, else an error string that can be shown to the user.
            </summary>
            <param name="value">Result</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.ConvertToObjectValue(System.Object@)">
            <summary>
            Converts the string to the target value. Returns null or an empty string if
            there were no errors, else an error string that can be shown to the user.
            </summary>
            <param name="value">Result</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DataFieldVM`1.Validate">
            <summary>
            Validates the data. Returns null or an empty string if there was no error,
            or an error string that can be shown to the user.
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NumberDataFieldVM`2">
            <summary>
            Number base class
            </summary>
            <typeparam name="T">Real type</typeparam>
            <typeparam name="U">If real type is a nullable type, this should be non-nullable type</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.NumberDataFieldVM`2.UseDecimal">
            <summary>
            true to always use decimal, false to never use decimal (except if it's just one digit),
            and null to use decimal or hex depending on what number it is.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.NumberDataFieldVM`2.Min">
            <summary>
            Gets/sets the minimum value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.NumberDataFieldVM`2.Max">
            <summary>
            Gets/sets the maximum value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NumberDataFieldVM`2.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},`1,`1,System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableGuidVM">
            <summary>
            Nullable <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableGuidVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableGuidVM.#ctor(System.Nullable{System.Guid},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableGuidVM.OnNewValue(System.Nullable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableGuidVM.ConvertToValue(System.Nullable{System.Guid}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.HexStringVM">
            <summary>
            Hex string
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.HexStringVM.UpperCaseHex">
            <summary>
            Gets/sets whether to use upper case hex digits
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.HexStringVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.HexStringVM.#ctor(System.Collections.Generic.IList{System.Byte},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.HexStringVM.OnNewValue(System.Collections.Generic.IList{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.HexStringVM.ConvertToValue(System.Collections.Generic.IList{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableBooleanVM">
            <summary>
            Nullable <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableBooleanVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableBooleanVM.#ctor(System.Nullable{System.Boolean},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableBooleanVM.OnNewValue(System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableBooleanVM.ConvertToValue(System.Nullable{System.Boolean}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableSByteVM">
            <summary>
            Nullable <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableSByteVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableSByteVM.#ctor(System.Nullable{System.SByte},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableSByteVM.OnNewValue(System.Nullable{System.SByte})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableSByteVM.ConvertToValue(System.Nullable{System.SByte}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableByteVM">
            <summary>
            Nullable <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableByteVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableByteVM.#ctor(System.Nullable{System.Byte},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableByteVM.OnNewValue(System.Nullable{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableByteVM.ConvertToValue(System.Nullable{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableInt16VM">
            <summary>
            Nullable <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt16VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt16VM.#ctor(System.Nullable{System.Int16},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt16VM.OnNewValue(System.Nullable{System.Int16})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt16VM.ConvertToValue(System.Nullable{System.Int16}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableUInt16VM">
            <summary>
            Nullable <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt16VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt16VM.#ctor(System.Nullable{System.UInt16},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt16VM.OnNewValue(System.Nullable{System.UInt16})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt16VM.ConvertToValue(System.Nullable{System.UInt16}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableInt32VM">
            <summary>
            Nullable <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt32VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt32VM.#ctor(System.Nullable{System.Int32},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt32VM.OnNewValue(System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt32VM.ConvertToValue(System.Nullable{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableUInt32VM">
            <summary>
            Nullable <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt32VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt32VM.#ctor(System.Nullable{System.UInt32},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt32VM.OnNewValue(System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt32VM.ConvertToValue(System.Nullable{System.UInt32}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableInt64VM">
            <summary>
            Nullable <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt64VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt64VM.#ctor(System.Nullable{System.Int64},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt64VM.OnNewValue(System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableInt64VM.ConvertToValue(System.Nullable{System.Int64}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.NullableUInt64VM">
            <summary>
            Nullable <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt64VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt64VM.#ctor(System.Nullable{System.UInt64},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt64VM.OnNewValue(System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.NullableUInt64VM.ConvertToValue(System.Nullable{System.UInt64}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.BooleanVM">
            <summary>
            <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanVM.#ctor(System.Boolean,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanVM.OnNewValue(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanVM.ConvertToValue(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.CharVM">
            <summary>
            <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharVM.#ctor(System.Char,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharVM.OnNewValue(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharVM.ConvertToValue(System.Char@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.ByteVM">
            <summary>
            <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteVM.#ctor(System.Byte,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteVM.OnNewValue(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteVM.ConvertToValue(System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.UInt16VM">
            <summary>
            <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16VM.#ctor(System.UInt16,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16VM.OnNewValue(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16VM.ConvertToValue(System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.UInt32VM">
            <summary>
            <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32VM.#ctor(System.UInt32,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32VM.OnNewValue(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32VM.ConvertToValue(System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.UInt64VM">
            <summary>
            <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64VM.#ctor(System.UInt64,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64VM.OnNewValue(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64VM.ConvertToValue(System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.SByteVM">
            <summary>
            <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteVM.#ctor(System.SByte,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteVM.OnNewValue(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteVM.ConvertToValue(System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Int16VM">
            <summary>
            <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16VM.#ctor(System.Int16,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16VM.OnNewValue(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16VM.ConvertToValue(System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Int32VM">
            <summary>
            <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32VM.#ctor(System.Int32,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32VM.OnNewValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32VM.ConvertToValue(System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Int64VM">
            <summary>
            <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64VM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64VM.#ctor(System.Int64,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64VM.OnNewValue(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64VM.ConvertToValue(System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.SingleVM">
            <summary>
            <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleVM.#ctor(System.Single,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleVM.OnNewValue(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleVM.ConvertToValue(System.Single@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DoubleVM">
            <summary>
            <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleVM.#ctor(System.Double,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleVM.OnNewValue(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleVM.ConvertToValue(System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.StringVM">
            <summary>
            <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="allowNullString">true to allow null strings</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringVM.#ctor(System.String,System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="allowNullString">true to allow null strings</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringVM.OnNewValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringVM.ConvertToValue(System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DecimalVM">
            <summary>
            <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DecimalVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DecimalVM.#ctor(System.Decimal,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DecimalVM.OnNewValue(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DecimalVM.ConvertToValue(System.Decimal@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DateTimeVM">
            <summary>
            <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DateTimeVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DateTimeVM.#ctor(System.DateTime,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DateTimeVM.OnNewValue(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DateTimeVM.ConvertToValue(System.DateTime@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.TimeSpanVM">
            <summary>
            <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.TimeSpanVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.TimeSpanVM.#ctor(System.TimeSpan,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.TimeSpanVM.OnNewValue(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.TimeSpanVM.ConvertToValue(System.TimeSpan@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.GuidVM">
            <summary>
            <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.GuidVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.GuidVM.#ctor(System.Guid,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.GuidVM.OnNewValue(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.GuidVM.ConvertToValue(System.Guid@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.BooleanListDataFieldVM">
            <summary>
            List of <see cref="T:System.Boolean"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Boolean},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.BooleanListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Boolean}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.CharListDataFieldVM">
            <summary>
            List of <see cref="T:System.Char"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Char},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.CharListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Char}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.ByteListDataFieldVM">
            <summary>
            List of <see cref="T:System.Byte"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Byte},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ByteListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.UInt16ListDataFieldVM">
            <summary>
            List of <see cref="T:System.UInt16"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16ListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16ListDataFieldVM.#ctor(System.Collections.Generic.IList{System.UInt16},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16ListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.UInt16})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt16ListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.UInt16}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.UInt32ListDataFieldVM">
            <summary>
            List of <see cref="T:System.UInt32"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32ListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32ListDataFieldVM.#ctor(System.Collections.Generic.IList{System.UInt32},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32ListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt32ListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.UInt32}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.UInt64ListDataFieldVM">
            <summary>
            List of <see cref="T:System.UInt64"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64ListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64ListDataFieldVM.#ctor(System.Collections.Generic.IList{System.UInt64},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64ListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.UInt64ListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.UInt64}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.SByteListDataFieldVM">
            <summary>
            List of <see cref="T:System.SByte"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteListDataFieldVM.#ctor(System.Collections.Generic.IList{System.SByte},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.SByte})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SByteListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.SByte}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Int16ListDataFieldVM">
            <summary>
            List of <see cref="T:System.Int16"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16ListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16ListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Int16},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16ListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Int16})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int16ListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Int16}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Int32ListDataFieldVM">
            <summary>
            List of <see cref="T:System.Int32"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32ListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32ListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Int32},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32ListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int32ListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Int32}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Int64ListDataFieldVM">
            <summary>
            List of <see cref="T:System.Int64"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64ListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64ListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Int64},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Nullable{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="useDecimal">true to use decimal, false to use hex, or null if it depends on the value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64ListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Int64ListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Int64}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.SingleListDataFieldVM">
            <summary>
            List of <see cref="T:System.Single"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Single},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.SingleListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Single}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DoubleListDataFieldVM">
            <summary>
            List of <see cref="T:System.Double"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleListDataFieldVM.#ctor(System.Collections.Generic.IList{System.Double},System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DoubleListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.Double}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.StringListDataFieldVM">
            <summary>
            List of <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringListDataFieldVM.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="allowNullString">true to allow null strings</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringListDataFieldVM.#ctor(System.Collections.Generic.IList{System.String},System.Action{dnSpy.Contracts.MVVM.DataFieldVM},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
            <param name="allowNullString">true to allow null strings</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringListDataFieldVM.OnNewValue(System.Collections.Generic.IList{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.StringListDataFieldVM.ConvertToValue(System.Collections.Generic.IList{System.String}@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.DefaultConverterVM`1">
            <summary>
            Uses the default converter to convert the type to/from a string
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DefaultConverterVM`1.#ctor(System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DefaultConverterVM`1.#ctor(`0,System.Action{dnSpy.Contracts.MVVM.DataFieldVM})">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="onUpdated">Called when value gets updated</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DefaultConverterVM`1.OnNewValue(`0)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.DefaultConverterVM`1.ConvertToValue(`0@)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Dialogs.ProgressDlg">
            <summary>
            Progress dialog box
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.ProgressDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.ProgressDlg.OnClosing(System.ComponentModel.CancelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.ProgressDlg.Show(dnSpy.Contracts.MVVM.Dialogs.IProgressTask,System.String,System.Windows.Window)">
            <summary>
            Shows a progress dialog box
            </summary>
            <param name="task">Task</param>
            <param name="title">Title</param>
            <param name="ownerWindow">Owner window</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.ProgressDlg.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Dialogs.IProgress">
            <summary>
            Progress
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.IProgress.SetTotalProgress(System.Double)">
            <summary>
            Sets total progress
            </summary>
            <param name="progress">Total progress</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.IProgress.SetDescription(System.String)">
            <summary>
            Sets the description
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.IProgress.ThrowIfCancellationRequested">
            <summary>
            Throws if it should be cancelled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.IProgress.Token">
            <summary>
            Cancellation token
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Dialogs.IProgressTask">
            <summary>
            Progress task
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.IProgressTask.IsIndeterminate">
            <summary>
            true if an indeterminate progress bar should be used
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.IProgressTask.ProgressMaximum">
            <summary>
            Max progress
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.IProgressTask.ProgressMinimum">
            <summary>
            Minimum progress
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.IProgressTask.Execute(dnSpy.Contracts.MVVM.Dialogs.IProgress)">
            <summary>
            Executes the code
            </summary>
            <param name="progress">Progress</param>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.Dialogs.ProgressVM">
            <summary>
            Progress VM
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.CancelCommand">
            <summary>
            Cancel command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.#ctor(System.Windows.Threading.Dispatcher,dnSpy.Contracts.MVVM.Dialogs.IProgressTask)">
            <summary>
            Constructor
            </summary>
            <param name="dispatcher">Dispatcher to use</param>
            <param name="task">Task</param>
        </member>
        <member name="E:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.OnCompleted">
            <summary>
            Raised when it has completed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.CanCancel">
            <summary>
            true if it <see cref="M:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.Cancel"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.Cancel">
            <summary>
            Cancels the task
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.IsIndeterminate">
            <summary>
            true if an indeterminate progress bar should be used
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.ProgressMinimum">
            <summary>
            Minimum progress
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.ProgressMaximum">
            <summary>
            Max progress
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.TotalProgress">
            <summary>
            Gets/sets the total progress
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.WasCanceled">
            <summary>
            Gets/sets whether it was cancelled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.HasCompleted">
            <summary>
            Gets/sets has-completed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.CurrentItemDescription">
            <summary>
            Gets/sets current description
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.WasError">
            <summary>
            true if there was an error
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.ErrorMessage">
            <summary>
            Gets the error message or null if no error
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.Dialogs.ProgressVM.Token">
            <summary>
            Gets the cancellation token
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.EnumVM">
            <summary>
            Enum value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.EnumVM.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.EnumVM.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumVM.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumVM.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
            <param name="name">Name</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumVM.Create(System.Type,System.Object[])">
            <summary>
            Creates an array of <see cref="T:dnSpy.Contracts.MVVM.EnumVM"/>s
            </summary>
            <param name="enumType">Type of enum</param>
            <param name="values">Values that will be shown first</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumVM.Create(System.Boolean,System.Type,System.Object[])">
            <summary>
            Creates an array of <see cref="T:dnSpy.Contracts.MVVM.EnumVM"/>s
            </summary>
            <param name="sort">true to sort the array</param>
            <param name="enumType">Type of enum</param>
            <param name="values">Values that will be shown first</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumVM.ToString">
            <summary>
            Gets the name
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.EnumListVM">
            <summary>
            List of enum values
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.EnumListVM.SelectedItem">
            <summary>
            Gets the selected item
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumListVM.#ctor(System.Collections.Generic.IList{dnSpy.Contracts.MVVM.EnumVM})">
            <summary>
            Constructor
            </summary>
            <param name="list">Initial value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumListVM.#ctor(System.Collections.Generic.IEnumerable{dnSpy.Contracts.MVVM.EnumVM},System.Action{System.Int32,System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="list">Initial value</param>
            <param name="onChanged">Called when the selected item gets changed</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumListVM.Has(System.Object)">
            <summary>
            Checks whether the list contains a value
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.EnumListVM.GetIndex(System.Object)">
            <summary>
            Gets the index of the value. If it doesn't exist, it's automatically added to the list
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.IInitializeDataTemplate">
            <summary>
            Initializes data templates
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IInitializeDataTemplate.Initialize(System.Windows.DependencyObject)">
            <summary>
            Called to initialize <paramref name="d"/>
            </summary>
            <param name="d">Target object with the <see cref="F:dnSpy.Contracts.MVVM.InitDataTemplateAP.InitializeProperty"/> property</param>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.InitDataTemplateAP">
            <summary>
            Initialize data template attached property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.MVVM.InitDataTemplateAP.InitializeProperty">
            <summary>
            Initialize property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.InitDataTemplateAP.SetInitialize(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets initialize value
            </summary>
            <param name="element">Element</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.InitDataTemplateAP.GetInitialize(System.Windows.FrameworkElement)">
            <summary>
            Gets the initialize value
            </summary>
            <param name="element">Element</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.IsDraggableAP">
            <summary>
            Is-draggable attached property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.MVVM.IsDraggableAP.IsDraggableProperty">
            <summary>
            Is draggable property
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IsDraggableAP.SetIsDraggable(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Writes a new is-draggable value
            </summary>
            <param name="element">Target</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IsDraggableAP.GetIsDraggable(System.Windows.FrameworkElement)">
            <summary>
            Gets the is-draggable value
            </summary>
            <param name="element">Element</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.ListVM`1">
            <summary>
            List of items
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:dnSpy.Contracts.MVVM.ListVM`1.list">
            <summary>The list</summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.ListVM`1.Index">
            <summary>
            Gets the index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.ListVM`1.Items">
            <summary>
            Gets the items
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ListVM`1.InvalidateSelected(System.Collections.Generic.IEnumerable{`0},System.Boolean,`0)">
            <summary>
            
            </summary>
            <param name="newValues"></param>
            <param name="addDefault"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.ListVM`1.SelectedIndex">
            <summary>
            Gets/sets the selected index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.MVVM.ListVM`1.SelectedItem">
            <summary>
            Gets/sets the selected item
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ListVM`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ListVM`1.#ctor(System.Action{System.Int32,System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="onChanged">Called when the selected item gets changed</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ListVM`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor
            </summary>
            <param name="list">Initial value</param>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.ListVM`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Action{System.Int32,System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="list">Initial value</param>
            <param name="onChanged">Called when the selected item gets changed</param>
        </member>
        <member name="E:dnSpy.Contracts.MVVM.ListVM`1.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="F:dnSpy.Contracts.MVVM.ListVM`1.DataErrorInfoDelegate">
            <summary>
            Can be set to validate the list
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.IPickDirectory">
            <summary>
            Asks the user to pick a directory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IPickDirectory.GetDirectory(System.String)">
            <summary>
            Lets the user pick a directory. Returns null if user canceled.
            </summary>
            <param name="currentDir">Current directory or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.PickDirectory">
            <summary>
            Implements <see cref="T:dnSpy.Contracts.MVVM.IPickDirectory"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.PickDirectory.GetDirectory(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.IPickFilename">
            <summary>
            Asks the user to pick a filename
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IPickFilename.GetFilename(System.String,System.String,System.String)">
            <summary>
            Lets the user pick a new filename. Returns null if the user didn't pick a new filename.
            </summary>
            <param name="currentFileName">Current filename or null</param>
            <param name="defaultExtension">Default extension. It must not contain a period. Eg. valid
            extensions are "exe" and "dll" but not ".exe"</param>
            <param name="filter">Filename filter or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IPickFilename.GetFilenames(System.String,System.String,System.String)">
            <summary>
            Lets the user pick filenames. Returns an empty array if the user canceled the dialog box.
            </summary>
            <param name="currentFileName">Current filename or null</param>
            <param name="defaultExtension">Default extension. It must not contain a period. Eg. valid
            extensions are "exe" and "dll" but not ".exe"</param>
            <param name="filter">Filename filter or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.PickFilename">
            <summary>
            Implements <see cref="T:dnSpy.Contracts.MVVM.IPickFilename"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.PickFilename.GetFilename(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.PickFilename.GetFilenames(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.PickFilenameConstants">
            <summary>
            Pick filename constants
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.IPickSaveFilename">
            <summary>
            Asks the user to pick a filename
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.IPickSaveFilename.GetFilename(System.String,System.String,System.String)">
            <summary>
            Lets the user pick a new filename. Returns null if the user didn't pick a new filename.
            </summary>
            <param name="currentFileName">Current filename or null</param>
            <param name="defaultExtension">Default extension. It must not contain a period. Eg. valid
            extensions are "exe" and "dll" but not ".exe"</param>
            <param name="filter">Filename filter or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.PickSaveFilename">
            <summary>
            Implements <see cref="T:dnSpy.Contracts.MVVM.IPickSaveFilename"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.PickSaveFilename.GetFilename(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.MVVM.RelayCommand">
            <summary>
            Implements the <see cref="T:System.Windows.Input.ICommand"/> interface
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.MVVM.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="exec">Called when the command gets executed</param>
            <param name="canExec">Gets called to check whether <paramref name="exec"/> can execute,
            may be null</param>
        </member>
        <member name="T:dnSpy.Contracts.Output.ICachedWriter">
            <summary>
            Writes text to a buffer and flushes it when <see cref="M:dnSpy.Contracts.Output.ICachedWriter.Flush"/>
            (or <see cref="M:System.IDisposable.Dispose"/>) is called.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.ICachedWriter.Flush">
            <summary>
            Flushes current output. This method gets called automatically by <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Output.IOutputService">
            <summary>
            Output manager. Export an <see cref="T:dnSpy.Contracts.Output.IOutputServiceListener"/> to get notified whenever
            the output window is first shown.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputService.Create(System.Guid,System.String,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/>. Returns an existing one if it's already been
            created.
            </summary>
            <param name="guid">Guid of text pane</param>
            <param name="name">Name shown in the UI</param>
            <param name="contentType">Content type or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputService.Create(System.Guid,System.String,System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/>. Returns an existing one if it's already been
            created.
            </summary>
            <param name="guid">Guid of text pane</param>
            <param name="name">Name shown in the UI</param>
            <param name="contentType">Content type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputService.GetTextPane(System.Guid)">
            <summary>
            Returns a <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/>
            </summary>
            <param name="guid">Guid of text pane</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputService.Select(System.Guid)">
            <summary>
            Selects a <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/>
            </summary>
            <param name="guid">Guid of text pane</param>
        </member>
        <member name="T:dnSpy.Contracts.Output.IOutputServiceListener">
            <summary>
            Gets created when <see cref="T:dnSpy.Contracts.Output.IOutputService"/> gets created. Use
            <see cref="T:dnSpy.Contracts.Output.ExportOutputServiceListenerAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Output.IOutputServiceListenerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Output.IOutputServiceListenerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Output.ExportOutputServiceListenerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Output.ExportOutputServiceListenerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Output.IOutputServiceListener"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.ExportOutputServiceListenerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.ExportOutputServiceListenerAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instance</param>
        </member>
        <member name="P:dnSpy.Contracts.Output.ExportOutputServiceListenerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Output.IOutputTextPane">
            <summary>
            Writes to one of the output buffers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Output.IOutputTextPane.Guid">
            <summary>
            Guid of writer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputTextPane.CreateWriter">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Output.ICachedWriter"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputTextPane.Clear">
            <summary>
            Clears all text in the buffer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputTextPane.GetText">
            <summary>
            Gets all text
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Output.IOutputWriter">
            <summary>
            Writes text to a <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputWriter.WriteLine(System.Object,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputWriter.WriteLine(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Output.IOutputWriter.Write(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Text.ColorAndText})">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="T:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.AllFiles">
            <summary>
              Looks up a localized string similar to All files.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.AnErrorOccurred">
             <summary>
               Looks up a localized string similar to An error occurred:
            
            {0}.
             </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Button_Cancel">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.CouldNotConvert">
            <summary>
              Looks up a localized string similar to Could not convert &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.CouldNotConvertFromString">
            <summary>
              Looks up a localized string similar to Could not convert it from a string: {0}.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.CouldNotDeserializeData">
            <summary>
              Looks up a localized string similar to Could not deserialize data: {0}.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Files_DotNetExecutables">
            <summary>
              Looks up a localized string similar to .NET Executables.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Files_DotNetNetModules">
            <summary>
              Looks up a localized string similar to .NET NetModules.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Files_Executables">
            <summary>
              Looks up a localized string similar to Executables.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Files_Images">
            <summary>
              Looks up a localized string similar to Images.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.Files_StrongNameKeyFiles">
            <summary>
              Looks up a localized string similar to Strong Name Key Files.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.InvalidGuid">
            <summary>
              Looks up a localized string similar to Invalid GUID.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.NewDataNotImageList">
            <summary>
              Looks up a localized string similar to The new data is not an image list..
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.NoTypeConverter">
            <summary>
              Looks up a localized string similar to {0} does not have a TypeConverter and can&apos;t be converted from a string..
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.NumberOfBytes">
            <summary>
              Looks up a localized string similar to {0} bytes.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.NumberOfBytesAndType">
            <summary>
              Looks up a localized string similar to {0} bytes, Type = {1}.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.ResourceTypeCantBeChanged">
            <summary>
              Looks up a localized string similar to Resource type can&apos;t be changed.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.SaveResource">
            <summary>
              Looks up a localized string similar to Save Resource.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.SaveResources">
            <summary>
              Looks up a localized string similar to Save Resources.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Properties.dnSpy_Contracts_DnSpy_Resources.ValueMustBeType">
             <summary>
               Looks up a localized string similar to Value must be type {0}.
            Error: {1}.
             </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.AttachOptions">
            <summary>
            Attach options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.AttachOptions.ProcessId">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.Box">
            <summary>
            Boxed value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.Box.Value">
            <summary>
            Get the value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.Box.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.BreakpointKind">
            <summary>
            Breakpoint kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.IL">
            <summary>
            IL code breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.Native">
            <summary>
            Native code breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.Event">
            <summary>
            Debug event breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakpointKind.AnyEvent">
            <summary>
            Any debug event breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind">
            <summary>
            When to break the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.None">
            <summary>
            Don't break
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.CreateProcess">
            <summary>
            Break at the first CreateProcess event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.CreateAppDomain">
            <summary>
            Break at the first CreateAppDomain event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.LoadModule">
            <summary>
            Break at the first LoadModule event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.LoadClass">
            <summary>
            Break at the first LoadClass event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.CreateThread">
            <summary>
            Break at the first CreateThread event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.ExeLoadModule">
            <summary>
            Break at the debugged executable's LoadModule event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.ExeLoadClass">
            <summary>
            Break at the debugged executable's first LoadClass event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.ModuleCctorOrEntryPoint">
            <summary>
            Break at the module .cctor or entry point if there's no module .cctor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.BreakProcessKind.EntryPoint">
            <summary>
            Break at the entry point
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ChainReason">
            <summary>
            Chain reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.None">
            <summary>
            No call chain has been initiated.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ClassInit">
            <summary>
            The chain was initiated by a constructor.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ExceptionFilter">
            <summary>
            The chain was initiated by an exception filter.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.Security">
            <summary>
            The chain was initiated by code that enforces security.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ContextPolicy">
            <summary>
            The chain was initiated by a context policy.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.Interception">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ProcessStart">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ThreadStart">
            <summary>
            The chain was initiated by the start of a thread execution.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.EnterManaged">
            <summary>
            The chain was initiated by entry into managed code.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.EnterUnmanaged">
            <summary>
            The chain was initiated by entry into unmanaged code.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.DebuggerEval">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.ContextSwitch">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ChainReason.FuncEval">
            <summary>
            The chain was initiated by a function evaluation.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo">
            <summary>
            Code chunk info
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.StartAddr">
            <summary>
            Start address
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.#ctor(System.UInt64,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="addr">Address</param>
            <param name="length">Length</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.CodeChunkInfo.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions">
            <summary>
            Debug options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.Options">
            <summary>
            Debug options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.DbgShimFilename">
            <summary>
            dbgshim.dll filename or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.HostFilename">
            <summary>
            Host filename, eg. path to <c>CoreRun.exe</c>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.HostCommandLine">
            <summary>
            Host command line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.CorElementType">
            <summary>
            Element type, identical to <see cref="T:dnlib.DotNet.ElementType"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugEventKind">
            <summary>
            Debug event kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebuggerEventArgs">
            <summary>
            Debugger event args
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerEventArgs.Empty">
            <summary>
            Empty instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.PauseReason">
            <summary>
            Pause reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Other">
            <summary>
            Some unknown reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.UnhandledException">
            <summary>
            An unhandled exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Exception">
            <summary>
            An exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.DebugEventBreakpoint">
            <summary>
            A <see cref="T:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.AnyDebugEventBreakpoint">
            <summary>
            A <see cref="T:dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Break">
            <summary>
            A 'break' IL instruction was executed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.ILCodeBreakpoint">
            <summary>
            An <see cref="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.NativeCodeBreakpoint">
            <summary>
            A <see cref="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint"/> breakpoint got triggered
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Step">
            <summary>
            A step in, step out or step over command has completed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.UserBreak">
            <summary>
            TryBreakProcesses() was called
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Eval">
            <summary>
            Evaluation completed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.PauseReason.Terminated">
            <summary>
            The process has been terminated
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState">
            <summary>
            Pause state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.PauseReason)">
            <summary>
            Constructor
            </summary>
            <param name="reason">Reason</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.EventBreakpointPauseState">
            <summary>
            Debug event breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.EventBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.EventBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.AnyEventBreakpointPauseState">
            <summary>
            Any debug event breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.AnyEventBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.AnyEventBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILBreakpointPauseState">
            <summary>
            IL code breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ILBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.IILBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.NativeBreakpointPauseState">
            <summary>
            Native code breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.NativeBreakpointPauseState.Breakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.NativeBreakpointPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint)">
            <summary>
            Constructor
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.StepPauseState">
            <summary>
            Step in / out / over
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.StepPauseState.StepReason">
            <summary>
            Step reason
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.StepPauseState.#ctor(dnSpy.Contracts.Scripting.Debugger.DebugStepReason)">
            <summary>
            Constructor
            </summary>
            <param name="stepReason">Step reason</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState">
            <summary>
            Debugger process state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Starting">
            <summary>
            Creating the first process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Continuing">
            <summary>
            Process is about to run after having been stopped
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Running">
            <summary>
            Process is running
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Paused">
            <summary>
            Process is temporarily stopped
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Terminated">
            <summary>
            All processes have terminated
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugHandleType">
            <summary>
            Handle type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugHandleType.Strong">
            <summary>
            The handle is strong, which prevents an object from being reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugHandleType.WeakTrackResurrection">
            <summary>
            The handle is weak, which does not prevent an object from being reclaimed by garbage collection.
            
            The handle becomes invalid when the object is collected.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugOptions">
            <summary>
            Debug options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.Filename">
            <summary>
            File to debug
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.CommandLine">
            <summary>
            Command line to pass to debugged program
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.CurrentDirectory">
            <summary>
            Current directory of debugged program or null to use the debugger's cwd
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.DebugOptions.BreakProcessKind">
            <summary>
            Break process kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.DebugStepReason">
            <summary>
            Step reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Normal">
            <summary>
            Stepping completed normally, within the same function.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Return">
            <summary>
            Stepping continued normally, after the function returned.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Call">
            <summary>
            Stepping continued normally, at the beginning of a newly called function.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.ExceptionFilter">
            <summary>
            An exception was generated and control was passed to an exception filter.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.ExceptionHandler">
            <summary>
            An exception was generated and control was passed to an exception handler.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Intercept">
            <summary>
            Control was passed to an interceptor.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.DebugStepReason.Exit">
            <summary>
            The thread exited before the step was completed.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame">
            <summary>
            Exception object stack frame
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.IP">
            <summary>
            Instruction pointer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.Token">
            <summary>
            Method token
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.IsLastForeignExceptionFrame">
            <summary>
            true if it's last foreign exception frame
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame.#ctor(dnSpy.Contracts.Scripting.Debugger.IDebuggerModule,System.UInt64,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="ip">IP</param>
            <param name="token">Method token</param>
            <param name="isLastForeignExceptionFrame">true if it's last foreign exception frame</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint">
            <summary>
            Any debug event breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAppDomain">
            <summary>
            An AppDomain in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Id">
            <summary>
            AppDomain Id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IsAttached">
            <summary>
            true if the debugger is attached to the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IsRunning">
            <summary>
            true if the threads are running freely
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Name">
            <summary>
            AppDomain name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.HasExited">
            <summary>
            true if the AppDomain has exited
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Threads">
            <summary>
            Gets all threads
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Assemblies">
            <summary>
            Gets all assemblies
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Modules">
            <summary>
            Gets all modules
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CorLib">
            <summary>
            Gets the core module (mscorlib)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetModule(System.Reflection.Module)">
            <summary>
            Finds a module
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetModule(dnSpy.Contracts.Metadata.ModuleId)">
            <summary>
            Finds a module
            </summary>
            <param name="name">Module name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetModuleByName(System.String)">
            <summary>
            Finds a module
            </summary>
            <param name="name">Full path, filename, or filename without extension of module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetAssembly(System.Reflection.Assembly)">
            <summary>
            Finds an assembly
            </summary>
            <param name="asm">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetAssembly(System.String)">
            <summary>
            Finds an assembly
            </summary>
            <param name="name">Full path, filename, or filename without extension of assembly, or
            assembly simple name or assembly full name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetClass(System.String,System.String)">
            <summary>
            Finds a class
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetMethod(System.String,System.String,System.String)">
            <summary>
            Finds a method
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetField(System.String,System.String,System.String)">
            <summary>
            Finds a field
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetProperty(System.String,System.String,System.String)">
            <summary>
            Finds a property
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetEvent(System.String,System.String,System.String)">
            <summary>
            Finds an event
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetMethod(System.String,System.UInt32)">
            <summary>
            Finds a method
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetField(System.String,System.UInt32)">
            <summary>
            Finds a field
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetProperty(System.String,System.UInt32)">
            <summary>
            Finds a property
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Property token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetEvent(System.String,System.UInt32)">
            <summary>
            Finds an event
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Event token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetType(System.String,System.String)">
            <summary>
            Finds a type
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetType(System.String,System.String,dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Finds a type
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="genericArguments">Generic arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetType(System.Type)">
            <summary>
            Finds a type
            </summary>
            <param name="type">A type that must exist in one of the loaded assemblies in the
            debugged process.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CreateFnPtr(dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Creates a function pointer type
            </summary>
            <param name="types">Function types. The first type is the return type.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CreateFunctionPointer(dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Creates a function pointer type
            </summary>
            <param name="types">Function types. The first type is the return type.</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Void">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Void"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Boolean">
            <summary>
            Gets type <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Char">
            <summary>
            Gets type <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.SByte">
            <summary>
            Gets type <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Byte">
            <summary>
            Gets type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Int16">
            <summary>
            Gets type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UInt16">
            <summary>
            Gets type <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Int32">
            <summary>
            Gets type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UInt32">
            <summary>
            Gets type <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Int64">
            <summary>
            Gets type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UInt64">
            <summary>
            Gets type <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Single">
            <summary>
            Gets type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Double">
            <summary>
            Gets type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.String">
            <summary>
            Gets type <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.TypedReference">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.TypedReference"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.IntPtr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UIntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.UIntPtr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Object">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Object"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Decimal">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.Decimal"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomain.CLRObject">
            <summary>
            Gets the CLR AppDomain object or null if it hasn't been constructed yet
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IAppDomain.SetAllThreadsDebugState(dnSpy.Contracts.Scripting.Debugger.ThreadState,dnSpy.Contracts.Scripting.Debugger.IDebuggerThread)">
            <summary>
            Sets the debug state of all managed threads
            </summary>
            <param name="state">New state</param>
            <param name="thread">Thread to exempt from the new state or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IBreakpoint">
            <summary>
            Breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.Kind">
            <summary>
            Gets the breakpoint kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.IsEnabled">
            <summary>
            true if the breakpoint is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.Tag">
            <summary>
            The user can set this property to any value. It's not used by the debugger.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IBreakpoint.Remove">
            <summary>
            Removes the breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint">
            <summary>
            A code breakpoint (IL or native)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.IsIL">
            <summary>
            true if it's an IL breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.IsNative">
            <summary>
            true if it's a native breakpoint (<see cref="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.Module">
            <summary>
            Gets the module name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.Token">
            <summary>
            Gets the method token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICodeBreakpoint.Offset">
            <summary>
            Gets the offset of the breakpoint relative to the start of the method
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebugEventContext">
            <summary>
            Debug event context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugEventContext.Kind">
            <summary>
            Gets the event kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IProcessEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CreateProcess"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ExitProcess"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IThreadEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CreateThread"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ExitThread"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IThreadEventContext.AppDomain">
            <summary>
            Gets the AppDomain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IThreadEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IModuleEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadModule"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UnloadModule"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IModuleEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IModuleEventContext.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IClassEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadClass"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UnloadClass"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IClassEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IClassEventContext.Class">
            <summary>
            Gets the class
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAppDomainEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CreateAppDomain"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ExitAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAppDomainEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IAssemblyEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadAssembly"/> and <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UnloadAssembly"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAssemblyEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IAssemblyEventContext.Assembly">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LogMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.Level">
            <summary>
            Gets the logging level
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.LowSwitchName">
            <summary>
            Gets the low switch name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogMessageEventContext.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.LoggingLevel">
            <summary>
            Logging level
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.LogSwitchCallReason">
            <summary>
            Log switch call reason
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LogMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.Level">
            <summary>
            Gets the logging level
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.Reason">
            <summary>
            Gets the reason
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.LowSwitchName">
            <summary>
            Gets the low switch name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILogSwitchEventContext.ParentName">
            <summary>
            Gets the parent name
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IControlCTrapEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.ControlCTrap"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.INameChangeEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.NameChange"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.INameChangeEventContext.AppDomain">
            <summary>
            Gets the AppDomain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.INameChangeEventContext.Thread">
            <summary>
            Gets the thread or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IUpdateModuleSymbolsEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.UpdateModuleSymbols"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IUpdateModuleSymbolsEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IUpdateModuleSymbolsEventContext.Module">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.MDAFlags">
            <summary>
            MDA flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MDAFlags.Slip">
            <summary>
            The thread on which the MDA was fired has slipped since the MDA was fired.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.MDANotification"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Thread">
            <summary>
            Gets the thread or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.ThreadSlipped">
            <summary>
            true if the thread on which the MDA was fired has slipped since the MDA was fired.
            
            When the call stack no longer describes where the MDA was originally raised, the thread
            is considered to have slipped. This is an unusual circumstance brought about by the
            thread's execution of an invalid operation upon exiting.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.OSThreadId">
            <summary>
            Gets the OS thread ID. This could be a non-managed thread ID.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.Description">
            <summary>
            Gets the description
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IMDANotificationEventContext.XML">
            <summary>
            Gets the XML
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ICustomNotificationEventContext">
            <summary>
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.CustomNotification"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICustomNotificationEventContext.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ICustomNotificationEventContext.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebugger">
            <summary>
            Script access to the debugger extension
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Scripting.Debugger.IDebugger.OnProcessStateChanged">
            <summary>
            Notified when <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> gets changed. This gets notified on the main UI
            thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State">
            <summary>
            Gets the debugger process state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.PauseStates">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Scripting.Debugger.DebuggerPauseState"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.PauseReason">
            <summary>
            Gets the first <see cref="T:dnSpy.Contracts.Scripting.Debugger.PauseReason"/> from <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.PauseStates"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsStarting">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Starting"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsContinuing">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Continuing"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsRunning">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Running"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsPaused">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Paused"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsTerminated">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.State"/> equals <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebuggerProcessState.Terminated"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsDebugging">
            <summary>
            true if we're debugging
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.HasAttached">
            <summary>
            true if we attached to the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IsEvaluating">
            <summary>
            true if we're evaluating (eg. a property in the debugged process is being called by the
            debugger)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.EvalCompleted">
            <summary>
            true if an eval has completed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)">
            <summary>
            Waits until the debugged process is paused or terminated. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitRunAsync(System.Int32)">
            <summary>
            Waits until the debugged process is not paused. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)">
            <summary>
            Waits until the debugged process is paused or terminated. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Waits until the debugged process is paused or terminated. Returns true if the wait didn't time out.
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitRun(System.Int32)">
            <summary>
            Waits until the debugged process is not paused. Returns true if the wait didn't time out.
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitRun(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Waits until the debugged process is not paused. Returns true if the wait didn't time out.
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Start">
            <summary>
            Shows a dialog box and debugs the selected process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Start(dnSpy.Contracts.Scripting.Debugger.DebugOptions)">
            <summary>
            Debug a program
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Start(System.String,System.String,System.String,dnSpy.Contracts.Scripting.Debugger.BreakProcessKind)">
            <summary>
            Debug a program
            </summary>
            <param name="filename">Filename</param>
            <param name="cmdLine">Command line</param>
            <param name="cwd">Working directory</param>
            <param name="breakKind">Break kind</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StartCoreCLR">
            <summary>
            Shows a dialog box and debugs the selected CoreCLR process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StartCoreCLR(dnSpy.Contracts.Scripting.Debugger.CoreCLRDebugOptions)">
            <summary>
            Debug a CoreCLR program
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StartCoreCLR(System.String,System.String,System.String,dnSpy.Contracts.Scripting.Debugger.BreakProcessKind,System.String,System.String)">
            <summary>
            Debug a CoreCLR program
            </summary>
            <param name="filename">Filename</param>
            <param name="cmdLine">Command line</param>
            <param name="cwd">Working directory</param>
            <param name="breakKind">Break kind</param>
            <param name="hostFilename">Host filename, eg. path to <c>CoreRun.exe</c></param>
            <param name="hostCommandLine">Host command line</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Attach">
            <summary>
            Shows a dialog box and attaches to the selected process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Attach(dnSpy.Contracts.Scripting.Debugger.AttachOptions)">
            <summary>
            Attach to a process
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Attach(System.Int32)">
            <summary>
            Attach to a process
            </summary>
            <param name="pid">Process id</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Restart">
            <summary>
            Restart the debugged process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Break">
            <summary>
            Break the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Stop">
            <summary>
            Stop and kill the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Detach">
            <summary>
            Detach
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Continue">
            <summary>
            Let the debugged program run
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ContinueAsync(System.Int32)">
            <summary>
            Let the debugged program run and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ContinueWait(System.Int32)">
            <summary>
            Let the debugged program run and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ContinueWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Let the debugged program run and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepInto">
            <summary>
            Step into the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepInto(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Step into the method
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoAsync(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepIntoWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOver">
            <summary>
            Step over the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOver(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Step over the method
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverAsync(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOverWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOut">
            <summary>
            Step out of the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOut(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Step out of the method
            </summary>
            <param name="frame">Frame</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutAsync(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.StepOutWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunTo(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/>
            </summary>
            <param name="frame">Frame</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunToAsync(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/> and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunToWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/> and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.RunToWait(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Let the program execute until it returns to <paramref name="frame"/> and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.SetNativeOffset(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="frame">Frame</param>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Threads">
            <summary>
            Gets all threads
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveThread">
            <summary>
            Gets/sets the active thread shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveFrame">
            <summary>
            Gets/sets the active stack frame of the active thread shown in the UI. See also
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveILFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveILFrame">
            <summary>
            Gets the active IL frame. This is the first IL frame in the active thread, and is usually
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.ActiveFrameIndex">
            <summary>
            Gets/sets the active stack frame index of the active thread shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.AppDomains">
            <summary>
            Gets all AppDomains
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain">
            <summary>
            Gets the first <see cref="T:dnSpy.Contracts.Scripting.Debugger.IAppDomain"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.AppDomains"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Assemblies">
            <summary>
            Gets all assemblies in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Modules">
            <summary>
            Gets all modules in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.CorLib">
            <summary>
            Gets the core module (mscorlib) in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetModule(System.Reflection.Module)">
            <summary>
            Finds a module in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetModule(dnSpy.Contracts.Metadata.ModuleId)">
            <summary>
            Finds a module in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="name">Module name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetModuleByName(System.String)">
            <summary>
            Finds a module in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="name">Full path, filename, or filename without extension of module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetAssembly(System.Reflection.Assembly)">
            <summary>
            Finds an assembly in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="asm">Assembly</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetAssembly(System.String)">
            <summary>
            Finds an assembly in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="name">Full path, filename, or filename without extension of assembly, or
            assembly simple name or assembly full name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetClass(System.String,System.String)">
            <summary>
            Finds a class in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetMethod(System.String,System.String,System.String)">
            <summary>
            Finds a method in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetField(System.String,System.String,System.String)">
            <summary>
            Finds a field in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetProperty(System.String,System.String,System.String)">
            <summary>
            Finds a property in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetEvent(System.String,System.String,System.String)">
            <summary>
            Finds an event in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetType(System.String,System.String)">
            <summary>
            Finds a type in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetType(System.String,System.String,dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Finds a type in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="genericArguments">Generic arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetType(System.Type)">
            <summary>
            Finds a type in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
            <param name="type">A type that must exist in one of the loaded assemblies in the
            debugged process.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Void">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Void"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Boolean">
            <summary>
            Gets type <see cref="T:System.Boolean"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Char">
            <summary>
            Gets type <see cref="T:System.Char"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.SByte">
            <summary>
            Gets type <see cref="T:System.SByte"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Byte">
            <summary>
            Gets type <see cref="T:System.Byte"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Int16">
            <summary>
            Gets type <see cref="T:System.Int16"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UInt16">
            <summary>
            Gets type <see cref="T:System.UInt16"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Int32">
            <summary>
            Gets type <see cref="T:System.Int32"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UInt32">
            <summary>
            Gets type <see cref="T:System.UInt32"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Int64">
            <summary>
            Gets type <see cref="T:System.Int64"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UInt64">
            <summary>
            Gets type <see cref="T:System.UInt64"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Single">
            <summary>
            Gets type <see cref="T:System.Single"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Double">
            <summary>
            Gets type <see cref="T:System.Double"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.String">
            <summary>
            Gets type <see cref="T:System.String"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.TypedReference">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.TypedReference"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.IntPtr"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UIntPtr">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.UIntPtr"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Object">
            <summary>
            Gets type <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Object"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.Decimal">
            <summary>
            Gets type <see cref="T:System.Decimal"/> in <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebugger.FirstAppDomain"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateBreakpoint(dnSpy.Contracts.Metadata.ModuleId,System.UInt32,System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateBreakpoint(dnSpy.Contracts.Metadata.ModuleId,System.UInt32,System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Metadata.ModuleId,System.UInt32,System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have
            been jitted or setting the breakpoint will fail.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Metadata.ModuleId,System.UInt32,System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have
            been jitted or setting the breakpoint will fail.
            </summary>
            <param name="module">Module</param>
            <param name="token">Method token</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Scripting.Debugger.IDebuggerCode,System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI. The method must have been jitted or setting the breakpoint will fail.
            </summary>
            <param name="code">Native code</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateNativeBreakpoint(dnSpy.Contracts.Scripting.Debugger.IDebuggerCode,System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI. The method must have been jitted or setting the breakpoint will fail.
            </summary>
            <param name="code">Native code</param>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateBreakpoint(dnSpy.Contracts.Scripting.Debugger.DebugEventKind,System.Func{dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint,dnSpy.Contracts.Scripting.Debugger.IDebugEventContext,System.Boolean})">
            <summary>
            Creates an event breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="eventKind">Event</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateLoadModuleBreakpoint(System.Func{dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint,dnSpy.Contracts.Scripting.Debugger.IModuleEventContext,System.Boolean})">
            <summary>
            Creates a <see cref="F:dnSpy.Contracts.Scripting.Debugger.DebugEventKind.LoadModule"/> debug event breakpoint
            </summary>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.CreateAnyEventBreakpoint(System.Func{dnSpy.Contracts.Scripting.Debugger.IAnyEventBreakpoint,dnSpy.Contracts.Scripting.Debugger.IDebugEventContext,System.Boolean})">
            <summary>
            Creates an any-event breakpoint that's only valid for the current debugging session (or
            the next one if we're not debugging). The breakpoint is not added to the breakpoints
            shown in the UI.
            </summary>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.BreakOnLoad(System.String,System.Action{dnSpy.Contracts.Scripting.Debugger.IDebuggerModule})">
            <summary>
            Breaks when a module gets loaded
            </summary>
            <param name="name">Module name. Can be the full path or just the filename or filename
            without the extension</param>
            <param name="action">Called (on the UI thread) when the module gets loaded</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.BreakOnLoadAssembly(System.String,System.Action{dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly},dnlib.DotNet.AssemblyNameComparerFlags)">
            <summary>
            Breaks when an assembly gets loaded
            </summary>
            <param name="assemblyName">Assembly name or just part of the full name</param>
            <param name="action">Called (on the UI thread) when the module gets loaded</param>
            <param name="flags">Assembly name comparer flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.BreakOnLoadAssembly(dnlib.DotNet.IAssembly,System.Action{dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly},dnlib.DotNet.AssemblyNameComparerFlags)">
            <summary>
            Breaks when an assembly gets loaded
            </summary>
            <param name="assembly">Assembly</param>
            <param name="action">Called (on the UI thread) when the module gets loaded</param>
            <param name="flags">Assembly name comparer flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Remove(dnSpy.Contracts.Scripting.Debugger.IBreakpoint)">
            <summary>
            Removes a breakpoint
            </summary>
            <param name="bp">Breakpoint</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Read(System.UInt64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="address">Address</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="address">Address</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="address">Address</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte[])">
            <summary>
            Writes data to memory in the debugged process. Throws if all bytes couldn't be written.
            </summary>
            <param name="address">Address</param>
            <param name="array">Source</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadBoolean(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadChar(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Char"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadSByte(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.SByte"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadByte(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadInt16(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadUInt16(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadInt32(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadUInt32(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadInt64(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadUInt64(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadSingle(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Single"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadDouble(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Double"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.ReadDecimal(System.UInt64)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Write(System.UInt64,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> to an address in the debugged process
            </summary>
            <param name="address">Address</param>
            <param name="value">Value</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly">
            <summary>
            An assembly in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.UniqueId">
            <summary>
            Unique id per debugger
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.AppDomain">
            <summary>
            Gets the AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.Modules">
            <summary>
            Gets the modules
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.IsFullyTrusted">
            <summary>
            true if the assembly has been granted full trust by the runtime security system
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.Name">
            <summary>
            Assembly name, and is usually the full path to the manifest (first) module on disk
            (the EXE or DLL file).
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.FullName">
            <summary>
            Gets the full name, identical to the dnlib assembly full name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.ManifestModule">
            <summary>
            Gets the manifest module or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerAssembly.HasUnloaded">
            <summary>
            true if the assembly has been unloaded
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass">
            <summary>
            A non-instantiated type (see <c>ICorDebugClass</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Namespace">
            <summary>
            Gets the namespace or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.FullName">
            <summary>
            Gets the full name, which is the same as calling <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Attributes">
            <summary>
            Gets the type attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Visibility">
            <summary>
            Gets the visibility
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNotPublic">
            <summary>
            true if not public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedPublic">
            <summary>
            true if nested public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedPrivate">
            <summary>
            true if nested private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedFamily">
            <summary>
            true if nested family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedAssembly">
            <summary>
            true if nested assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedFamilyAndAssembly">
            <summary>
            true if nested family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsNestedFamilyOrAssembly">
            <summary>
            true if nested family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Layout">
            <summary>
            Gets the layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAutoLayout">
            <summary>
            true if auto layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSequentialLayout">
            <summary>
            true if sequential layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsExplicitLayout">
            <summary>
            true if explicit layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsInterface">
            <summary>
            true if it's an interface
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsClass">
            <summary>
            true if it's a class or struct
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAbstract">
            <summary>
            true if it's abstract
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSealed">
            <summary>
            true if it's sealed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSpecialName">
            <summary>
            true if's special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsImport">
            <summary>
            true if it's an import
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSerializable">
            <summary>
            true if it's serializable
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsWindowsRuntime">
            <summary>
            true if it's windows runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.StringFormat">
            <summary>
            Gets the string format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAnsiClass">
            <summary>
            true if it's an ANSI string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsUnicodeClass">
            <summary>
            true if it's a unicode string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsAutoClass">
            <summary>
            true if it's an auto string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsCustomFormatClass">
            <summary>
            true if it's a custom string format class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsBeforeFieldInit">
            <summary>
            true if it's before field init
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsForwarder">
            <summary>
            true if it's a forwarder
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsRuntimeSpecialName">
            <summary>
            true if it's a runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.HasSecurity">
            <summary>
            true if it has a security descriptor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Token">
            <summary>
            Gets the token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.BaseType">
            <summary>
            Gets the base type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystemEnum">
            <summary>
            true if this is <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystemValueType">
            <summary>
            true if this is <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystemObject">
            <summary>
            true if this is <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.IsSystem(System.String)">
            <summary>
            Returns true if it's a System.XXX type in the corlib (eg. mscorlib)
            </summary>
            <param name="name">Name (not including namespace)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.SetJustMyCode(System.Boolean)">
            <summary>
            Mark all methods in the type as user code
            </summary>
            <param name="jmc">true to set user code</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.HasAttribute(System.String)">
            <summary>
            Returns true if an attribute is present
            </summary>
            <param name="attributeName">Full name of attribute type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ToType(dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>
            </summary>
            <param name="typeArgs">Generic type arguments or null</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Methods">
            <summary>
            Gets all methods declared in this class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Fields">
            <summary>
            Gets all fields declared in this class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Properties">
            <summary>
            Gets all properties declared in this class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Events">
            <summary>
            Gets all events declared in this class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethods(System.Boolean)">
            <summary>
            Returns all methods
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethods(System.String,System.Boolean)">
            <summary>
            Finds methods
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.String,System.Boolean)">
            <summary>
            Finds a method. If only one method is found, it's returned, else the method that takes
            no arguments is returned, or null if it doesn't exist.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.String,System.Object[])">
            <summary>
            Finds a method with a certain signature. Base classes are also searched.
            </summary>
            <param name="name">Method name</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.String,System.Boolean,System.Object[])">
            <summary>
            Finds a method with a certain signature.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetConstructors">
            <summary>
            Returns all constructors
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetConstructor">
            <summary>
            Returns the default constructor or null if not found
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetConstructor(System.Object[])">
            <summary>
            Returns a constructor
            </summary>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetFields(System.Boolean)">
            <summary>
            Returns all fields
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetFields(System.String,System.Boolean)">
            <summary>
            Finds fields
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetField(System.String,System.Boolean)">
            <summary>
            Finds a field
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperties(System.Boolean)">
            <summary>
            Returns all properties
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperties(System.String,System.Boolean)">
            <summary>
            Finds properties
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperty(System.String,System.Boolean)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvents(System.Boolean)">
            <summary>
            Returns all events
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvents(System.String,System.Boolean)">
            <summary>
            Finds events
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvent(System.String,System.Boolean)">
            <summary>
            Finds a event
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Token of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerClass.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode">
            <summary>
            Code in the debugged process (<c>ICorDebugCode</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.IsIL">
            <summary>
            true if it's IL code, false if native
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Size">
            <summary>
            Gets the size of the code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Address">
            <summary>
            Gets the address of code (eg. IL instructions). If it's IL, it doesn't include the
            method header.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.VersionNumber">
            <summary>
            Gets the EnC (edit and continue) version number of this method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Method">
            <summary>
            Gets the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.GetCodeChunks">
            <summary>
            Gets all code chunks if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.IsIL"/> is <c>false</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.ReadCode">
            <summary>
            Reads the (IL or native) code at <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Address"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateNativeBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.CreateNativeBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerCode.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent">
            <summary>
            An event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.IsSpecialName">
            <summary>
            true if it's special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.IsRuntimeSpecialName">
            <summary>
            true if it's runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Adder">
            <summary>
            Gets the adder method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Invoker">
            <summary>
            Gets the invoker method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Remover">
            <summary>
            Gets the remover method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.OtherMethods">
            <summary>
            Gets the other methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerEvent.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerField">
            <summary>
            A field
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Access">
            <summary>
            Gets the access
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsCompilerControlled">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPrivateScope">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPrivate">
            <summary>
            true if private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsFamilyAndAssembly">
            <summary>
            true if family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsAssembly">
            <summary>
            true if assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsFamily">
            <summary>
            treu if family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsFamilyOrAssembly">
            <summary>
            true if family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsStatic">
            <summary>
            true if static
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsInitOnly">
            <summary>
            true if init only
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsLiteral">
            <summary>
            true if literal
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsNotSerialized">
            <summary>
            true if not serialized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsSpecialName">
            <summary>
            true if special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsPinvokeImpl">
            <summary>
            true if P/Invoke implementation
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.IsRuntimeSpecialName">
            <summary>
            true if runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.HasFieldMarshal">
            <summary>
            true if it has a marshal attribute
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.HasDefault">
            <summary>
            true if it has a default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.HasFieldRVA">
            <summary>
            true if it has an RVA
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.FieldSig">
            <summary>
            Gets the method signature. It's currently using custom <see cref="T:dnlib.DotNet.TypeDef"/>,
            <see cref="T:dnlib.DotNet.TypeRef"/> and <see cref="T:dnlib.DotNet.TypeSpec"/> instances that don't reveal all
            information available in the metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Constant">
            <summary>
            Gets the constant
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.ReadStatic(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="type">Declaring type. Can be null if it's not a generic type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerField.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod">
            <summary>
            A method in a module in the debugged process (<c>ICorDebugFunction</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.ImplAttributes">
            <summary>
            Gets the implementation attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Access">
            <summary>
            Gets the access
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsCompilerControlled">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPrivateScope">
            <summary>
            true if compiler controlled / private scope
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPrivate">
            <summary>
            true if private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFamilyAndAssembly">
            <summary>
            true if family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsAssembly">
            <summary>
            true if assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFamily">
            <summary>
            true if family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFamilyOrAssembly">
            <summary>
            true if family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsStatic">
            <summary>
            true if static
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsFinal">
            <summary>
            true if final
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsVirtual">
            <summary>
            true if virtual
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsHideBySig">
            <summary>
            true if hide by signature
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNewSlot">
            <summary>
            true if new slot
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsReuseSlot">
            <summary>
            true if reuse slot
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsCheckAccessOnOverride">
            <summary>
            true if check access on override
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsAbstract">
            <summary>
            true if abstract
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsSpecialName">
            <summary>
            true if special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPinvokeImpl">
            <summary>
            true if P/Invoke implementation
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsUnmanagedExport">
            <summary>
            true if unmanaged export
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsRuntimeSpecialName">
            <summary>
            true if runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.HasSecurity">
            <summary>
            true if it has a security descriptor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsRequireSecObject">
            <summary>
            true if require security object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CodeType">
            <summary>
            Gets the code type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsIL">
            <summary>
            true if IL code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNative">
            <summary>
            true if native code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsOPTIL">
            <summary>
            true if OPTIL code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsRuntime">
            <summary>
            true if runtime code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsUnmanaged">
            <summary>
            true if unmanaged code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsManaged">
            <summary>
            true if managed code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsForwardRef">
            <summary>
            true if forward reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsPreserveSig">
            <summary>
            true if preserve signature
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsInternalCall">
            <summary>
            true if internal call
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsSynchronized">
            <summary>
            true if synchronized
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNoInlining">
            <summary>
            true if no inlining
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsAggressiveInlining">
            <summary>
            true if aggressive inlining
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.IsNoOptimization">
            <summary>
            true if no optimization
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.MethodSig">
            <summary>
            Gets the method signature. It's currently using custom <see cref="T:dnlib.DotNet.TypeDef"/>,
            <see cref="T:dnlib.DotNet.TypeRef"/> and <see cref="T:dnlib.DotNet.TypeSpec"/> instances that don't reveal all
            information available in the metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.JustMyCode">
            <summary>
            Gets/sets JMC (just my code) flag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CurrentVersionNumber">
            <summary>
            Gets EnC (edit and continue) version number of the latest edit, and might be greater
            than this method's version number. See <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.VersionNumber"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.VersionNumber">
            <summary>
            Gets the EnC (edit and continue) version number of this method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.LocalVarSigToken">
            <summary>
            Gets the local variables signature token or 0 if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.ILCode">
            <summary>
            Gets the IL code or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.NativeCode">
            <summary>
            Gets the native code or null. If it's a generic method that's been JITed more than once,
            the returned code could be any one of the JITed codes.
            </summary>
            <remarks><c>EnumerateNativeCode()</c> should be called but that method hasn't been
            implemented by the CLR debugger yet.</remarks>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.IILBreakpoint,System.Boolean})">
            <summary>
            Creates an IL code breakpoint that's only valid for the current debugging session. The
            breakpoint is not added to the breakpoints shown in the UI.
            </summary>
            <param name="offset">IL code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateNativeBreakpoint(System.UInt32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.CreateNativeBreakpoint(System.Int32,System.Func{dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint,System.Boolean})">
            <summary>
            Creates a native code breakpoint that's only valid for the current debugging session.
            The breakpoint is not added to the breakpoints shown in the UI. The method must have been
            jitted or setting the breakpoint will fail.
            </summary>
            <param name="offset">Native code offset in method</param>
            <param name="cond">Returns true if the breakpoint should pause the debugged process. Called on the UI thread.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule">
            <summary>
            A module in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ModuleId">
            <summary>
            Gets the module name instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.UniqueId">
            <summary>
            Unique id per debugger
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.AppDomain">
            <summary>
            Gets the owner AppDomain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Assembly">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsManifestModule">
            <summary>
            true if this is the manifest module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Name">
            <summary>
            For on-disk modules this is a full path. For dynamic modules this is just the filename
            if one was provided. Otherwise, and for other in-memory modules, this is just the simple
            name stored in the module's metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.DnlibName">
            <summary>
            Gets the name from the MD, which is the same as <see cref="P:dnlib.DotNet.ModuleDef.Name"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.UniquerName">
            <summary>
            Gets the name of the module. If it's an in-memory module, the hash code is included to
            make it uniquer since <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Name"/> could have any value.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Address">
            <summary>
            Gets the base address of the module or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Size">
            <summary>
            Gets the size of the module or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic">
            <summary>
            true if it's a dynamic module that can add/remove types
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsInMemory">
            <summary>
            true if this is an in-memory module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.HasUnloaded">
            <summary>
            true if the module has been unloaded
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ResolveAssembly(System.UInt32)">
            <summary>
            Resolves an assembly reference. If the assembly hasn't been loaded, or if
            <paramref name="asmRefToken"/> is invalid, null is returned.
            </summary>
            <param name="asmRefToken">Valid assembly reference token in this module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetMethod(System.UInt32)">
            <summary>
            Gets a method in this module
            </summary>
            <param name="token"><c>Method</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetField(System.UInt32)">
            <summary>
            Gets a field in this module
            </summary>
            <param name="token"><c>Field</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetProperty(System.UInt32)">
            <summary>
            Gets a property in this module
            </summary>
            <param name="token"><c>Property</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetEvent(System.UInt32)">
            <summary>
            Gets an event in this module
            </summary>
            <param name="token"><c>Event</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetClass(System.UInt32)">
            <summary>
            Gets a type in this module
            </summary>
            <param name="token"><c>TypeDef</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.UInt32)">
            <summary>
            Gets a type in this module
            </summary>
            <param name="token"><c>TypeDef</c> token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetGlobalVariableValue(System.UInt32)">
            <summary>
            Gets the value of a global field
            </summary>
            <param name="fdToken">Token of a global field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.SetJMCStatus(System.Boolean)">
            <summary>
            Set just my code flag
            </summary>
            <param name="isJustMyCode">true if it's user code</param>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsFileLayout">
            <summary>
            true if the memory layout is identical to file layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsMemoryLayout">
            <summary>
            true if the OS loader has mapped the executable in memory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.InitializePE">
            <summary>
            Can be called to initialize cached PE data in case that data is destroyed by the program
            at runtime.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.RVAToAddress(System.UInt32)">
            <summary>
            Converts <paramref name="rva"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.OffsetToAddress(System.UInt32)">
            <summary>
            Converts <paramref name="offset"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.AddressToRVA(System.UInt64)">
            <summary>
            Converts <paramref name="address"/> to an RVA
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.AddressToOffset(System.UInt64)">
            <summary>
            Converts <paramref name="address"/> to a file offset
            </summary>
            <param name="address">Address</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.RVAToOffset(System.UInt32)">
            <summary>
            Converts <paramref name="rva"/> to a file offset
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.OffsetToRVA(System.UInt32)">
            <summary>
            Converts <paramref name="offset"/> to an RVA
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Read(System.UInt32,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="rva">RVA</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte[])">
            <summary>
            Writes data to memory in the debugged process. Throws if all bytes couldn't be written.
            </summary>
            <param name="rva">RVA</param>
            <param name="array">Source</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadBoolean(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadChar(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Char"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSByte(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.SByte"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadByte(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt16(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt16(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt32(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt32(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt64(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt64(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSingle(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Single"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDouble(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Double"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDecimal(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Write(System.UInt32,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> to an address in the debugged process
            </summary>
            <param name="rva">RVA</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Destination</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.UInt32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadOffset(System.UInt32,System.Int32)">
            <summary>
            Reads memory from the debugged process. Unmapped memory is read as 0s.
            </summary>
            <param name="offset">File offset</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte[],System.Int64,System.UInt32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Writes data to memory in the debugged process. Returns the number of bytes written.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Source</param>
            <param name="index">Index in <paramref name="array"/></param>
            <param name="count">Number of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte[])">
            <summary>
            Writes data to memory in the debugged process. Throws if all bytes couldn't be written.
            </summary>
            <param name="offset">File offset</param>
            <param name="array">Source</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadBooleanOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadCharOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Char"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSByteOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.SByte"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadByteOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt16Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt16Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt32Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt32Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadInt64Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadUInt64Offset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadSingleOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Single"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDoubleOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Double"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.ReadDecimalOffset(System.UInt32)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> from an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.WriteOffset(System.UInt32,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> to an address in the debugged process
            </summary>
            <param name="offset">File offset</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Save">
            <summary>
            Save the module to a byte[]. Can't be called if it's a dynamic assembly (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic"/> is true)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Save(System.IO.Stream)">
            <summary>
            Save the module to a stream. Can't be called if it's a dynamic assembly (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic"/> is true)
            </summary>
            <param name="stream">Destination stream</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.Save(System.String)">
            <summary>
            Save the module to a file. Can't be called if it's a dynamic assembly (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.IsDynamic"/> is true)
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetClass(System.String)">
            <summary>
            Finds a class
            </summary>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetMethod(System.String,System.String)">
            <summary>
            Finds a method
            </summary>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetField(System.String,System.String)">
            <summary>
            Finds a field
            </summary>
            <param name="className">Class name</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetProperty(System.String,System.String)">
            <summary>
            Finds a property
            </summary>
            <param name="className">Class name</param>
            <param name="propertyName">Property name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetEvent(System.String,System.String)">
            <summary>
            Finds an event
            </summary>
            <param name="className">Class name</param>
            <param name="eventName">Event name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.String)">
            <summary>
            Finds a type
            </summary>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.String,dnSpy.Contracts.Scripting.Debugger.IDebuggerType[])">
            <summary>
            Finds a type
            </summary>
            <param name="className">Class name</param>
            <param name="genericArguments">Generic arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetType(System.Type)">
            <summary>
            Finds a type
            </summary>
            <param name="type">A type that must exist in one of the loaded assemblies in the
            debugged process.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerModule.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty">
            <summary>
            A property
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Attributes">
            <summary>
            Gets the attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.IsSpecialName">
            <summary>
            true if special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.IsRuntimeSpecialName">
            <summary>
            true if it has a special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.HasDefault">
            <summary>
            true if it has a default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.PropertySig">
            <summary>
            Gets the property signature. It's currently using custom <see cref="T:dnlib.DotNet.TypeDef"/>,
            <see cref="T:dnlib.DotNet.TypeRef"/> and <see cref="T:dnlib.DotNet.TypeSpec"/> instances that don't reveal all
            information available in the metadata.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Module">
            <summary>
            Owner module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Class">
            <summary>
            Owner class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Token">
            <summary>
            Token of method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Getter">
            <summary>
            Gets the getter method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Setter">
            <summary>
            Gets the setter method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.OtherMethods">
            <summary>
            Gets the other methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerProperty.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread">
            <summary>
            A thread in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.UniqueId">
            <summary>
            Unique id per debugger
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ThreadId">
            <summary>
            Gets the thread ID (calls ICorDebugThread::GetID()). This is not necessarily the OS
            thread ID in V2 or later, see <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.VolatileThreadId"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.VolatileThreadId">
            <summary>
            Gets the OS thread ID (calls ICorDebugThread2::GetVolatileOSThreadID()) or -1. This value
            can change during execution of the thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.HasExited">
            <summary>
            true if the thread has exited
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AppDomain">
            <summary>
            Gets the AppDomain or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Frames">
            <summary>
            Gets all stack frames
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveFrame">
            <summary>
            Gets the active stack frame. See also <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveILFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveILFrame">
            <summary>
            Gets the active IL frame. This is the first IL frame in the active thread, and is usually
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveFrame"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Handle">
            <summary>
            Gets the current thread handle. It's owned by the CLR debugger. The handle may change as
            the process executes, and may be different for different parts of the thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsRunning">
            <summary>
            true if the thread is running
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsSuspended">
            <summary>
            true if the thread is suspended
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.State">
            <summary>
            Gets/sets the thread state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.StopRequested">
            <summary>
            true if a termination of the thread has been requested.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.SuspendRequested">
            <summary>
            true if a suspension of the thread has been requested.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsBackground">
            <summary>
            true if the thread is running in the background.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsUnstarted">
            <summary>
            true if the thread has not started executing.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsStopped">
            <summary>
            true if the thread has been terminated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsWaitSleepJoin">
            <summary>
            true if the thread is waiting for another thread to complete a task.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsUserStateSuspended">
            <summary>
            true if the thread has been suspended. Use <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsSuspended"/> instead of this property.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsUnsafePoint">
            <summary>
            true if the thread is at an unsafe point. That is, the thread is at a point in execution where it may block garbage collection.
            
            Debug events may be dispatched from unsafe points, but suspending a thread at an unsafe point will very likely cause a deadlock until the thread is resumed. The safe and unsafe points are determined by the just-in-time (JIT) and garbage collection implementation.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.IsThreadPool">
            <summary>
            true if the thread is from the thread pool.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.UserState">
            <summary>
            Gets the user state of this thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Object">
            <summary>
            Gets the CLR thread object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CurrentException">
            <summary>
            Gets the current exception or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.InterceptCurrentException(dnSpy.Contracts.Scripting.Debugger.IStackFrame)">
            <summary>
            Intercept the current exception on this thread
            </summary>
            <param name="frame">Frame</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ActiveChain">
            <summary>
            Gets the active chain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Chains">
            <summary>
            Gets all chains
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(System.Object)">
            <summary>
            Creates a reference to a boxed value that can be passed to the debugged process
            </summary>
            <param name="value">A primitive type (ints, doubles, string, null),
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(System.Type)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> that can be passed to the debugged process
            </summary>
            <param name="value">A simple type (ints, doubles, string, null),
            arrays (<c>int[]</c>, <c>string[]</c>), <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/>.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values or call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateBox(System.Object)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Type)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateArray(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateArray(System.Type,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="genericArgs">Generic type arguments (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="method">Method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="method">Method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.String,System.UInt32,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.Object[],System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.Call(System.Object[],System.String,System.UInt32,System.Object[])">
            <summary>
            Calls a method in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:System.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            If this is an instance method, the first argument must be the <c>this</c> pointer. Use
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoad(System.Byte[])">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.Byte[])"/>
            </summary>
            <param name="assembly">Assembly bytes</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoad(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.String)"/>
            </summary>
            <param name="assemblyString">Assembly name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoadFrom(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)"/>
            </summary>
            <param name="assemblyFile">Assembly filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.AssemblyLoadFile(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFile(System.String)"/>
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.ToString(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue)">
            <summary>
            Calls <paramref name="value"/>'s <see cref="M:System.Object.ToString"/> method
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerThread.CreateEval">
            <summary>
            Creates an evaluator
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType">
            <summary>
            An instantiated type (<c>ICorDebugType</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Namespace">
            <summary>
            Gets the namespace
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.FullName">
            <summary>
            Gets the full name, which is the same as calling <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Attributes">
            <summary>
            Gets the type attributes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Visibility">
            <summary>
            Gets the visibility
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNotPublic">
            <summary>
            true if not public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsPublic">
            <summary>
            true if public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedPublic">
            <summary>
            true if nested public
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedPrivate">
            <summary>
            true if nested private
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedFamily">
            <summary>
            true if nested family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedAssembly">
            <summary>
            true if nested assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedFamilyAndAssembly">
            <summary>
            true if nested family and assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsNestedFamilyOrAssembly">
            <summary>
            true if nested family or assembly
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Layout">
            <summary>
            Gets the layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAutoLayout">
            <summary>
            true if auto layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSequentialLayout">
            <summary>
            true if sequential layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsExplicitLayout">
            <summary>
            true if explicit layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsInterface">
            <summary>
            true if it's an interface
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsClass">
            <summary>
            true if it's a class or struct
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAbstract">
            <summary>
            true if it's abstract
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSealed">
            <summary>
            true if it's sealed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSpecialName">
            <summary>
            true if's special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsImport">
            <summary>
            true if it's an import
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSerializable">
            <summary>
            true if it's serializable
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsWindowsRuntime">
            <summary>
            true if it's windows runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.StringFormat">
            <summary>
            Gets the string format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAnsiClass">
            <summary>
            true if it's an ANSI string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsUnicodeClass">
            <summary>
            true if it's a unicode string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAutoClass">
            <summary>
            true if it's an auto string class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsCustomFormatClass">
            <summary>
            true if it's a custom string format class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsBeforeFieldInit">
            <summary>
            true if it's before field init
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsForwarder">
            <summary>
            true if it's a forwarder
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsRuntimeSpecialName">
            <summary>
            true if it's a runtime special name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.HasSecurity">
            <summary>
            true if it has a security descriptor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Token">
            <summary>
            Gets the <c>TypeDef</c> token or a nil token if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Class"/> is null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType">
            <summary>
            Gets the element type, see also <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.TryGetPrimitiveType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementTypeOrEnumUnderlyingType">
            <summary>
            Returns the enum underlying type if it's an enum, else <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType"/> is returned
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSZArray">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/> (but not a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsArray">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/> (but not a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsAnyArray">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/> or a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsPtr">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Ptr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsByRef">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ByRef"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsGenericInst">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.GenericInst"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsFnPtr">
            <summary>
            true if it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.FnPtr"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Rank">
            <summary>
            Gets the rank of the array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.FirstTypeParameter">
            <summary>
            Gets the first type parameter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.TypeParameters">
            <summary>
            Gets all type parameters. If it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Class"/> or a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ValueType"/>,
            then the returned parameters are the type parameters in the correct order. If it's
            a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.FnPtr"/>, the first type is the return type, followed by
            all the method argument types in correct order. If it's a <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Array"/>,
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.SZArray"/>, <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ByRef"/> or a
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Ptr"/>, the returned type is the inner type, eg. <c>int</c> if the
            type is <c>int[]</c>. In this case, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.FirstTypeParameter"/> can be called instead.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Class">
            <summary>
            Gets the non-instantiated type, only valid if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType"/> is a
            <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.Class"/> or <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.BaseType">
            <summary>
            Gets the base type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsEnum">
            <summary>
            true if it derives from <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsValueType">
            <summary>
            true if it derives from <see cref="T:System.Enum"/> or <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.DerivesFromSystemValueType">
            <summary>
            true if this class directly derives from <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemEnum">
            <summary>
            true if this is <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemValueType">
            <summary>
            true if this is <see cref="T:System.ValueType"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemObject">
            <summary>
            true if this is <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystemNullable">
            <summary>
            true if this is <see cref="T:System.Nullable`1"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.EnumUnderlyingType">
            <summary>
            Returns the enum underlying type and shouldn't be called unless <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsEnum"/>
            is true. <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.End"/> is returned if the underlying type wasn't found.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.TryGetPrimitiveType">
            <summary>
            Same as <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ElementType"/> except that it tries to return a primitive element
            type (eg. <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.U4"/>) if it's a primitive type.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.IsSystem(System.String)">
            <summary>
            Returns true if it's a System.XXX type in the corlib (eg. mscorlib)
            </summary>
            <param name="name">Name (not including namespace)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.HasAttribute(System.String)">
            <summary>
            Returns true if an attribute is present
            </summary>
            <param name="attributeName">Full name of attribute type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToPtr">
            <summary>
            Creates a pointer type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToPointer">
            <summary>
            Creates a pointer type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToByReference">
            <summary>
            Creates a by-ref type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToByRef">
            <summary>
            Creates a by-ref type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToSZArray">
            <summary>
            Creates a single-dimension zero-lower bound array type
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToArray(System.Int32)">
            <summary>
            Creates a multi-dimensional array type. If <paramref name="rank"/> is <c>1</c>, you most
            likely want to call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToSZArray"/> instead of this method.
            </summary>
            <param name="rank">Number of dimensions</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Methods">
            <summary>
            Gets all methods declared in this type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Fields">
            <summary>
            Gets all fields declared in this type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Properties">
            <summary>
            Gets all properties declared in this type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Events">
            <summary>
            Gets all events declared in this type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethods(System.Boolean)">
            <summary>
            Returns all methods
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.String,System.Boolean)">
            <summary>
            Finds a method. If only one method is found, it's returned, else the method that takes
            no arguments is returned, or null if it doesn't exist.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.String,System.Object[])">
            <summary>
            Finds a method with a certain signature. Base classes are also searched.
            </summary>
            <param name="name">Method name</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.String,System.Boolean,System.Object[])">
            <summary>
            Finds a method with a certain signature.
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethods(System.String,System.Boolean)">
            <summary>
            Finds methods
            </summary>
            <param name="name">Method name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetConstructors">
            <summary>
            Returns all constructors
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetConstructor">
            <summary>
            Returns the default constructor or null if not found
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetConstructor(System.Object[])">
            <summary>
            Returns a constructor
            </summary>
            <param name="argTypes">Argument types. This can be <see cref="T:System.Type"/>s or strings
            with the full name of the argument types</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetFields(System.Boolean)">
            <summary>
            Returns all fields
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetFields(System.String,System.Boolean)">
            <summary>
            Finds fields
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetField(System.String,System.Boolean)">
            <summary>
            Finds a field
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperties(System.Boolean)">
            <summary>
            Returns all properties
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperties(System.String,System.Boolean)">
            <summary>
            Finds properties
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperty(System.String,System.Boolean)">
            <summary>
            Finds a property
            </summary>
            <param name="name">Property name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvents(System.Boolean)">
            <summary>
            Returns all events
            </summary>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvents(System.String,System.Boolean)">
            <summary>
            Finds events
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvent(System.String,System.Boolean)">
            <summary>
            Finds a event
            </summary>
            <param name="name">Event name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetField(System.Reflection.FieldInfo)">
            <summary>
            Gets a field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Gets a method
            </summary>
            <param name="method">Method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a property
            </summary>
            <param name="prop">Property</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Gets an event
            </summary>
            <param name="evt">Event</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="token">Token of field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="frame">Frame</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue">
            <summary>
            A value in the debugged process. This value gets neutered (invalid) as soon as the debugged
            process continues.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CanReadWrite">
            <summary>
            true if it supports reading and writing its value (<c>ICorDebugGenericValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsReference">
            <summary>
            true if it's a reference (<c>ICorDebugReferenceValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle">
            <summary>
            true if it's a handle (<c>ICorDebugHandleValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHeap">
            <summary>
            true if it's a heap (<c>ICorDebugHeapValue</c>, <c>ICorDebugArrayValue</c>,
            <c>ICorDebugBoxValue</c>, <c>ICorDebugStringValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsArray">
            <summary>
            true if it's an array (<c>ICorDebugArrayValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsBox">
            <summary>
            true if it's a boxed value (<c>ICorDebugBoxValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsString">
            <summary>
            true if it's a string (<c>ICorDebugStringValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject">
            <summary>
            true if it's an object (<c>ICorDebugObjectValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsContext">
            <summary>
            true if it's a context (<c>ICorDebugContext</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsComObject">
            <summary>
            true if it's an RCW (<c>ICorDebugComObjectValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsExceptionObject">
            <summary>
            true if it's an exception object (<c>ICorDebugExceptionObjectValue</c>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ElementType">
            <summary>
            Gets the element type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ElementTypeOrEnumUnderlyingType">
            <summary>
            Returns the enum underlying type if it's an enum, else <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ElementType"/> is returned
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Size">
            <summary>
            Gets the size of the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Address">
            <summary>
            Gets the address of the value or 0 if it's not available, eg. it could be in a register
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Class">
            <summary>
            Gets the class if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/> or <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsContext"/>, else null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type">
            <summary>
            Gets the type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsNull">
            <summary>
            true if it's a reference and it's null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReferenceAddress">
            <summary>
            Gets/sets the address to which the reference points (see <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsReference"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.HandleType">
            <summary>
            Gets the handle type if it's a handle value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.DereferencedValue">
            <summary>
            Gets the dereferenced value to which the reference (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsReference"/>) points or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ArrayElementType">
            <summary>
            Gets the type of the array's elements or <see cref="F:dnSpy.Contracts.Scripting.Debugger.CorElementType.End"/> if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Rank">
            <summary>
            Gets the rank of the array or 0 if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ArrayCount">
            <summary>
            Gets the number of elements in the array or 0 if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Dimensions">
            <summary>
            Gets the dimensions or null if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.HasBaseIndicies">
            <summary>
            true if the array has base indices
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.BaseIndicies">
            <summary>
            Gets all base indicies or null if it's not an array
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.BoxedValue">
            <summary>
            Gets the boxed object value or null if none. The return value has <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/> set to true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.StringLength">
            <summary>
            Gets the length of the string in characters or 0 if it's not a string (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsString"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.String">
            <summary>
            Gets the string or null if it's not a string (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsString"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsValueClass">
            <summary>
            true if this is an object value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/>) and it's a value type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ExceptionObjectStackFrames">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Scripting.Debugger.ExceptionObjectStackFrame"/>s if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsExceptionObject"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Value">
            <summary>
            Gets the value. Only values of simple types are currently returned: boolean, integers,
            floating points, decimal, string and null.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsNeutered">
            <summary>
            true if the value has been neutered, eg. because Continue() was called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.DisposeHandle">
            <summary>
            Disposes the handle if it's a handle (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElementAtPosition(System.UInt32)">
            <summary>
            Gets the value at a specified index in the array or null. The array is treated as a
            zero-based, single-dimensional array
            </summary>
            <param name="index">Index of element</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElementAtPosition(System.Int32)">
            <summary>
            Gets the value at a specified index in the array or null. The array is treated as a
            zero-based, single-dimensional array
            </summary>
            <param name="index">Index of element</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElement(System.UInt32[])">
            <summary>
            Gets the value at the specified indices or null
            </summary>
            <param name="indices">Indices into the array</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetElement(System.Int32[])">
            <summary>
            Gets the value at the specified indices or null
            </summary>
            <param name="indices">Indices into the array</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetFieldValue(dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,System.UInt32)">
            <summary>
            Gets the value of a field or null if it's not an object (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsObject"/>)
            </summary>
            <param name="cls">Class</param>
            <param name="token">Token of field in <paramref name="cls"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetFieldValue(System.String,System.Boolean)">
            <summary>
            Gets the value of a field. Returns null if field wasn't found or there was another error
            </summary>
            <param name="name">Name of field</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CreateHandle(dnSpy.Contracts.Scripting.Debugger.DebugHandleType)">
            <summary>
            Creates a handle to this heap value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHeap"/>). The returned value is a
            handle value (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.IsHandle"/>).
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Byte[])">
            <summary>
            Writes a new value. Can be called if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CanReadWrite"/> is true
            </summary>
            <param name="data">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read">
            <summary>
            Reads the data. Can be called if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.CanReadWrite"/> is true. Returns null if there
            was an error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadBoolean">
            <summary>
            Reads a <see cref="T:System.Boolean"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadChar">
            <summary>
            Reads a <see cref="T:System.Char"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadSByte">
            <summary>
            Reads a <see cref="T:System.SByte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadInt16">
            <summary>
            Reads a <see cref="T:System.Int16"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadInt32">
            <summary>
            Reads a <see cref="T:System.Int32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadByte">
            <summary>
            Reads a <see cref="T:System.Byte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadUInt16">
            <summary>
            Reads a <see cref="T:System.UInt16"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadUInt64">
            <summary>
            Reads a <see cref="T:System.UInt64"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadSingle">
            <summary>
            Reads a <see cref="T:System.Single"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadDouble">
            <summary>
            Reads a <see cref="T:System.Double"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ReadDecimal">
            <summary>
            Reads a <see cref="T:System.Decimal"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/>
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetNullableValue(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue@)">
            <summary>
            Gets the nullable value's value field. Returns true if it's a nullable type, false if
            it's not a nullable type.
            </summary>
            <param name="value">Updated with the value of the nullable field or null if the nullable
            is null or if it's not a nullable value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read(dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads an instance field. To read a static field, see eg. <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)"/>
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read(System.UInt32)">
            <summary>
            Reads an instance field. To read a static field, see eg. <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.UInt32)"/>
            </summary>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Read(System.String,System.Boolean)">
            <summary>
            Reads an instance field. To read a static field, see eg. <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerType.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IStackFrame,System.String,System.Boolean)"/>
            </summary>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="method">Instance method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="method">Instance method to call</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.String,System.UInt32,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.Object[],System.String,System.String,System.String,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="className">Class name</param>
            <param name="methodName">Method name</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerThread,System.Object[],System.String,System.UInt32,System.Object[])">
            <summary>
            Calls an instance method in the debugged process
            </summary>
            <param name="thread">Thread to use</param>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="modName">Full path, filename, or filename without extension of module</param>
            <param name="token">Method token</param>
            <param name="args">Arguments, either simple types (ints, doubles, strings, null),
            arrays (<c>int[], string[])</c>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Type"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.SaveData">
            <summary>
            Reads the data but doesn't return internal values such as array length if it's an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.SaveData(System.IO.Stream)">
            <summary>
            Reads the data but doesn't return internal values such as array length if it's an array.
            </summary>
            <param name="stream">Destination stream</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.SaveData(System.String)">
            <summary>
            Reads the data but doesn't return internal values such as array length if it's an array.
            </summary>
            <param name="filename">Filename</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetArrayDataAddress">
            <summary>
            Returns the address of the first element in the array
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.GetArrayDataAddress(System.UInt64@)">
            <summary>
            Returns the address of the first element in the array
            </summary>
            <param name="elemSize">Element size</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.ValueResult,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="valueResult">Value result</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ToString(dnSpy.Contracts.Scripting.Debugger.ValueResult,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="valueResult">Value result</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.WriteType(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.IDebuggerType,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="type">Type</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.WriteType(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="cls">Class</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IEval">
            <summary>
            Calls a method in the debugged process. Call its <see cref="M:System.IDisposable.Dispose"/> method
            once you don't need the instance anymore so the debugger knows the evaluation has ended.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateNull">
            <summary>
            Creates a null value that can be passed to the debugged process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Box(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue)">
            <summary>
            Box a value type
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Object)">
            <summary>
            Creates a reference to a boxed value that can be passed to the debugged process
            </summary>
            <param name="value">A primitive type (ints, doubles, string, null),
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>, <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Boolean)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Boolean"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Char)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Char"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.SByte)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.SByte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Byte)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Byte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Int16)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Int16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UInt16)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UInt16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Int32)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Int32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UInt32)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UInt32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Int64)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Int64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UInt64)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UInt64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Single)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Single"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Double)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Double"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.IntPtr)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.IntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.UIntPtr)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.UIntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Decimal)">
            <summary>
            Creates a reference to a boxed <see cref="T:System.Decimal"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Type)">
            <summary>
            Creates a reference to a boxed type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> that can be passed to the debugged process
            </summary>
            <param name="value">A simple type (ints, doubles, string, null),
            arrays (<c>int[]</c>, <c>string[]</c>), <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>,
            <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/>, <see cref="T:System.Type"/>.
            Use <see cref="T:dnSpy.Contracts.Scripting.Debugger.Box"/> to box values or call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateBox(System.Object)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Boolean"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Char)">
            <summary>
            Creates a <see cref="T:System.Char"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.SByte)">
            <summary>
            Creates a <see cref="T:System.SByte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Byte)">
            <summary>
            Creates a <see cref="T:System.Byte"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int16)">
            <summary>
            Creates a <see cref="T:System.Int16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt16)">
            <summary>
            Creates a <see cref="T:System.UInt16"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int32)">
            <summary>
            Creates a <see cref="T:System.Int32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt32)">
            <summary>
            Creates a <see cref="T:System.UInt32"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int64)">
            <summary>
            Creates a <see cref="T:System.Int64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt64)">
            <summary>
            Creates a <see cref="T:System.UInt64"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Single)">
            <summary>
            Creates a <see cref="T:System.Single"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Double)">
            <summary>
            Creates a <see cref="T:System.Double"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.IntPtr)">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UIntPtr)">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Decimal)">
            <summary>
            Creates a <see cref="T:System.Decimal"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerType)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Type)">
            <summary>
            Creates a type filled with 0s. The constructor isn't called.
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.String)">
            <summary>
            Creates a <see cref="T:System.String"/> that can be passed to the debugged process
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateArray(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.CreateArray(System.Type,System.Int32)">
            <summary>
            Creates an array. <paramref name="elementType"/> must be a primitive type (but not
            <see cref="T:System.IntPtr"/> or <see cref="T:System.UIntPtr"/>) or a reference type
            </summary>
            <param name="elementType">Array element type</param>
            <param name="length">Number of elements</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Boolean[])">
            <summary>
            Creates a <see cref="T:System.Boolean"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Char[])">
            <summary>
            Creates a <see cref="T:System.Char"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.SByte[])">
            <summary>
            Creates a <see cref="T:System.SByte"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Byte[])">
            <summary>
            Creates a <see cref="T:System.Byte"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int16[])">
            <summary>
            Creates a <see cref="T:System.Int16"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt16[])">
            <summary>
            Creates a <see cref="T:System.UInt16"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int32[])">
            <summary>
            Creates a <see cref="T:System.Int32"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt32[])">
            <summary>
            Creates a <see cref="T:System.UInt32"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Int64[])">
            <summary>
            Creates a <see cref="T:System.Int64"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.UInt64[])">
            <summary>
            Creates a <see cref="T:System.UInt64"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Single[])">
            <summary>
            Creates a <see cref="T:System.Single"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Double[])">
            <summary>
            Creates a <see cref="T:System.Double"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.String[])">
            <summary>
            Creates a <see cref="T:System.String"/> array
            </summary>
            <param name="array">Data</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Creates a new type instance. The returned type is a reference.
            If it's a value type, the returned type is a reference to a boxed value.
            </summary>
            <param name="genericArgs">Generic type arguments (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="ctor">Constructor to call</param>
            <param name="args">Arguments. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>,
            see its documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Call(dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls <paramref name="method"/> in the debugged process
            </summary>
            <param name="method">Method to call</param>
            <param name="args">Arguments. If it's an instance method, the first argument is the
            <c>this</c> pointer. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>, see its
            documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.Call(System.Object[],dnSpy.Contracts.Scripting.Debugger.IDebuggerMethod,System.Object[])">
            <summary>
            Calls <paramref name="method"/> in the debugged process
            </summary>
            <param name="genericArgs">Generic type arguments followed by generic method arguments
            (<see cref="T:System.Type"/> or <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerType"/> instances)</param>
            <param name="method">Method to call</param>
            <param name="args">Arguments. If it's an instance method, the first argument is the
            <c>this</c> pointer. Each argument is passed to <see cref="M:dnSpy.Contracts.Scripting.Debugger.IEval.Create(System.Object)"/>, see its
            documentation for more details.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.ToString(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue)">
            <summary>
            Calls the <c>ToString()</c> method
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoad(System.Byte[])">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.Byte[])"/>
            </summary>
            <param name="rawAssembly">Assembly bytes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoad(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.Load(System.String)"/>
            </summary>
            <param name="assemblyString">Assembly name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoadFrom(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)"/>
            </summary>
            <param name="assemblyFile">Assembly filename</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IEval.AssemblyLoadFile(System.String)">
            <summary>
            Loads the assembly in the debugged process by calling <see cref="M:System.Reflection.Assembly.LoadFile(System.String)"/>
            </summary>
            <param name="filename">Assembly filename</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint">
            <summary>
            Debug event breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IEventBreakpoint.EventKind">
            <summary>
            Gets the event kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IILBreakpoint">
            <summary>
            IL code breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILCodeKind">
            <summary>
            IL code kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ILCodeKind.Original">
            <summary>
            The debugger does not have access to information from ReJIT instrumentation.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ILCodeKind.ReJIT">
            <summary>
            The debugger has access to information from ReJIT instrumentation.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ILFrameIP">
            <summary>
            IL frame IP address
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.Offset">
            <summary>
            Gets the offset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.Mapping">
            <summary>
            Gets the mapping result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsProlog">
            <summary>
            The native code is in the prolog, so the value of the IP is 0.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsEpilog">
            <summary>
            The native code is in an epilog, so the value of the IP is the address of the last instruction of the method.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.HasNoInfo">
            <summary>
            No mapping information is available for the method, so the value of the IP is 0.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsUnmappedAddress">
            <summary>
            Although there is mapping information for the method, the current address cannot be mapped to Microsoft intermediate language (MSIL) code. The value of the IP is 0.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsExact">
            <summary>
            Either the method maps exactly to MSIL code or the frame has been interpreted, so the value of the IP is accurate.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.IsApproximate">
            <summary>
            The method was successfully mapped, but the value of the IP may be approximate.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.#ctor(System.UInt32,dnSpy.Contracts.Scripting.Debugger.MappingResult)">
            <summary>
            Constructor
            </summary>
            <param name="offset">Offset</param>
            <param name="mapping">Mapping flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ILFrameIP.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.INativeBreakpoint">
            <summary>
            Native code breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.InternalFrameType">
            <summary>
            Internal frame type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.None">
            <summary>
            A null value. The ICorDebugInternalFrame::GetFrameType method never returns this value.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.M2U">
            <summary>
            A managed-to-unmanaged stub frame.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.U2M">
            <summary>
            An unmanaged-to-managed stub frame.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.AppDomainTransition">
            <summary>
            A transition between application domains.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.LightweightFunction">
            <summary>
            A lightweight method call.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.FuncEval">
            <summary>
            The start of function evaluation.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.InternalCall">
            <summary>
            An internal call into the common language runtime.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.ClassInit">
            <summary>
            The start of a class initialization.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.Exception">
            <summary>
            An exception that is thrown.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.Security">
            <summary>
            A frame used for code access security.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.JitCompilation">
            <summary>
            The runtime is JIT-compiling a method.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IStackChain">
            <summary>
            Stack chain. This stack frame is only valid until the debugged process continues.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.IsManaged">
            <summary>
            true if this is a managed chain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Reason">
            <summary>
            Gets the reason
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.StackStart">
            <summary>
            Start address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.StackEnd">
            <summary>
            End address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.ActiveFrame">
            <summary>
            Gets the active frame or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Callee">
            <summary>
            Gets the callee or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Caller">
            <summary>
            Gets the caller or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Next">
            <summary>
            Gets the next chain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Previous">
            <summary>
            Gets the previous chain or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackChain.Frames">
            <summary>
            Gets all frames
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame">
            <summary>
            A stack frame in the debugged process. This stack frame is only valid until the debugged
            process continues.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNeutered">
            <summary>
            true if it has been neutered. It gets neutered when the program continues or if the
            instruction pointer is changed.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Chain">
            <summary>
            Gets its chain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Token">
            <summary>
            Gets the token of the method or 0
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StackStart">
            <summary>
            Start address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StackEnd">
            <summary>
            End address of the stack segment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame">
            <summary>
            true if it's an IL frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNativeFrame">
            <summary>
            true if it's a native frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsJITCompiledFrame">
            <summary>
            true if it's a JIT-compiled frame (<see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> and <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNativeFrame"/>
            are both true).
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsInternalFrame">
            <summary>
            true if it's an internal frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsRuntimeUnwindableFrame">
            <summary>
            true if this is a runtime unwindable frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ILFrameIP">
            <summary>
            Gets the IL frame IP. Only valid if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.NativeOffset">
            <summary>
            Gets the native frame IP. Only valid if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsNativeFrame"/> is true. Writing
            a new value will neuter this instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.InternalFrameType">
            <summary>
            Gets the internal frame type or <see cref="F:dnSpy.Contracts.Scripting.Debugger.InternalFrameType.None"/>
            if it's not an internal frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Index">
            <summary>
            Gets the stack frame index
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Method">
            <summary>
            Gets the method or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ILCode">
            <summary>
            Gets the IL code or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Code">
            <summary>
            Gets the code or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Arguments">
            <summary>
            Gets all arguments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Locals">
            <summary>
            Gets all locals
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericArguments">
            <summary>
            Gets all generic type and/or method arguments. The first returned values are the generic
            type args, followed by the generic method args. See also
            <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericTypeArguments"/>, <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericMethodArguments"/> and
            <see cref="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetGenericArguments(System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@,System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericTypeArguments">
            <summary>
            Gets all generic type arguments
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericMethodArguments">
            <summary>
            Gets all generic method arguments
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(System.UInt32)">
            <summary>
            Gets a local variable or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(System.Int32)">
            <summary>
            Gets a local variable or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetArgument(System.UInt32)">
            <summary>
            Gets an argument or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of argument</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetArgument(System.Int32)">
            <summary>
            Gets an argument or null if <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.IsILFrame"/> is false
            </summary>
            <param name="index">Index of argument</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocals(dnSpy.Contracts.Scripting.Debugger.ILCodeKind)">
            <summary>
            Gets all locals
            </summary>
            <param name="kind">Kind</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(dnSpy.Contracts.Scripting.Debugger.ILCodeKind,System.UInt32)">
            <summary>
            Gets a local variable or null
            </summary>
            <param name="kind">Kind</param>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetLocal(dnSpy.Contracts.Scripting.Debugger.ILCodeKind,System.Int32)">
            <summary>
            Gets a local variable or null
            </summary>
            <param name="kind">Kind</param>
            <param name="index">Index of local</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetCode(dnSpy.Contracts.Scripting.Debugger.ILCodeKind)">
            <summary>
            Gets the code or null
            </summary>
            <param name="kind">Kind</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GetGenericArguments(System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@,System.Collections.Generic.List{dnSpy.Contracts.Scripting.Debugger.IDebuggerType}@)">
            <summary>
            Splits up <see cref="P:dnSpy.Contracts.Scripting.Debugger.IStackFrame.GenericArguments"/> into generic type and method arguments
            </summary>
            <param name="typeGenArgs">Gets updated with a list containing all generic type arguments</param>
            <param name="methGenArgs">Gets updated with a list containing all generic method arguments</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepInto">
            <summary>
            Step into the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepIntoAsync(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepIntoWait(System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepIntoWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step into the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOver">
            <summary>
            Step over the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOverAsync(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOverWait(System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOverWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step over the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOut">
            <summary>
            Step out of the method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOutAsync(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOutWait(System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.StepOutWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Step out of the method and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunTo">
            <summary>
            Let the program execute until it returns to this frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunToAsync(System.Int32)">
            <summary>
            Let the program execute until it returns to this frame and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.WaitAsync(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunToWait(System.Int32)">
            <summary>
            Let the program execute until it returns to this frame and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Int32)"/>
            </summary>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.RunToWait(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Let the program execute until it returns to this frame and call <see cref="M:dnSpy.Contracts.Scripting.Debugger.IDebugger.Wait(System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="token">Cancellation token</param>
            <param name="millisecondsTimeout">Millisecs to wait or -1 (<see cref="F:System.Threading.Timeout.Infinite"/>)
            to wait indefinitely</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetNativeOffset(System.Int32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.SetNativeOffset(System.UInt32)">
            <summary>
            Set next instruction to execute. All <see cref="T:dnSpy.Contracts.Scripting.Debugger.IStackFrame"/> and <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/>
            instances will be neutered and can't be used after this method returns.
            </summary>
            <param name="offset">New offset within the current method</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="cls">Class</param>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.UInt32)">
            <summary>
            Reads a static field
            </summary>
            <param name="type">Type</param>
            <param name="token">Field token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerClass,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="cls">Class</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,System.String,System.Boolean)">
            <summary>
            Reads a static field
            </summary>
            <param name="type">Type</param>
            <param name="name">Field name</param>
            <param name="checkBaseClasses">true to check base classes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ReadStaticField(dnSpy.Contracts.Scripting.Debugger.IDebuggerType,dnSpy.Contracts.Scripting.Debugger.IDebuggerField)">
            <summary>
            Reads a static field
            </summary>
            <param name="type">Declaring type</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.IStackFrame.ToString(dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.MappingResult">
            <summary>
            Debug mapping result
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Prolog">
            <summary>
            The native code is in the prolog, so the value of the IP is 0.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Epilog">
            <summary>
            The native code is in an epilog, so the value of the IP is the address of the last instruction of the method.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.NoInfo">
            <summary>
            No mapping information is available for the method, so the value of the IP is 0.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.UnmappedAddress">
            <summary>
            Although there is mapping information for the method, the current address cannot be mapped to Microsoft intermediate language (MSIL) code. The value of the IP is 0.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Exact">
            <summary>
            Either the method maps exactly to MSIL code or the frame has been interpreted, so the value of the IP is accurate.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.MappingResult.Approximate">
            <summary>
            The method was successfully mapped, but the value of the IP may be approximate.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ThreadState">
            <summary>
            Thread state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadState.Run">
            <summary>
            The thread runs freely, unless a debug event occurs.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadState.Suspend">
            <summary>
            The thread cannot run.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ThreadUserState">
            <summary>
            Thread user state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.StopRequested">
            <summary>
            A termination of the thread has been requested.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.SuspendRequested">
            <summary>
            A suspension of the thread has been requested.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Background">
            <summary>
            The thread is running in the background.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Unstarted">
            <summary>
            The thread has not started executing.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Stopped">
            <summary>
            The thread has been terminated.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.WaitSleepJoin">
            <summary>
            The thread is waiting for another thread to complete a task.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.Suspended">
            <summary>
            The thread has been suspended.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.UnsafePoint">
            <summary>
            The thread is at an unsafe point. That is, the thread is at a point in execution where it may block garbage collection.
            
            Debug events may be dispatched from unsafe points, but suspending a thread at an unsafe point will very likely cause a deadlock until the thread is resumed. The safe and unsafe points are determined by the just-in-time (JIT) and garbage collection implementation.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ThreadUserState.ThreadPool">
            <summary>
            The thread is from the thread pool.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags">
            <summary>
            Type printer flags
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Debugger.ValueResult">
            <summary>
            A value read from the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.Value">
            <summary>
            The value. Only valid if <see cref="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.IsValid"/> is true, else it shouldn't be used
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.IsValid">
            <summary>
            true if <see cref="F:dnSpy.Contracts.Scripting.Debugger.ValueResult.Value"/> is valid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.Write(dnSpy.Contracts.Scripting.IOutputWriter,dnSpy.Contracts.Scripting.Debugger.IDebuggerValue,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            Write this to <paramref name="output"/>
            </summary>
            <param name="output">Destination</param>
            <param name="value">Owner <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> instance</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.ToString(dnSpy.Contracts.Scripting.Debugger.IDebuggerValue,dnSpy.Contracts.Scripting.Debugger.TypeFormatFlags)">
            <summary>
            ToString()
            </summary>
            <param name="value">Owner <see cref="T:dnSpy.Contracts.Scripting.Debugger.IDebuggerValue"/> instance</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.Equals(dnSpy.Contracts.Scripting.Debugger.ValueResult)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj">Other value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.GetHashCode">
            <summary>
            GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Debugger.ValueResult.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.IOutputWritable">
            <summary>
            Implemented by classes that can write itself using a <see cref="T:dnSpy.Contracts.Scripting.IOutputWriter"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IOutputWritable.WriteTo(dnSpy.Contracts.Scripting.IOutputWriter)">
            <summary>
            Writes itself to <paramref name="output"/>
            </summary>
            <param name="output">Output</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.OutputWritableExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.OutputWritableExtensions.WriteLineTo(dnSpy.Contracts.Scripting.IOutputWritable,dnSpy.Contracts.Scripting.IOutputWriter)">
            <summary>
            Writes text followed by a newline
            </summary>
            <param name="obj">Object</param>
            <param name="output">Output</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.IOutputWriter">
            <summary>
            Writes text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IOutputWriter.Write(System.String,System.Object)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text to write</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IOutputWriter.Write(System.String,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text to write</param>
            <param name="color">Color</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.OutputWriterExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.OutputWriterExtensions.WriteLine(dnSpy.Contracts.Scripting.IOutputWriter,System.String,System.Object)">
            <summary>
            Writes text followed by a newline
            </summary>
            <param name="writer">Writer</param>
            <param name="text">Text to write</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.OutputWriterExtensions.WriteLine(dnSpy.Contracts.Scripting.IOutputWriter,System.String,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Writes text followed by a newline
            </summary>
            <param name="writer">Writer</param>
            <param name="text">Text to write</param>
            <param name="color">Color</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.IServiceLocator">
            <summary>
            Service locator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IServiceLocator.Resolve``1">
            <summary>
            Resolves a service, and throws if it wasn't found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.IServiceLocator.TryResolve``1">
            <summary>
            Resolves a service or returns null if not found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.ICachedWriter">
            <summary>
            Writes text to a buffer and flushes it when <see cref="M:dnSpy.Contracts.Scripting.Roslyn.ICachedWriter.Flush"/>
            (or <see cref="M:System.IDisposable.Dispose"/>) is called.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ICachedWriter.Flush">
            <summary>
            Flushes current output. This method gets called automatically by <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions">
            <summary>
            Print options (<see cref="T:Microsoft.CodeAnalysis.Scripting.Hosting.PrintOptions"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.Ellipsis">
            <summary>
            Ellipsis string
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.EscapeNonPrintableCharacters">
            <summary>
            Escape non-printable characters
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.MaximumOutputLength">
            <summary>
            Maximum output length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.MemberDisplayFormat">
            <summary>
            Member display format
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.NumberRadix">
            <summary>
            Number radix
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IPrintOptions.AutoColorizeObjects">
            <summary>
            If true, all calls to <see cref="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Object,dnSpy.Contracts.Text.TextColor)"/> will call
            <see cref="M:dnSpy.Contracts.Scripting.IOutputWritable.WriteTo(dnSpy.Contracts.Scripting.IOutputWriter)"/> if the object implements that
            interface.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals">
            <summary>
            The script's global class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Instance">
            <summary>
            Returns itself so it can be passed into classes that can't access the globals
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ScriptResetting">
            <summary>
            Raised before the script gets reset. Can be used to unregister from events to prevent
            memory leaks. Raised on the UI thread.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Token">
            <summary>
            Cancellation token that gets signalled when the script gets reset
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintOptions">
            <summary>
            Print options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintError(System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintError(System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLineError(System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLineError(System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Object,System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Object,System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(dnSpy.Contracts.Text.TextColor,System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Object,System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Object,System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(dnSpy.Contracts.Text.TextColor,System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Object,System.Object)">
            <summary>
            Formats and prints a value to the screen
            </summary>
            <param name="value">Value, can be null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Object,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints a value to the screen
            </summary>
            <param name="value">Value, can be null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Object,System.Object)">
            <summary>
            Formats and prints a value followed by a new line to the screen
            </summary>
            <param name="value">Value or null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Object,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints a value followed by a new line to the screen
            </summary>
            <param name="value">Value or null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Exception,System.Object)">
            <summary>
            Formats and prints an exception to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Print(System.Exception,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints an exception to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Exception,System.Object)">
            <summary>
            Formats and prints an exception followed by a new line to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.PrintLine(System.Exception,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints an exception followed by a new line to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.UIDispatcher">
            <summary>
            UI thread dispatcher
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.CreateWriter">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Scripting.Roslyn.ICachedWriter"/> instance. Useful if your script runs in the
            background and prints text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.UI(System.Action)">
            <summary>
            Executes <paramref name="action"/> in the UI thread
            </summary>
            <param name="action">Code</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.UI``1(System.Func{``0})">
            <summary>
            Executes <paramref name="func"/> in the UI thread
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="func">Code</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Break">
            <summary>
            Calls <see cref="M:System.Diagnostics.Debugger.Break"/>. Use dnSpy to debug itself
            (dnSpy --multiple) and then call this method from your script in the debugged dnSpy process.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Resolve``1">
            <summary>
            Resolves a service, and throws if it wasn't found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.TryResolve``1">
            <summary>
            Resolves a service or returns null if not found
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Show(System.String,dnSpy.Contracts.App.MsgBoxButton,System.Windows.Window)">
            <summary>
            Shows a message box
            </summary>
            <param name="message">Message to show</param>
            <param name="buttons">Buttons that should be present</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowOKCancel(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons OK and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowOC(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons OK and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYesNo(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes and No
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYN(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes and No
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYesNoCancel(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes, No and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.ShowYNC(System.String,System.Windows.Window)">
            <summary>
            Shows a message box with buttons Yes, No and Cancel
            </summary>
            <param name="message">Message to show</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Ask``1(System.String,System.String,System.String,System.Func{System.String,``0},System.Func{System.String,System.String},System.Windows.Window)">
            <summary>
            Asks the user for a value and returns it or the default value (eg. null or 0) if the
            user canceled the dialog box.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="labelMessage">Label</param>
            <param name="defaultText">Default text to write to the textbox or null</param>
            <param name="title">Title or null</param>
            <param name="converter">Converts a string to the type, or null to use the default
            converter.</param>
            <param name="verifier">Verifies the typed message. Returns null or an empty string if
            it's a valid value, else an error message to show to the user.</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.IScriptGlobals.Show(System.Exception,System.String,System.Windows.Window)">
            <summary>
            Shows an exception message
            </summary>
            <param name="exception">Exception</param>
            <param name="msg">Message to show or null</param>
            <param name="ownerWindow">Owner window or null to use the main window</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter">
            <summary>
            Prints text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintOptions">
            <summary>
            Print options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintError(System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintError(System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLineError(System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLineError(System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Object,System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.String)">
            <summary>
            Prints text to the screen
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Object,System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(dnSpy.Contracts.Text.TextColor,System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.String,System.Object[])">
            <summary>
            Prints text to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.Object,System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.String)">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="text">Text or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.Object,System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(dnSpy.Contracts.Text.TextColor,System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="color">Color</param>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.String,System.Object[])">
            <summary>
            Prints text followed by a new line to the screen
            </summary>
            <param name="fmt">Format</param>
            <param name="args">Args</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Object,System.Object)">
            <summary>
            Formats and prints a value to the screen
            </summary>
            <param name="value">Value, can be null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Object,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints a value to the screen
            </summary>
            <param name="value">Value, can be null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.Object,System.Object)">
            <summary>
            Formats and prints a value followed by a new line to the screen
            </summary>
            <param name="value">Value or null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.Object,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints a value followed by a new line to the screen
            </summary>
            <param name="value">Value or null</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Exception,System.Object)">
            <summary>
            Formats and prints an exception to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.Print(System.Exception,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints an exception to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.Exception,System.Object)">
            <summary>
            Formats and prints an exception followed by a new line to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.Roslyn.ITextPrinter.PrintLine(System.Exception,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Formats and prints an exception followed by a new line to the screen
            </summary>
            <param name="ex">Exception</param>
            <param name="color">Color</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat">
            <summary>
            Member display format (<see cref="T:Microsoft.CodeAnalysis.Scripting.Hosting.MemberDisplayFormat"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat.SingleLine">
            <summary>
            Display structure of the object on a single line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat.SeparateLines">
            <summary>
            Displays a simple description of the object followed by list of members. Each member is displayed on a separate line.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Scripting.Roslyn.MemberDisplayFormat.Hidden">
            <summary>
            Display just a simple description of the object, like type name or ToString(). Don't display any members of the object.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.ScriptException">
            <summary>
            Base class of script-related exceptions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.ScriptException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.ScriptException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Scripting.UIUtils">
            <summary>
            Executes code on the UI thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.UIUtils.UI(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Executes <paramref name="a"/> in the UI thread and then returns
            </summary>
            <param name="dispatcher">UI dispatcher</param>
            <param name="a">Action</param>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.UIUtils.UI``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
            <summary>
            Executes <paramref name="f"/> in the UI thread and returns the result
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="dispatcher">UI dispatcher</param>
            <param name="f">Func</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Scripting.UIUtils.UIIter``1(System.Windows.Threading.Dispatcher,System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns the result of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. <paramref name="getIter"/> is
            only called on the UI thread.
            </summary>
            <typeparam name="T">Type to return</typeparam>
            <param name="dispatcher">UI dispatcher</param>
            <param name="getIter">Called on the UI thread to return the result</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.BodyResult">
            <summary>
            Stored in <see cref="P:dnSpy.Contracts.Search.ISearchResult.Object"/> if the method body was searched
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.BodyResult.ILOffset">
            <summary>
            IL offset of instruction referencing the constant
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.BodyResult.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="ilOffset">IL offset of instruction</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.ChainDocumentTreeNodeFilter">
            <summary>
            Chain filter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.ChainDocumentTreeNodeFilter.#ctor(dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <summary>
            Constructor
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:dnSpy.Contracts.Search.DocumentSearcherOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Search.IDocumentSearcher"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Search.DocumentSearcherOptions.DEFAULT_MAX_RESULTS">
            <summary>
            Default number of results to return
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.DocumentSearcherOptions.MaxResults">
            <summary>
            Max results to return
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.DocumentSearcherOptions.SearchComparer">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Search.ISearchComparer"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.DocumentSearcherOptions.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.DocumentSearcherOptions.SearchDecompiledData">
            <summary>
            Searches decompiled data, eg. decompiled XAML
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.DocumentSearcherOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.DocumentSearcherOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Search.DocumentSearcherOptions.CopyTo(dnSpy.Contracts.Search.DocumentSearcherOptions)">
            <summary>
            Copies this instance to <paramref name="other"/> and returns it
            </summary>
            <param name="other">Destination</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.DocumentTreeNodeFilterBase">
            <summary>
            Filter base class
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.EntryPointDocumentTreeNodeFilter">
            <summary>
            Entry point filter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.EntryPointDocumentTreeNodeFilter.#ctor(dnlib.DotNet.ModuleDef)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.FilterNothingDocumentTreeNodeFilter">
            <summary>
            Filter nothing base class
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Search.FilterNothingDocumentTreeNodeFilter.Instance">
            <summary>
            Gets the instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.FlagsDocumentTreeNodeFilter">
            <summary>
            Filters nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.FlagsDocumentTreeNodeFilter.#ctor(dnSpy.Contracts.Search.VisibleMembersFlags)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.IDocumentSearcher">
            <summary>
            Searches for things in <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/>s and <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IDocumentSearcher.TooManyResults">
            <summary>
            true if too many results were found and the search was canceled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IDocumentSearcher.SyntaxHighlight">
            <summary>
            Used by <see cref="T:dnSpy.Contracts.Search.ISearchResult"/>. true if the result is syntax highlighted in the UI.
            <see cref="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI"/> must be called if this gets updated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IDocumentSearcher.Decompiler">
            <summary>
            Used by <see cref="T:dnSpy.Contracts.Search.ISearchResult"/>. Language to use.
            <see cref="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI"/> must be called if this gets updated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.IDocumentSearcher.SearchingResult">
            <summary>
            A search result that was added to indicate that it's searching. Should be removed from
            the list after the search has completed if it's not null.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.IDocumentSearcher.Start(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Documents.TreeView.DsDocumentNode})">
            <summary>
            Starts the search
            </summary>
            <param name="files">Files to search</param>
        </member>
        <member name="M:dnSpy.Contracts.Search.IDocumentSearcher.Start(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Search.SearchTypeInfo})">
            <summary>
            Starts the search
            </summary>
            <param name="typeInfos">Types to search</param>
        </member>
        <member name="M:dnSpy.Contracts.Search.IDocumentSearcher.Cancel">
            <summary>
            Cancels the search
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Search.IDocumentSearcher.OnSearchCompleted">
            <summary>
            Raised when the search has completed or was canceled
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Search.IDocumentSearcher.OnNewSearchResults">
            <summary>
            Raised when there are more results available
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.IDocumentSearcherProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Search.IDocumentSearcher"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.IDocumentSearcherProvider.Create(dnSpy.Contracts.Search.DocumentSearcherOptions,dnSpy.Contracts.Documents.TreeView.IDocumentTreeView)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Search.IDocumentSearcher"/> instance
            </summary>
            <param name="options">Options</param>
            <param name="documentTreeView">Document treeview</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.ISearchComparer">
            <summary>
            Search comparer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.ISearchComparer.IsMatch(System.String,System.Object)">
            <summary>
            Checks whether some value matches something
            </summary>
            <param name="text">String representation of <paramref name="obj"/> or null</param>
            <param name="obj">Original object</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.ISearchResultReferenceProvider">
            <summary>
            Provides a reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResultReferenceProvider.Reference">
            <summary>
            Gets the reference
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.ISearchResult">
            <summary>
            Search result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.Object">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.IDsDocument"/> if it's a non-.NET file. <see cref="T:dnlib.DotNet.AssemblyDef"/>,
            <see cref="T:dnlib.DotNet.ModuleDef"/>, <see cref="T:dnlib.DotNet.AssemblyRef"/>, <see cref="T:dnlib.DotNet.ModuleRef"/>,
            <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceNode"/>, <see cref="T:dnSpy.Contracts.Documents.TreeView.Resources.ResourceElementNode"/>, <see cref="T:System.String"/>
            (namespace), <see cref="T:dnlib.DotNet.TypeDef"/>, <see cref="T:dnlib.DotNet.MethodDef"/>, <see cref="T:dnlib.DotNet.FieldDef"/>,
            <see cref="T:dnlib.DotNet.PropertyDef"/>, <see cref="T:dnlib.DotNet.EventDef"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.Document">
            <summary>
            Owner file
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.ISearchResult.RefreshUI">
            <summary>
            Refreshes UI fields. Should be called if the classification format map,
            <see cref="P:dnSpy.Contracts.Search.IDocumentSearcher.SyntaxHighlight"/> or <see cref="P:dnSpy.Contracts.Search.IDocumentSearcher.Decompiler"/>
            changes.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.ISearchResult.ObjectInfo">
            <summary>
            Gets any extra info related to <see cref="P:dnSpy.Contracts.Search.ISearchResult.Object"/>. <see cref="T:dnSpy.Contracts.Search.BodyResult"/> if the
            method body was searched.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.NamespaceRef">
            <summary>
            Namespace reference
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.NamespaceRef.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.NamespaceRef.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.NamespaceRef.#ctor(dnSpy.Contracts.Documents.IDsDocument,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="namespace">Namespace</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.NamespaceSearchResult">
            <summary>
            Namespace search result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.NamespaceSearchResult.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.NamespaceSearchResult.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="namespace">Namespace</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.SameAssemblyDocumentTreeNodeFilter">
            <summary>
            Same assembly filter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SameAssemblyDocumentTreeNodeFilter.#ctor(dnlib.DotNet.ModuleDef,dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <summary>
            Constructor
            </summary>
            <param name="allowedMod">Module</param>
            <param name="filter">Filter</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.SameModuleDocumentTreeNodeFilter">
            <summary>
            Same module filter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SameModuleDocumentTreeNodeFilter.#ctor(dnlib.DotNet.ModuleDef,dnSpy.Contracts.Documents.TreeView.IDocumentTreeNodeFilter)">
            <summary>
            Constructor
            </summary>
            <param name="allowedModule">Module</param>
            <param name="filter">Filter</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.SearchComparerFactory">
            <summary>
            <see cref="T:dnSpy.Contracts.Search.ISearchComparer"/> factory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SearchComparerFactory.Create(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Search.ISearchComparer"/>
            </summary>
            <param name="searchText">Search text</param>
            <param name="caseSensitive">true if case sensitive</param>
            <param name="matchWholeWords">true to match whole words</param>
            <param name="matchAnyWords">true to match any word</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Search.SearchComparerFactory.CreateLiteral(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Search.ISearchComparer"/> that compares literals
            </summary>
            <param name="searchText">Search text</param>
            <param name="caseSensitive">true if case sensitive</param>
            <param name="matchWholeWords">true to match whole words</param>
            <param name="matchAnyWords">true to match any word</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Search.SearchResultEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Search.ISearchResult"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.SearchResultEventArgs.Results">
            <summary>
            New search results
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SearchResultEventArgs.#ctor(dnSpy.Contracts.Search.ISearchResult[])">
            <summary>
            Constructor
            </summary>
            <param name="results">Search results</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.SearchTypeInfo">
            <summary>
            Search a type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.SearchTypeInfo.Document">
            <summary>
            Owner file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Search.SearchTypeInfo.Type">
            <summary>
            Type to search
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Search.SearchTypeInfo.#ctor(dnSpy.Contracts.Documents.IDsDocument,dnlib.DotNet.TypeDef)">
            <summary>
            Constructor
            </summary>
            <param name="document">Document</param>
            <param name="type">Type</param>
        </member>
        <member name="T:dnSpy.Contracts.Search.ShowNothingDocumentTreeNodeFilterBase">
            <summary>
            Show nothing filter base class
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Search.VisibleMembersFlags">
            <summary>
            Filter flags
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants">
            <summary>
            Appearance category constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.TextEditor">
            <summary>
            Text editor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.HexEditor">
            <summary>
            Hex editor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.OutputWindow">
            <summary>
            Output window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.UIMisc">
            <summary>
            UI controls
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.AppearanceCategory.TextAppearanceCategoryDefinition">
            <summary>
            Text appearance category definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.AppearanceCategory.TextAppearanceCategoryDefinition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.AppearanceCategory.TextAppearanceCategoryDefinition.IsUserVisible">
            <summary>
            true if the user can change the settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.AppearanceCategory.TextAppearanceCategoryDefinition.DisplayName">
            <summary>
            Text shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.AppearanceCategory.TextAppearanceCategoryDefinition.Category">
            <summary>
            Appearance category, eg. <see cref="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.TextEditor"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.AppearanceCategory.TextAppearanceCategoryDefinition.ColorType">
            <summary>
            Text color
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.CodeEditor.CodeEditorOptionsDefinition">
            <summary>
            Defines code editor options that will be shown in the UI. Use <see cref="T:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ContentType">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ContentType"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.LanguageName">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.LanguageName"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.UseVirtualSpace">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.UseVirtualSpace"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.WordWrapStyle">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.WordWrapStyle"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ShowLineNumbers">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ShowLineNumbers"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.HighlightCurrentLine">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightCurrentLine"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.CutOrCopyBlankLineIfNoSelection">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.CutOrCopyBlankLineIfNoSelection"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.DisplayUrlsAsHyperlinks">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.DisplayUrlsAsHyperlinks"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ForceClearTypeIfNeeded">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ForceClearTypeIfNeeded"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.HorizontalScrollBar">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HorizontalScrollBar"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.VerticalScrollBar">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.VerticalScrollBar"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.TabSize">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.TabSize"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.IndentSize">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.IndentSize"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ConvertTabsToSpaces">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ConvertTabsToSpaces"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.HighlightReferences">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightReferences"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.HighlightRelatedKeywords">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightRelatedKeywords"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.HighlightMatchingBrace">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightMatchingBrace"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.LineSeparators">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.LineSeparators"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ShowBlockStructure">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ShowBlockStructure"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.BlockStructureLineKind">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.BlockStructureLineKind"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.CompressEmptyOrWhitespaceLines">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.CompressEmptyOrWhitespaceLines"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.CompressNonLetterLines">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.CompressNonLetterLines"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.RemoveExtraTextLineVerticalPixels">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.RemoveExtraTextLineVerticalPixels"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.SelectionMargin">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.SelectionMargin"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.GlyphMargin">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.GlyphMargin"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.MouseWheelZoom">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.MouseWheelZoom"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ZoomControl">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ZoomControl"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ICodeEditorOptionsDefinitionMetadata.ZoomLevel">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ZoomLevel"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.CodeEditor.CodeEditorOptionsDefinition"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Constructor</summary>
            <param name="languageName">Language name shown in the UI</param>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="guid">Guid of settings, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_CODE_EDITOR_CSHARP_ROSLYN"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ContentType">
            <summary>
            Content type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.Guid">
            <summary>
            Guid of settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.LanguageName">
            <summary>
            Language name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.UseVirtualSpace">
            <summary>
            Use virtual space, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.UseVirtualSpace"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.WordWrapStyle">
            <summary>
            Word wrap style, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.WordWrapStyle"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ShowLineNumbers">
            <summary>
            Show line numbers, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.ShowLineNumbers"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightCurrentLine">
            <summary>
            Highlight current line, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.HighlightCurrentLine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.CutOrCopyBlankLineIfNoSelection">
            <summary>
            Cut or copy blank link if no selection, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.CutOrCopyBlankLineIfNoSelection"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.DisplayUrlsAsHyperlinks">
            <summary>
            Display URLs as hyperlinks, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.DisplayUrlsAsHyperlinks"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ForceClearTypeIfNeeded">
            <summary>
            Force ClearType, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.ForceClearTypeIfNeeded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HorizontalScrollBar">
            <summary>
            Show horizontal scroll bar, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.HorizontalScrollBar"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.VerticalScrollBar">
            <summary>
            Show vertical scroll bar, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.VerticalScrollBar"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.TabSize">
            <summary>
            Tab size, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.TabSize"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.IndentSize">
            <summary>
            Indent size, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.IndentSize"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ConvertTabsToSpaces">
            <summary>
            true to convert tabs to spaces, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.ConvertTabsToSpaces"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightReferences">
            <summary>
            Highlight references, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.HighlightReferences"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightRelatedKeywords">
            <summary>
            Highlight related keywords, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.HighlightRelatedKeywords"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.HighlightMatchingBrace">
            <summary>
            Highlight matching brace, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.HighlightMatchingBrace"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.LineSeparators">
            <summary>
            Line separators, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.LineSeparators"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ShowBlockStructure">
            <summary>
            Show indent guides, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.ShowBlockStructure"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.BlockStructureLineKind">
            <summary>
            Block structure line kind, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.BlockStructureLineKind"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.CompressEmptyOrWhitespaceLines">
            <summary>
            Compress empty/whitespace lines, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.CompressEmptyOrWhitespaceLines"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.CompressNonLetterLines">
            <summary>
            Compress non-letter lines, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.CompressNonLetterLines"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.RemoveExtraTextLineVerticalPixels">
            <summary>
            Don't use extra line spacing, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.RemoveExtraTextLineVerticalPixels"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.SelectionMargin">
            <summary>
            Show selection margin, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.SelectionMargin"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.GlyphMargin">
            <summary>
            Show glyph margin, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.GlyphMargin"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.MouseWheelZoom">
            <summary>
            Enable mouse wheel zoom, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.MouseWheelZoom"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ZoomControl">
            <summary>
            Show zoom control, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.ZoomControl"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.CodeEditor.ExportCodeEditorOptionsDefinitionAttribute.ZoomLevel">
            <summary>
            Zoom level, default value is <see cref="F:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions.ZoomLevel"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.CodeEditor.DefaultCodeEditorOptions">
            <summary>
            Default code editor options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER">
            <summary>
            Code using <see cref="M:dnSpy.Contracts.Decompiler.IDecompiler.ShowMember(dnlib.DotNet.IMemberRef)"/> must be refreshed.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.DISABLE_MEMORY_MAPPED_IO">
            <summary>
            Disable memory mapped I/O
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_ENVIRONMENT">
            <summary>
            Order of Environment settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DECOMPILER">
            <summary>
            Order of decompiler settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DEBUGGER">
            <summary>
            Order of debugger settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DOCUMENT_VIEWER">
            <summary>
            Order of Text Viewer settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_CODE_EDITOR">
            <summary>
            Order of Code Editor settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_REPL">
            <summary>
            Order of REPL settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_OUTPUT">
            <summary>
            Order of Output Window settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_ASSEMBLY_EXPLORER">
            <summary>
            Order of Assembly Explorer settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_BAML">
            <summary>
            Order of baml settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_HEXEDITOR">
            <summary>
            Order of hex editor settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_BACKGROUNDIMAGE">
            <summary>
            Order of background image settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_LISTENER_DOCUMENTMANAGER">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Documents.IDsDocumentService"/>'s <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_LISTENER_DECOMPILER">
            <summary>
            Order of decompiler's <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_LISTENER_DOCUMENTTREEVIEW">
            <summary>
            Order of <see cref="T:dnSpy.Contracts.Documents.TreeView.IDocumentTreeView"/>'s <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_ENVIRONMENT">
            <summary>
            Guid of Environment settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_DECOMPILER">
            <summary>
            Guid of Decompiler settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_CODE_EDITOR">
            <summary>
            Guid of Code Editor settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_CODE_EDITOR_CSHARP_ROSLYN">
            <summary>
            Guid of C# (Roslyn) code editor settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_CODE_EDITOR_VISUAL_BASIC_ROSLYN">
            <summary>
            Guid of Visual Basic (Roslyn) code editor settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_DOCUMENT_VIEWER">
            <summary>
            Guid of Text Viewer settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_OUTPUT">
            <summary>
            Guid of Output Window settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_REPL">
            <summary>
            Guid of REPL settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_REPL_CSHARP_ROSLYN">
            <summary>
            Guid of C# (Roslyn) REPL settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_REPL_VISUAL_BASIC_ROSLYN">
            <summary>
            Guid of Visual Basic (Roslyn) REPL settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_HEX_EDITOR">
            <summary>
            Guid of Hex Editor settings page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_HEX_EDITOR_DEFAULT">
            <summary>
            GUID of Hex Editor / Default page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_HEX_EDITOR_DEBUGGER_MEMORY">
            <summary>
            GUID of Hex Editor / Debugger page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_ENVIRONMENT_GENERAL">
            <summary>
            Order of Environment / General
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_ENVIRONMENT_FONT">
            <summary>
            Order of Environment / Font
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DECOMPILER_SETTINGS_ILSPY_CSHARP">
            <summary>
            Order of Decompiler / ILSpy C#/VB
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DECOMPILER_SETTINGS_ILSPY_IL">
            <summary>
            Order of Decompiler / ILSpy IL
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_CODE_EDITOR_LANGUAGES">
            <summary>
            Start of language options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_CODE_EDITOR_LANGUAGES_GENERAL">
            <summary>
            Order of General language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_CODE_EDITOR_LANGUAGES_SCROLLBARS">
            <summary>
            Order of Scroll Bars language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_CODE_EDITOR_LANGUAGES_TABS">
            <summary>
            Order of Tabs language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_CODE_EDITOR_LANGUAGES_ADVANCED">
            <summary>
            Order of Advanced language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DOCUMENT_VIEWER_DEFAULT_GENERAL">
            <summary>
            Order of Text Viewer / General page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DOCUMENT_VIEWER_DEFAULT_SCROLLBARS">
            <summary>
            Order of Text Viewer / Scroll Bars page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DOCUMENT_VIEWER_DEFAULT_TABS">
            <summary>
            Order of Text Viewer / Tabs page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DOCUMENT_VIEWER_DEFAULT_ADVANCED">
            <summary>
            Order of Text Viewer / Advanced page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_OUTPUT_DEFAULT_GENERAL">
            <summary>
            Order of Output Window / General page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_OUTPUT_DEFAULT_SCROLLBARS">
            <summary>
            Order of Output Window / Scroll Bars page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_OUTPUT_DEFAULT_TABS">
            <summary>
            Order of Output Window / Tabs page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_OUTPUT_DEFAULT_ADVANCED">
            <summary>
            Order of Output Window / Advanced page
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_REPL_LANGUAGES">
            <summary>
            Start of language options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_REPL_LANGUAGES_GENERAL">
            <summary>
            Order of General language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_REPL_LANGUAGES_SCROLLBARS">
            <summary>
            Order of Scroll Bars language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_REPL_LANGUAGES_TABS">
            <summary>
            Order of Tabs language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_REPL_LANGUAGES_ADVANCED">
            <summary>
            Order of Advanced language settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_HEX_EDITOR_NAMES">
            <summary>
            Start of group options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_HEX_EDITOR_NAMES_GENERAL">
            <summary>
            Order of General settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_HEX_EDITOR_NAMES_SCROLLBARS">
            <summary>
            Order of Scroll Bars settings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_HEX_EDITOR_NAMES_ADVANCED">
            <summary>
            Order of Advanced settings
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.AppSettingsPage">
            <summary>
            Content shown in the options dialog box
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.ParentGuid">
            <summary>
            Parent <see cref="T:System.Guid"/> or <see cref="F:System.Guid.Empty"/> if the root element is the parent
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.Guid">
            <summary>
            Gets the <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.Order">
            <summary>
            Gets the order, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DECOMPILER"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.Title">
            <summary>
            Gets the title shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.Icon">
            <summary>
            Gets the icon shown in the UI (eg. <see cref="P:dnSpy.Contracts.Images.DsImages.Assembly"/>) or <see cref="F:dnSpy.Contracts.Images.ImageReference.None"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.UIObject">
            <summary>
            Gets the UI object. This property is only loaded if the user clicks on the page
            title in the dialog box.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.OnApply">
            <summary>
            Called when all settings should be saved
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.OnClosed">
            <summary>
            Called when the dialog box has been closed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.GetStringsObject">
            <summary>
            Returns the UI object that contains strings. This can be a <see cref="T:System.Windows.UIElement"/>,
            an object with a <see cref="T:System.Windows.DataTemplate"/> or the <see cref="T:System.Type"/> of an object
            with a <see cref="T:System.Windows.DataTemplate"/>. The caller will find all strings in it.
            
            By default, it returns <see cref="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.UIObject"/>. Return null if <see cref="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.UIObject"/>
            takes too long to create and override <see cref="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.GetSearchStrings"/> instead.
            
            See also <see cref="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.GetSearchStrings"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.GetSearchStrings">
            <summary>
            Returns an array of strings shown in the UI that can be searched. This method
            isn't needed if <see cref="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.GetStringsObject"/> returns a non-null value (default
            behavior).
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsPage2">
            <summary>
            Content shown in the options dialog box
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsPage2.OnApply(dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings)">
            <summary>
            Called when all settings should be saved. <see cref="M:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.OnApply"/> is
            never called.
            </summary>
            <param name="appRefreshSettings">Add anything that needs to be refreshed, eg. re-decompile code</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings">
            <summary>
            Stores info on what needs to be refreshed when the settings dialog box has closed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.Add(System.Guid,System.Object)">
            <summary>
            Adds something that must be refreshed, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/>
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/></param>
            <param name="value">Value or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.Has(System.Guid)">
            <summary>
            Returns true if <paramref name="guid"/> has been added by <see cref="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.Add(System.Guid,System.Object)"/>
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings.GetValue(System.Guid)">
            <summary>
            Gets the value or null if it's not present
            </summary>
            <param name="guid">Guid, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.REFRESH_LANGUAGE_SHOWMEMBER"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener">
            <summary>
            Gets notified when the settings dialog box has closed. Use <see cref="T:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener.OnSettingsModified(dnSpy.Contracts.Settings.Dialog.IAppRefreshSettings)">
            <summary>
            Called when the settings have been updated
            </summary>
            <param name="appRefreshSettings">Stuff that must be refreshed</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListenerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListenerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsModifiedListener"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsModifiedListenerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainer">
            <summary>
            Creates an empty app settings page that only contains children settings pages.
            If it has zero children, it won't be shown in the dialog box. Use
            <see cref="T:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainerMetadata.ParentGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.ParentGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainerMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainerMetadata.Title">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Title"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainerMetadata.Icon">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Icon"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageContainer"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.#ctor(System.String,System.String,System.Double,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="title">Title shown in the UI</param>
            <param name="guid">Unique <see cref="T:System.Guid"/> of this app settings instance</param>
            <param name="order">Order of this instance relative to other instances with the same parent, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DECOMPILER"/></param>
            <param name="parentGuid"><see cref="T:System.Guid"/> of the parent or null if the root element is the parent, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_DECOMPILER"/></param>
            <param name="icon">Icon shown in the UI or null</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.ParentGuid">
            <summary>
            Parent <see cref="T:System.Guid"/> or <see cref="F:System.Guid.Empty"/> if the root element is the parent
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Guid">
            <summary>
            Gets the <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Order">
            <summary>
            Gets the order, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.ORDER_DECOMPILER"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Title">
            <summary>
            Gets the title shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Dialog.ExportAppSettingsPageContainerAttribute.Icon">
            <summary>
            Gets the icon shown in the UI or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.Dialog.AppSettingsPage"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsPageProvider.Create">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.Settings.Dialog.AppSettingsPage"/> instances
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Dialog.IAppSettingsService">
            <summary>
            Shows the application settings dialog box
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsService.Show(System.Windows.Window)">
            <summary>
            Shows the dialog box
            </summary>
            <param name="owner">Owner window or null to use the main window</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Dialog.IAppSettingsService.Show(System.Guid,System.Windows.Window)">
            <summary>
            Shows the dialog box and selects the settings page whose <see cref="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.Guid"/> equals <paramref name="guid"/>
            </summary>
            <param name="guid">Guid of settings and must match some instance's <see cref="P:dnSpy.Contracts.Settings.Dialog.AppSettingsPage.Guid"/> property</param>
            <param name="owner">Owner window or null to use the main window</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions">
            <summary>
            Font and color options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions.DisplayName">
            <summary>
            Name shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions.Name">
            <summary>
            Unique name, eg. <see cref="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.TextEditor"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions.FontOption">
            <summary>
            Font option
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions.OnApply">
            <summary>
            Saves all settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions.OnClosed">
            <summary>
            Called after the dialog box is closed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptionsProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions"/> used by the fonts settings page
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptionsProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptionsProvider.GetFontAndColors">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.FontsAndColors.FontAndColorOptions"/> instances
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.FontsAndColors.FontOption">
            <summary>
            Font option
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.FontsAndColors.FontOption.FontType">
            <summary>
            Font type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.FontsAndColors.FontOption.FontFamily">
            <summary>
            Gets/sets the font family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.FontsAndColors.FontOption.FontSize">
            <summary>
            Gets/sets the font size
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.FontsAndColors.FontOption.#ctor(dnSpy.Contracts.Settings.Fonts.FontType)">
            <summary>
            Constructor
            </summary>
            <param name="fontType"></param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.FontSettings">
            <summary>
            Font settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.FontSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Settings.Fonts.FontSettings.PropertyChanged">
            <summary>
            Raised after a property is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.FontSettings.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:dnSpy.Contracts.Settings.Fonts.FontSettings.PropertyChanged"/>
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.FontSettings.ThemeFontSettings">
            <summary>
            Gets the owner
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.FontSettings.ThemeGuid">
            <summary>
            Gets the theme guid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.FontSettings.FontType">
            <summary>
            Gets the font type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.FontSettings.FontFamily">
            <summary>
            Gets/sets the font family
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.FontSettings.FontSize">
            <summary>
            Gets/sets the font size
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.FontType">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Fonts.FontType.TextEditor">
            <summary>
            Text editor font
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Fonts.FontType.HexEditor">
            <summary>
            Hex editor font (monospaced font)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Fonts.FontType.Monospaced">
            <summary>
            Monospaced font
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Fonts.FontType.UI">
            <summary>
            UI font
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings">
            <summary>
            Theme font settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.PropertyChanged">
            <summary>
            Raised after a property is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.PropertyChanged"/>
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.Name">
            <summary>
            Gets the name, eg. <see cref="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.TextEditor"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.FontType">
            <summary>
            Gets the font type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.Active">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Settings.Fonts.FontSettings"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings.GetSettings(System.Guid)">
            <summary>
            Gets theme settings
            </summary>
            <param name="themeGuid">Guid of theme</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.ThemeFontSettingsDefinition">
            <summary>
            Defines a font. Use <see cref="T:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute"/> to
            export a field.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.IThemeFontSettingsDefinitionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.IThemeFontSettingsDefinitionMetadata.Name">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute.Name"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.IThemeFontSettingsDefinitionMetadata.FontType">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute.FontType"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Fonts.ThemeFontSettingsDefinition"/> field
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute.#ctor(System.String,dnSpy.Contracts.Settings.Fonts.FontType)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="fontType">Font type</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Fonts.ExportThemeFontSettingsDefinitionAttribute.FontType">
            <summary>
            Font type
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Fonts.ThemeFontSettingsService">
            <summary>
            <see cref="T:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings"/> service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.ThemeFontSettingsService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Fonts.ThemeFontSettingsService.GetSettings(System.String)">
            <summary>
            Gets a <see cref="T:dnSpy.Contracts.Settings.Fonts.ThemeFontSettings"/> instance
            </summary>
            <param name="name">Name, eg. <see cref="F:dnSpy.Contracts.Settings.AppearanceCategory.AppearanceCategoryConstants.TextEditor"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition">
            <summary>
            Option definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition.ContentType">
            <summary>
            Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/>. Use <see cref="F:dnSpy.Contracts.Text.ContentTypes.Any"/>
            to add default options.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition.Name">
            <summary>
            Text view option name, eg. <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.IndentSizeOptionName"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition.CanBeSaved">
            <summary>
            true if the option can be saved
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition`1">
            <summary>
            Option definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition`1.#ctor(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0})">
            <summary>
            Constructor
            </summary>
            <param name="option">Name of option</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="optionId">Name of option</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.IContentTypeOptionDefinitionProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Settings.Groups.ContentTypeOptionDefinition"/>s. Use <see cref="T:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.IContentTypeOptionDefinitionProvider.GetOptions">
            <summary>
            Returns the options
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.IContentTypeOptionDefinitionProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.IContentTypeOptionDefinitionProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.IContentTypeOptionDefinitionProviderMetadata.Group">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute.Group"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Groups.IContentTypeOptionDefinitionProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute.#ctor(System.String,System.Double)">
            <summary>Constructor</summary>
            <param name="group">Group, eg. <see cref="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.CodeEditor"/></param>
            <param name="order">Order of this instanec</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ExportContentTypeOptionDefinitionProviderAttribute.Group">
            <summary>
            Group, eg. <see cref="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.CodeEditor"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup">
            <summary>
            Contains a group of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s that share a subset of all <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.TextViews">
            <summary>
            Gets all text views in this group
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.TextViewOptionChanged">
            <summary>
            Raised when an option has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.HasOption(System.String,System.String)">
            <summary>
            Returns true if the option is shared by all text views in this group
            </summary>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="optionId">Option name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.HasOption``1(System.String,Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Returns true if the option is shared by all text views in this group
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="option">Option</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.GetOptionValue(System.String,System.String)">
            <summary>
            Gets the current value
            </summary>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="optionId">Option name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.GetOptionValue``1(System.String,Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Gets the current value
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="option">Option</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.SetOptionValue(System.String,System.String,System.Object)">
            <summary>
            Writes a new value
            </summary>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="optionId">Option name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup.SetOptionValue``1(System.String,Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0},``0)">
            <summary>
            Writes a new value
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn"/></param>
            <param name="option">Option</param>
            <param name="value">New value</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupNameProvider">
            <summary>
            Provides group names. Use <see cref="T:dnSpy.Contracts.Settings.Groups.ExportTextViewOptionsGroupNameProviderAttribute"/> to
            export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupNameProvider.TryGetGroupName(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Returns a group name, eg. <see cref="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.CodeEditor"/>, or null
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupNameProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupNameProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Groups.ExportTextViewOptionsGroupNameProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ExportTextViewOptionsGroupNameProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupNameProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ExportTextViewOptionsGroupNameProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instanec</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.ExportTextViewOptionsGroupNameProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupService">
            <summary>
            <see cref="T:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroup"/> service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.ITextViewOptionsGroupService.GetGroup(System.String)">
            <summary>
            Gets a group
            </summary>
            <param name="name">Group name, eg. <see cref="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.CodeEditor"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames">
            <summary>
            Text view group names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.CodeEditor">
            <summary>
            Code editor group
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.DocumentViewer">
            <summary>
            Text viewer group
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.OutputWindow">
            <summary>
            Output window group
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.Groups.PredefinedTextViewGroupNames.REPL">
            <summary>
            REPL group
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Groups.TextViewOptionChangedEventArgs">
            <summary>
            Text view option changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.TextViewOptionChangedEventArgs.ContentType">
            <summary>
            Content type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Groups.TextViewOptionChangedEventArgs.OptionId">
            <summary>
            Option id, eg. <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleName"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Groups.TextViewOptionChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="contentType">Content type</param>
            <param name="optionId">Option id, eg. <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleName"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions">
            <summary>
            Default hex editor options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexEditor.HexEditorOptionsDefinition">
            <summary>
            Defines code editor options that will be shown in the UI. Use <see cref="T:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.Name">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.Name"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.SubGroup">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.SubGroup"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.Type">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.Type"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.HexOffsetFormat">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HexOffsetFormat"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ValuesLowerCaseHex">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ValuesLowerCaseHex"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.OffsetLowerCaseHex">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.OffsetLowerCaseHex"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.GroupSizeInBytes">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.GroupSizeInBytes"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.EnableColorization">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EnableColorization"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.RemoveExtraTextLineVerticalPixels">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.RemoveExtraTextLineVerticalPixels"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ShowColumnLines">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ShowColumnLines"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ColumnLine0">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnLine0"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ColumnLine1">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnLine1"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ColumnGroupLine0">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnGroupLine0"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ColumnGroupLine1">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnGroupLine1"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.HighlightActiveColumn">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightActiveColumn"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.HighlightCurrentValue">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightCurrentValue"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.HighlightCurrentValueDelayMilliSeconds">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightCurrentValueDelayMilliSeconds"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.EncodingCodePage">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EncodingCodePage"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.HighlightStructureUnderMouseCursor">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightStructureUnderMouseCursor"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.EnableHighlightCurrentLine">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EnableHighlightCurrentLine"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.EnableMouseWheelZoom">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EnableMouseWheelZoom"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ZoomLevel">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ZoomLevel"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.HorizontalScrollBar">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HorizontalScrollBar"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.VerticalScrollBar">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.VerticalScrollBar"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.SelectionMargin">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.SelectionMargin"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ZoomControl">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ZoomControl"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.GlyphMargin">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.GlyphMargin"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.IHexEditorOptionsDefinitionMetadata.ForceClearTypeIfNeeded">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ForceClearTypeIfNeeded"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.HexEditor.HexEditorOptionsDefinition"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name shown in the UI</param>
            <param name="subGroup">Sub group, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroupDefault"/></param>
            <param name="guid">Guid of settings</param>
            <param name="type">A type in your assembly so resource strings can be read from the resources</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.Name">
            <summary>
            Name shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.SubGroup">
            <summary>
            Sub group, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroupDefault"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.Guid">
            <summary>
            Guid of settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HexOffsetFormat">
            <summary>
            Offset format, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.HexOffsetFormat"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ValuesLowerCaseHex">
            <summary>
            Values lower case hex, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ValuesLowerCaseHex"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.OffsetLowerCaseHex">
            <summary>
            Offset lower case hex, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.OffsetLowerCaseHex"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.GroupSizeInBytes">
            <summary>
            Group size in bytes, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.GroupSizeInBytes"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EnableColorization">
            <summary>
            Colorize the hex view, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.EnableColorization"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.RemoveExtraTextLineVerticalPixels">
            <summary>
            Remove extra text line vertical pixels, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.RemoveExtraTextLineVerticalPixels"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ShowColumnLines">
            <summary>
            Show column lines, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ShowColumnLines"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnLine0">
            <summary>
            Line between the first two columns (eg. offset and values), default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ColumnLine0"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnLine1">
            <summary>
            Line between second and third columns (eg. values and ASCII), default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ColumnLine1"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnGroupLine0">
            <summary>
            Values column line #0, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ColumnGroupLine0"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ColumnGroupLine1">
            <summary>
            Values column line #1, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ColumnGroupLine1"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightActiveColumn">
            <summary>
            Highlight active column, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.HighlightActiveColumn"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightCurrentValue">
            <summary>
            Highlight current value, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.HighlightCurrentValue"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightCurrentValueDelayMilliSeconds">
            <summary>
            Highlight current value delay in milliseconds, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.HighlightCurrentValueDelayMilliSeconds"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EncodingCodePage">
            <summary>
            Encoding code page, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.EncodingCodePage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HighlightStructureUnderMouseCursor">
            <summary>
            Highlight structure under mouse cursor, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.HighlightStructureUnderMouseCursor"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EnableHighlightCurrentLine">
            <summary>
            Highlight current line, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.EnableHighlightCurrentLine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.EnableMouseWheelZoom">
            <summary>
            Enable mouse wheel zoom, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.EnableMouseWheelZoom"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ZoomLevel">
            <summary>
            Zoom level, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ZoomLevel"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.HorizontalScrollBar">
            <summary>
            Enable horizontal scrollbar, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.HorizontalScrollBar"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.VerticalScrollBar">
            <summary>
            Enable vertical scrollbar, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.VerticalScrollBar"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.SelectionMargin">
            <summary>
            Enable selection margin, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.SelectionMargin"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ZoomControl">
            <summary>
            Enable zoom control, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ZoomControl"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.GlyphMargin">
            <summary>
            Enable glyph margin, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.GlyphMargin"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexEditor.ExportHexEditorOptionsDefinitionAttribute.ForceClearTypeIfNeeded">
            <summary>
            Force clear type, default value is <see cref="F:dnSpy.Contracts.Settings.HexEditor.DefaultHexEditorOptions.ForceClearTypeIfNeeded"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.HexViewOptionChangedEventArgs">
            <summary>
            Hex view option changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.HexViewOptionChangedEventArgs.SubGroup">
            <summary>
            Sub group, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroupDefault"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.HexViewOptionChangedEventArgs.OptionId">
            <summary>
            Option id, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.BytesPerLineName"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="subGroup">Sub group</param>
            <param name="optionId">Option id, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.BytesPerLineName"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup">
            <summary>
            Contains a group of <see cref="T:dnSpy.Contracts.Hex.Editor.HexView"/>s that share a subset of all <see cref="T:dnSpy.Contracts.Hex.Editor.HexView"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.HexViews">
            <summary>
            Gets all hex views in this group
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.HexViewOptionChanged">
            <summary>
            Raised when an option has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.HasOption(System.String,System.String)">
            <summary>
            Returns true if the option is shared by all hex views in this group
            </summary>
            <param name="tag">Hex buffer tag, eg. <see cref="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File"/></param>
            <param name="optionId">Option name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.HasOption``1(System.String,Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Returns true if the option is shared by all hex views in this group
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="tag">Hex buffer tag, eg. <see cref="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File"/></param>
            <param name="option">Option</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.GetOptionValue(System.String,System.String)">
            <summary>
            Gets the current value
            </summary>
            <param name="tag">Hex buffer tag, eg. <see cref="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File"/></param>
            <param name="optionId">Option name</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.GetOptionValue``1(System.String,Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Gets the current value
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="tag">Hex buffer tag, eg. <see cref="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File"/></param>
            <param name="option">Option</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.SetOptionValue(System.String,System.String,System.Object)">
            <summary>
            Writes a new value
            </summary>
            <param name="tag">Hex buffer tag, eg. <see cref="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File"/></param>
            <param name="optionId">Option name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup.SetOptionValue``1(System.String,Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0},``0)">
            <summary>
            Writes a new value
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="tag">Hex buffer tag, eg. <see cref="F:dnSpy.Contracts.Hex.PredefinedHexBufferTags.File"/></param>
            <param name="option">Option</param>
            <param name="value">New value</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupNameProvider">
            <summary>
            Provides group names. Use <see cref="T:dnSpy.Contracts.Settings.HexGroups.ExportHexViewOptionsGroupNameProviderAttribute"/> to
            export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupNameProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupNameProvider.TryGetGroupName(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Returns a group name, eg. <see cref="F:dnSpy.Contracts.Settings.HexGroups.PredefinedHexViewGroupNames.HexEditor"/>, or null
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.IHexViewOptionsGroupNameProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.IHexViewOptionsGroupNameProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexGroups.ExportHexViewOptionsGroupNameProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.ExportHexViewOptionsGroupNameProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupNameProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.ExportHexViewOptionsGroupNameProviderAttribute.#ctor(System.Double)">
            <summary>Constructor</summary>
            <param name="order">Order of this instanec</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.ExportHexViewOptionsGroupNameProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupService">
            <summary>
            <see cref="T:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroup"/> service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.HexViewOptionsGroupService.GetGroup(System.String)">
            <summary>
            Gets a group
            </summary>
            <param name="name">Group name, eg. <see cref="F:dnSpy.Contracts.Settings.HexGroups.PredefinedHexViewGroupNames.HexEditor"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.PredefinedHexViewGroupNames">
            <summary>
            Hex view group names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Settings.HexGroups.PredefinedHexViewGroupNames.HexEditor">
            <summary>
            Hex editor group
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition">
            <summary>
            Option definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition.SubGroup">
            <summary>
            Sub group, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroupDefault"/>.
            Use <see cref="F:System.String.Empty"/> to add default options.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition.Name">
            <summary>
            Hex view option name, eg. <see cref="F:dnSpy.Contracts.Hex.Editor.DefaultHexViewOptions.BytesPerLineId"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition.CanBeSaved">
            <summary>
            true if the option can be saved
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition`1">
            <summary>
            Option definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition`1.#ctor(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0})">
            <summary>
            Constructor
            </summary>
            <param name="option">Name of option</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="optionId">Name of option</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinitionProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinition"/>s. Use <see cref="T:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinitionProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinitionProvider.GetOptions">
            <summary>
            Returns the options
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinitionProvider.GetSubGroup(dnSpy.Contracts.Hex.Editor.WpfHexView)">
            <summary>
            Gets the sub group (eg. <see cref="F:dnSpy.Contracts.Hex.Editor.PredefinedHexViewRoles.HexEditorGroupDefault"/>) to use or null
            </summary>
            <param name="hexView">Hex view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.ITagOptionDefinitionProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.ITagOptionDefinitionProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.ITagOptionDefinitionProviderMetadata.Group">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute.Group"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.HexGroups.TagOptionDefinitionProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute.#ctor(System.String,System.Double)">
            <summary>Constructor</summary>
            <param name="group">Group, eg. <see cref="F:dnSpy.Contracts.Settings.HexGroups.PredefinedHexViewGroupNames.HexEditor"/></param>
            <param name="order">Order of this instanec</param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.HexGroups.ExportTagOptionDefinitionProviderAttribute.Group">
            <summary>
            Group, eg. <see cref="F:dnSpy.Contracts.Settings.HexGroups.PredefinedHexViewGroupNames.HexEditor"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.ISettingsSection">
            <summary>
            Settings section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsSection.Name">
            <summary>
            Name of section
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsSection.Attributes">
            <summary>
            Gets all attributes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.Attribute``1(System.String,``0)">
            <summary>
            Adds or overwrites an existing attribute with a new value
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="name">Name of attribute</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.Attribute``1(System.String)">
            <summary>
            Gets the value of the attribute or the default value if it's not present
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="name">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute
            </summary>
            <param name="name">Name of attribute</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSection.CopyFrom(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Copies <paramref name="section"/> to this instance
            </summary>
            <param name="section">Source section</param>
        </member>
        <member name="T:dnSpy.Contracts.Settings.ISettingsSectionProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Settings.ISettingsSection"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsSectionProvider.Sections">
            <summary>
            Gets all sections
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionProvider.CreateSection(System.String)">
            <summary>
            Creates a new section, even if a section with the same name already exists
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionProvider.GetOrCreateSection(System.String)">
            <summary>
            Gets an existing section or creates a new one if one doesn't exist
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionProvider.RemoveSection(System.String)">
            <summary>
            Removes a section
            </summary>
            <param name="name">Name of section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionProvider.RemoveSection(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Removes a section
            </summary>
            <param name="section">Section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionProvider.SectionsWithName(System.String)">
            <summary>
            Gets all sections
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsSectionProvider.TryGetSection(System.String)">
            <summary>
            Gets a section or null if it doesn't exist
            </summary>
            <param name="name">Name of section</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.ISettingsService">
            <summary>
            Settings manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.ISettingsService.Sections">
            <summary>
            Gets all sections
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsService.GetOrCreateSection(System.Guid)">
            <summary>
            Gets an existing section or creates a new one if one doesn't exist
            </summary>
            <param name="guid">Guid of section</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsService.RemoveSection(System.Guid)">
            <summary>
            Removes a section
            </summary>
            <param name="guid">Guid of section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsService.RemoveSection(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Removes a section
            </summary>
            <param name="section">Section</param>
        </member>
        <member name="M:dnSpy.Contracts.Settings.ISettingsService.RecreateSection(System.Guid)">
            <summary>
            Removes an existing section and re-creates it
            </summary>
            <param name="guid">Guid of section</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Repl.DefaultReplOptions">
            <summary>
            Default REPL options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Repl.ReplOptionsDefinition">
            <summary>
            Defines REPL options that will be shown in the UI. Use <see cref="T:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ContentType">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ContentType"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.LanguageName">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.LanguageName"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.UseVirtualSpace">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.UseVirtualSpace"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.WordWrapStyle">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.WordWrapStyle"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ShowLineNumbers">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ShowLineNumbers"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.HighlightCurrentLine">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightCurrentLine"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.CutOrCopyBlankLineIfNoSelection">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.CutOrCopyBlankLineIfNoSelection"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.DisplayUrlsAsHyperlinks">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.DisplayUrlsAsHyperlinks"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ForceClearTypeIfNeeded">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ForceClearTypeIfNeeded"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.HorizontalScrollBar">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HorizontalScrollBar"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.VerticalScrollBar">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.VerticalScrollBar"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.TabSize">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.TabSize"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.IndentSize">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.IndentSize"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ConvertTabsToSpaces">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ConvertTabsToSpaces"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.HighlightReferences">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightReferences"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.HighlightRelatedKeywords">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightRelatedKeywords"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.HighlightMatchingBrace">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightMatchingBrace"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.LineSeparators">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.LineSeparators"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ShowBlockStructure">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ShowBlockStructure"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.BlockStructureLineKind">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.BlockStructureLineKind"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.CompressEmptyOrWhitespaceLines">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.CompressEmptyOrWhitespaceLines"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.CompressNonLetterLines">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.CompressNonLetterLines"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.RemoveExtraTextLineVerticalPixels">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.RemoveExtraTextLineVerticalPixels"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.SelectionMargin">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.SelectionMargin"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.GlyphMargin">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.GlyphMargin"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.MouseWheelZoom">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.MouseWheelZoom"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ZoomControl">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ZoomControl"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.IReplOptionsDefinitionMetadata.ZoomLevel">
            <summary>See <see cref="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ZoomLevel"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Settings.Repl.ReplOptionsDefinition"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Constructor</summary>
            <param name="languageName">Language name shown in the UI</param>
            <param name="contentType">Content type, eg. <see cref="F:dnSpy.Contracts.Text.ContentTypes.ReplCSharpRoslyn"/></param>
            <param name="guid">Guid of settings, eg. <see cref="F:dnSpy.Contracts.Settings.Dialog.AppSettingsConstants.GUID_REPL_CSHARP_ROSLYN"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ContentType">
            <summary>
            Content type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.Guid">
            <summary>
            Guid of settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.LanguageName">
            <summary>
            Language name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.UseVirtualSpace">
            <summary>
            Use virtual space, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.UseVirtualSpace"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.WordWrapStyle">
            <summary>
            Word wrap style, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.WordWrapStyle"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ShowLineNumbers">
            <summary>
            Show line numbers, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.ShowLineNumbers"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightCurrentLine">
            <summary>
            Highlight current line, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.HighlightCurrentLine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.CutOrCopyBlankLineIfNoSelection">
            <summary>
            Cut or copy blank link if no selection, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.CutOrCopyBlankLineIfNoSelection"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.DisplayUrlsAsHyperlinks">
            <summary>
            Display URLs as hyperlinks, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.DisplayUrlsAsHyperlinks"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ForceClearTypeIfNeeded">
            <summary>
            Force ClearType, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.ForceClearTypeIfNeeded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HorizontalScrollBar">
            <summary>
            Show horizontal scroll bar, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.HorizontalScrollBar"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.VerticalScrollBar">
            <summary>
            Show vertical scroll bar, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.VerticalScrollBar"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.TabSize">
            <summary>
            Tab size, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.TabSize"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.IndentSize">
            <summary>
            Indent size, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.IndentSize"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ConvertTabsToSpaces">
            <summary>
            true to convert tabs to spaces, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.ConvertTabsToSpaces"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightReferences">
            <summary>
            Highlight references, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.HighlightReferences"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightRelatedKeywords">
            <summary>
            Highlight related keywords, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.HighlightRelatedKeywords"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.HighlightMatchingBrace">
            <summary>
            Highlight matching brace, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.HighlightMatchingBrace"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.LineSeparators">
            <summary>
            Line separators, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.LineSeparators"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ShowBlockStructure">
            <summary>
            Show indent guides, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.ShowBlockStructure"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.BlockStructureLineKind">
            <summary>
            Block structure line kind, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.BlockStructureLineKind"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.CompressEmptyOrWhitespaceLines">
            <summary>
            Compress empty/whitespace lines, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.CompressEmptyOrWhitespaceLines"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.CompressNonLetterLines">
            <summary>
            Compress non-letter lines, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.CompressNonLetterLines"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.RemoveExtraTextLineVerticalPixels">
            <summary>
            Don't use extra line spacing, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.RemoveExtraTextLineVerticalPixels"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.SelectionMargin">
            <summary>
            Show selection margin, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.SelectionMargin"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.GlyphMargin">
            <summary>
            Show glyph margin, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.GlyphMargin"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.MouseWheelZoom">
            <summary>
            Enable mouse wheel zoom, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.MouseWheelZoom"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ZoomControl">
            <summary>
            Show zoom control, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.ZoomControl"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Settings.Repl.ExportReplOptionsDefinitionAttribute.ZoomLevel">
            <summary>
            Zoom level, default value is <see cref="F:dnSpy.Contracts.Settings.Repl.DefaultReplOptions.ZoomLevel"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabContent">
            <summary>
            Tab content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.Title">
            <summary>
            Title. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.ToolTip">
            <summary>
            ToolTip or null. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.UIObject">
            <summary>
            The UI object. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabContent.FocusedElement">
            <summary>
            Gets the element that should get focus when the tab is selected or null to use <see cref="P:dnSpy.Contracts.Tabs.ITabContent.UIObject"/>.
            Implement <see cref="T:dnSpy.Contracts.Controls.IFocusable"/> to set focus yourself.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabContent.OnVisibilityChanged(dnSpy.Contracts.Tabs.TabContentVisibilityEvent)">
            <summary>
            Called when the visibility changes
            </summary>
            <param name="visEvent">Event</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabGroup">
            <summary>
            Contains 0 or more tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.Tag">
            <summary>
            Any value can be written here. It's ignored by this instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.TabGroupService">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.TabContents">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.ActiveTabContent">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> or null if <see cref="P:dnSpy.Contracts.Tabs.ITabGroup.TabContents"/> is empty
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroup.TabContentAttached">
            <summary>
            Raised when a <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> is attached/detached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.IsKeyboardFocusWithin">
            <summary>
            true if keyboard focus is within the tab
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.SetFocus(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Sets keyboard focus
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.Close(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Closes the tab
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.Add(dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Adds tab content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.CloseActiveTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.CloseActiveTab"/> can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.CloseActiveTab">
            <summary>
            Closes the active tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.CloseAllTabsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllTabs"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllTabs">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.CloseAllButActiveTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllButActiveTab"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.CloseAllButActiveTab">
            <summary>
            Closes all tabs except the active tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.SelectNextTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.SelectNextTab"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.SelectNextTab">
            <summary>
            Selects the next tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.SelectPreviousTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroup.SelectPreviousTab"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroup.SelectPreviousTab">
            <summary>
            Selects the previous tab
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroup.ContextMenuProvider">
            <summary>
            Gets the context menu provider
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabGroupService">
            <summary>
            <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.Tag">
            <summary>
            Any value can be written here. It's ignored by this instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.TabService">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Tabs.ITabService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.TabGroups">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.ActiveTabGroup">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> or null if <see cref="P:dnSpy.Contracts.Tabs.ITabGroupService.TabGroups"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.IsHorizontal">
            <summary>
            true if the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/>s are lined up horizontally, else vertically
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroupService.TabSelectionChanged">
            <summary>
            Raised when a new tab has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroupService.TabGroupSelectionChanged">
            <summary>
            Raised when a new tab group has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Tabs.ITabGroupService.TabGroupCollectionChanged">
            <summary>
            Raised when a tab group has been added or removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.Close(dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Closes the tab group
            </summary>
            <param name="tabGroup">Tab group</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.CloseAllTabsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.CloseAllTabs"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.CloseAllTabs">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.NewHorizontalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.NewHorizontalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.NewHorizontalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})">
            <summary>
            Moves the active tab to a new horizontal tab group
            </summary>
            <param name="onCreated">Called after the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instance has been created</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.NewVerticalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.NewVerticalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.NewVerticalTabGroup(System.Action{dnSpy.Contracts.Tabs.ITabGroup})">
            <summary>
            Moves the active tab to a new vertical tab group
            </summary>
            <param name="onCreated">Called after the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> instance has been created</param>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MoveToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveToNextTabGroup">
            <summary>
            Moves active tab to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MoveToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveToPreviousTabGroup">
            <summary>
            Moves the active tab to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MoveAllToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveAllToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveAllToNextTabGroup">
            <summary>
            Moves all tabs in the current tab group to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MoveAllToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveAllToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveAllToPreviousTabGroup">
            <summary>
            Moves all tabs in the current tab group to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.CloseTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.CloseTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.CloseTabGroup">
            <summary>
            Closes the tab group and all its tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.CloseAllTabGroupsButThisCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.CloseAllTabGroupsButThis"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.CloseAllTabGroupsButThis">
            <summary>
            Closes all tab groups except the active one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MoveTabGroupAfterNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveTabGroupAfterNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveTabGroupAfterNextTabGroup">
            <summary>
            Moves the active tab group after the next one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MoveTabGroupBeforePreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveTabGroupBeforePreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MoveTabGroupBeforePreviousTabGroup">
            <summary>
            Moves the active tab group before the previous one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.MergeAllTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.MergeAllTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.MergeAllTabGroups">
            <summary>
            Moves all tabs to one tab group and closes the remaining (empty) tab groups
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.UseVerticalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.UseVerticalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.UseVerticalTabGroups">
            <summary>
            Stacks all tab groups vertically
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabGroupService.UseHorizontalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Tabs.ITabGroupService.UseHorizontalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabGroupService.UseHorizontalTabGroups">
            <summary>
            Stacks all tab groups horizontally
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabService.TabGroupServices">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.ITabService.ActiveTabGroupService">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabService.Create(dnSpy.Contracts.Tabs.TabGroupServiceOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instance
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabService.Remove(dnSpy.Contracts.Tabs.ITabGroupService)">
            <summary>
            Removes a <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> instance
            </summary>
            <param name="mgr">Instance to remove</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.ITabServiceProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Tabs.ITabService"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.ITabServiceProvider.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Tabs.ITabService"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.Tabs.ITabContent"/> attached/detached event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs.Attached">
            <summary>
            true if attached, false if detached
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs.TabContent">
            <summary>
            The attached/detached tab content instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabContentAttachedEventArgs.#ctor(System.Boolean,dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Constructor
            </summary>
            <param name="attached">true if attached, false if detached</param>
            <param name="tabContent">Tab content</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabContentVisibilityEvent">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Added">
            <summary>
            It's been added to the UI. It may or may not be visible.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Removed">
            <summary>
            It's been removed from the UI
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Visible">
            <summary>
            It's open and visible
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.Hidden">
            <summary>
            It's open but hidden
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.GotKeyboardFocus">
            <summary>
            The content got keyboard focus
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabContentVisibilityEvent.LostKeyboardFocus">
            <summary>
            The content lost keyboard focus
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs">
            <summary>
            Collection changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.Added">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.TabGroup"/> was added, false if it was removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.TabGroup">
            <summary>
            The tab group
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupCollectionChangedEventArgs.#ctor(System.Boolean,dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Constructor
            </summary>
            <param name="added">true if it was added</param>
            <param name="tabGroup">Tab group</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs">
            <summary>
            Tab group selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs.Selected">
            <summary>
            Selected tab group or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs.Unselected">
            <summary>
            Unselected tab group or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupSelectedEventArgs.#ctor(dnSpy.Contracts.Tabs.ITabGroup,dnSpy.Contracts.Tabs.ITabGroup)">
            <summary>
            Constructor
            </summary>
            <param name="selected">Selected tab group or null</param>
            <param name="unselected">Unselected tab group or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabGroupServiceOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Tabs.ITabGroupService"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupServiceOptions.TabControlStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupServiceOptions.TabItemStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabGroupServiceOptions.TabGroupGuid">
            <summary>
            Guid to use to initialize the context menu if <see cref="F:dnSpy.Contracts.Tabs.TabGroupServiceOptions.InitializeContextMenu"/> is null
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Tabs.TabGroupServiceOptions.InitializeContextMenu">
            <summary>
            Called in the <see cref="T:dnSpy.Contracts.Tabs.ITabGroup"/> constructor to initialize the context menu. If
            null, the instance itself initializes it using <see cref="P:dnSpy.Contracts.Tabs.TabGroupServiceOptions.TabGroupGuid"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupServiceOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupServiceOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroupGuid">See <see cref="P:dnSpy.Contracts.Tabs.TabGroupServiceOptions.TabGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupServiceOptions.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroupGuid">See <see cref="P:dnSpy.Contracts.Tabs.TabGroupServiceOptions.TabGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabGroupServiceOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Tabs.TabSelectedEventArgs">
            <summary>
            Tab selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabSelectedEventArgs.TabGroup">
            <summary>
            Tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabSelectedEventArgs.Selected">
            <summary>
            Selected tab content or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Tabs.TabSelectedEventArgs.Unselected">
            <summary>
            Unselected tab content or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Tabs.TabSelectedEventArgs.#ctor(dnSpy.Contracts.Tabs.ITabGroup,dnSpy.Contracts.Tabs.ITabContent,dnSpy.Contracts.Tabs.ITabContent)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroup">Tab group</param>
            <param name="selected">Selected content or null</param>
            <param name="unselected">Unselected content or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.EditorFormatMapConstants">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.EditorFormatMapConstants.TextViewBackgroundId">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> background
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.EditorFormatMapConstants.PlainText">
            <summary>
            Plain text font and color
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ISynchronousClassifier">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ISynchronousClassifier.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Gets all classification spans
            </summary>
            <param name="span">Span to classify</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ISynchronousClassifierAggregatorService">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifierAggregatorService"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ISynchronousClassifierAggregatorService.GetSynchronousClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a synchronous classifier aggregator
            </summary>
            <param name="textBuffer">Text buffer</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ISynchronousViewClassifierAggregatorService">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ISynchronousViewClassifierAggregatorService.GetSynchronousClassifier(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a synchronous classifier aggregator
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ITextClassifier">
            <summary>
            Classifies text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ITextClassifier.GetTags(dnSpy.Contracts.Text.Classification.TextClassifierContext)">
            <summary>
            Classifies text
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ITextClassifierAggregator">
            <summary>
            Text classifier aggregator, see <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifierAggregatorService"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ITextClassifierAggregatorService">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifier"/> that aggregates and normalizes
            all <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifier"/> contributions.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ITextClassifierAggregatorService.Create(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifierAggregator"/>
            </summary>
            <param name="contentType">Content type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ITextClassifierProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifier"/>s. Export the instance with
            at least one <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ITextClassifierProvider.Create(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifier"/> or returns null
            </summary>
            <param name="contentType">Content type</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ITextElementProvider">
            <summary>
            Creates WPF text elements
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ITextElementProvider.CreateTextElement(Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap,dnSpy.Contracts.Text.Classification.TextClassifierContext,System.String,dnSpy.Contracts.Text.Classification.TextElementFlags)">
            <summary>
            Creates a WPF text element
            </summary>
            <param name="classificationFormatMap">Classification format map</param>
            <param name="context">Text classifier context</param>
            <param name="contentType">Content type</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.IThemeClassificationTypeService">
            <summary>
            Returns theme <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.IThemeClassificationTypeService.GetClassificationType(dnSpy.Contracts.Text.TextColor)">
            <summary>
            Gets a classification type or a default classification type if <paramref name="color"/> is invalid
            </summary>
            <param name="color">Color</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.IThemeFormatDefinition">
            <summary>
            Theme <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.IThemeFormatDefinition.CreateResourceDictionary(dnSpy.Contracts.Themes.ITheme)">
            <summary>
            Creates a new <see cref="T:System.Windows.ResourceDictionary"/>
            </summary>
            <param name="theme">Theme</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.LanguagePriority">
            <summary>
            Language priority
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.PredefinedClassificationTypeNames">
            <summary>
            Predefined classification type names
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags">
            <summary>
            Text classifier tags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.MethodBodyEditor">
            <summary>
            Method body editor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.DocListDialogName">
            <summary>
            List dialog column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.DocListDialogCount">
            <summary>
            List dialog column: Count
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.GacDialogName">
            <summary>
            GAC dialog column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.GacDialogVersion">
            <summary>
            GAC dialog column: Version
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.TabsDialogName">
            <summary>
            Windows dialog column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.TabsDialogModule">
            <summary>
            Windows dialog column: Module
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.TabsDialogPath">
            <summary>
            Windows dialog column: Path
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.BreakpointsWindowName">
            <summary>
            Breakpoints window column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.BreakpointsWindowAssembly">
            <summary>
            Breakpoints window column: Assembly
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.BreakpointsWindowModule">
            <summary>
            Breakpoints window column: Module
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.BreakpointsWindowFile">
            <summary>
            Breakpoints window column: File
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.CallStackWindowName">
            <summary>
            Call Stack window column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowFullPath">
            <summary>
            Attach to Process window column: FullPath
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowFilename">
            <summary>
            Attach to Process window column: Filename
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowPid">
            <summary>
            Attach to Process window column: PID
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowClrVersion">
            <summary>
            Attach to Process window column: CLRVersion
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowType">
            <summary>
            Attach to Process window column: Type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowMachine">
            <summary>
            Attach to Process window column: Machine
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.AttachToProcessWindowTitle">
            <summary>
            Attach to Process window column: Title
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ExceptionSettingsWindowName">
            <summary>
            Exception Settings window column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.LocalsWindowName">
            <summary>
            Locals window column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.LocalsWindowValue">
            <summary>
            Locals window column: Value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.LocalsWindowType">
            <summary>
            Locals window column: Type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowName">
            <summary>
            Modules window column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowPath">
            <summary>
            Modules window column: Path
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowOptimized">
            <summary>
            Modules window column: Optimized
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowDynamic">
            <summary>
            Modules window column: Dynamic
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowInMemory">
            <summary>
            Modules window column: InMemory
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowOrder">
            <summary>
            Modules window column: Order
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowVersion">
            <summary>
            Modules window column: Version
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowTimestamp">
            <summary>
            Modules window column: Timestamp
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowAddress">
            <summary>
            Modules window column: Address
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowProcess">
            <summary>
            Modules window column: Process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ModulesWindowAppDomain">
            <summary>
            Modules window column: AppDomain
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowId">
            <summary>
            Threads window column: Id
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowManagedId">
            <summary>
            Threads window column: ManagedId
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowCategoryText">
            <summary>
            Threads window column: CategoryText
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowName">
            <summary>
            Threads window column: Name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowLocation">
            <summary>
            Threads window column: Location
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowPriority">
            <summary>
            Threads window column: Priority
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowAffinityMask">
            <summary>
            Threads window column: AffinityMask
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowSuspended">
            <summary>
            Threads window column: Suspended
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowProcess">
            <summary>
            Threads window column: Process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowAppDomain">
            <summary>
            Threads window column: AppDomain
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.ThreadsWindowUserState">
            <summary>
            Threads window column: UserState
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags.OptionsDialogText">
            <summary>
            Options dialog text
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.RoslynClassificationTypeNames">
            <summary>
            Roslyn classification type names
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextBlockFactory">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.TextBlock"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags.None">
            <summary>
            Nothing is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags.DisableSetTextBlockFontFamily">
            <summary>
            Don't set the <see cref="T:System.Windows.Controls.TextBlock"/>'s font
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags.DisableWordWrap">
            <summary>
            If set, the text won't word wrap
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags.DisableFontSize">
            <summary>
            If set, don't set font size
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags.FilterOutNewlines">
            <summary>
            Filter out newlines by replacing them with spaces
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextBlockFactory.Create(System.String,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,System.Collections.Generic.IEnumerable{dnSpy.Contracts.Text.Classification.TextRunPropertiesAndSpan},dnSpy.Contracts.Text.Classification.TextBlockFactory.Flags)">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.TextBlock"/>
            </summary>
            <param name="text">Full text</param>
            <param name="defaultProperties">Default text run properties</param>
            <param name="orderedPropsAndSpans">Ordered enumerable of spans and text run properties</param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextRunPropertiesAndSpan">
            <summary>
            Text properties and span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextRunPropertiesAndSpan.Span">
            <summary>
            Span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextRunPropertiesAndSpan.Properties">
            <summary>
            Text properties
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextRunPropertiesAndSpan.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="properties">Text properties</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextClassificationTag">
            <summary>
            Text classification tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassificationTag.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassificationTag.ClassificationType">
            <summary>
            Gets the classification type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextClassificationTag.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="classificationType">Classification type</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextClassifierContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifier"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierContext.Properties">
            <summary>
            Gets the properties
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierContext.Text">
            <summary>
            Gets the text to classify
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierContext.Tag">
            <summary>
            Tag, see <see cref="T:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierContext.Colorize">
            <summary>
            true if it should be colorized. Only special classifiers can ignore this, eg. highlighters
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierContext.Colors">
            <summary>
            Default colors, can be empty and there could be non-classified parts
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextClassifierContext.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyCollection{dnSpy.Contracts.Text.SpanData{System.Object}})">
            <summary>
            Constructor
            </summary>
            <param name="text">Text to classify</param>
            <param name="tag">Tag (<see cref="T:dnSpy.Contracts.Text.Classification.PredefinedTextClassifierTags"/>), can be null</param>
            <param name="colorize">true if it should be colorized. Only special classifiers can ignore this, eg. highlighters</param>
            <param name="colors">Default colors or null (see <see cref="T:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter"/>)</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter">
            <summary>
            Implements <see cref="T:dnSpy.Contracts.Text.ITextColorWriter"/> and stores all colors and text.
            The result can be passed to <see cref="M:dnSpy.Contracts.Text.Classification.TextClassifierContext.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyCollection{dnSpy.Contracts.Text.SpanData{System.Object}})"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter.Text">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter.Colors">
            <summary>
            Gets the colors
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter.Write(dnSpy.Contracts.Text.TextColor,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter.Write(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.TextClassifierTextColorWriter.Clear">
            <summary>
            Clears the text and colors so the instance can be reused
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.TextElementFlags">
            <summary>
            Text element flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.FilterOutNewLines">
            <summary>
            Filter out newlines from the string by replacing them with spaces
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.NewFormatter">
            <summary>
            Use the new text formatter, it's faster but doesn't support word wrap or all unicode characters
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.WrapMask">
            <summary>
            Mask to get word wrap enum
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.NoWrap">
            <summary>
            <see cref="F:System.Windows.TextWrapping.NoWrap"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.WrapWithOverflow">
            <summary>
            <see cref="F:System.Windows.TextWrapping.WrapWithOverflow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.Wrap">
            <summary>
            <see cref="F:System.Windows.TextWrapping.Wrap"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.TrimmingMask">
            <summary>
            Mask to get text trimming enum
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.NoTrimming">
            <summary>
            <see cref="F:System.Windows.TextTrimming.None"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.CharacterEllipsis">
            <summary>
            <see cref="F:System.Windows.TextTrimming.CharacterEllipsis"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.TextElementFlags.WordEllipsis">
            <summary>
            <see cref="F:System.Windows.TextTrimming.WordEllipsis"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ThemeClassificationFormatDefinition">
            <summary>
            Theme classification definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ThemeClassificationFormatDefinition.#ctor(dnSpy.Contracts.Text.TextColor)">
            <summary>
            Constructor
            </summary>
            <param name="textColor">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ThemeClassificationFormatDefinition.CreateResourceDictionary(dnSpy.Contracts.Themes.ITheme)">
            <summary>
            Creates a new <see cref="T:System.Windows.ResourceDictionary"/>
            </summary>
            <param name="theme">Theme</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys">
            <summary>
            Classification type keys
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Text">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Text"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Operator">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Operator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Punctuation">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Punctuation"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Number">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Number"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Comment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Comment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Keyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Keyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.String">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.String"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.VerbatimString">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.VerbatimString"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Char">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Char"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Namespace">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Namespace"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Type">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Type"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SealedType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SealedType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.StaticType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Delegate">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Delegate"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Enum">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Enum"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Interface">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Interface"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ValueType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ValueType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Module">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Module"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.TypeGenericParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.TypeGenericParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.MethodGenericParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.MethodGenericParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InstanceMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.StaticMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ExtensionMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ExtensionMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InstanceField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.EnumField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.EnumField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.LiteralField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.LiteralField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.StaticField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InstanceEvent">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceEvent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.StaticEvent">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticEvent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InstanceProperty">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceProperty"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.StaticProperty">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticProperty"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Local">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Local"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Parameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Parameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.PreprocessorKeyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.PreprocessorKeyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.PreprocessorText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.PreprocessorText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Label">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Label"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.OpCode">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.OpCode"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ILDirective">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ILDirective"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ILModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ILModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ExcludedCode">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ExcludedCode"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentAttributeName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentAttributeName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentEntityReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentEntityReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocCommentText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralAttributeName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralAttributeName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralEmbeddedExpression">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralEmbeddedExpression"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralEntityReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralEntityReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlLiteralText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlAttribute">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlAttribute"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlKeyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlKeyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlAttribute">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlAttribute"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlKeyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlKeyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlMarkupExtensionClass">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlMarkupExtensionClass"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlMarkupExtensionParameterName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlMarkupExtensionParameterName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlMarkupExtensionParameterValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlMarkupExtensionParameterValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XamlText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.XmlDocToolTipHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocToolTipHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Assembly">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Assembly"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.AssemblyExe">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AssemblyExe"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.AssemblyModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AssemblyModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DirectoryPart">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DirectoryPart"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.FileNameNoExtension">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.FileNameNoExtension"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.FileExtension">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.FileExtension"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Error">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Error"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ToStringEval">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ToStringEval"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplPrompt1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplPrompt1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplPrompt2">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplPrompt2"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplOutputText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplOutputText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplScriptOutputText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplScriptOutputText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Black">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Black"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Blue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Blue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Cyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Cyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkBlue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkBlue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkCyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkCyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkGray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkGray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkGreen">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkGreen"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkMagenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkMagenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkRed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkRed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DarkYellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkYellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Gray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Gray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Green">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Green"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Magenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Magenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Red">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Red"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.White">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.White"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Yellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Yellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvBlack">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvBlack"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvBlue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvBlue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvCyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvCyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkBlue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkBlue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkCyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkCyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkGray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkGray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkGreen">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkGreen"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkMagenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkMagenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkRed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkRed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvDarkYellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkYellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvGray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvGray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvGreen">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvGreen"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvMagenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvMagenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvRed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvRed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvWhite">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvWhite"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InvYellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvYellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogExceptionHandled">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExceptionHandled"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogExceptionUnhandled">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExceptionUnhandled"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogStepFiltering">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogStepFiltering"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogLoadModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogLoadModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogUnloadModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogUnloadModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogExitProcess">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExitProcess"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogExitThread">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExitThread"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogProgramOutput">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogProgramOutput"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogMDA">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogMDA"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DebugLogTimestamp">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogTimestamp"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.LineNumber">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.LineNumber"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplLineNumberInput1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplLineNumberInput1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplLineNumberInput2">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplLineNumberInput2"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ReplLineNumberOutput">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplLineNumberOutput"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.VisibleWhitespace">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.VisibleWhitespace"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SelectedText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SelectedText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.InactiveSelectedText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InactiveSelectedText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HighlightedReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HighlightedReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HighlightedWrittenReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HighlightedWrittenReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HighlightedDefinition">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HighlightedDefinition"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CurrentStatement">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentStatement"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CurrentStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CallReturn">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CallReturn"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CallReturnMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CallReturnMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.ActiveStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ActiveStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BreakpointStatement">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BreakpointStatement"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BreakpointStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BreakpointStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SelectedBreakpointStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SelectedBreakpointStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DisabledBreakpointStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DisabledBreakpointStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CurrentLine">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentLine"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CurrentLineNoFocus">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentLineNoFocus"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexOffset">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexOffset"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexByte0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexByte0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexByte1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexByte1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexByteError">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexByteError"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexAscii">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexAscii"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexCaret">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCaret"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexInactiveCaret">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexInactiveCaret"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexSelection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexSelection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.GlyphMargin">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.GlyphMargin"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BraceMatching">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BraceMatching"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.LineSeparator">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.LineSeparator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.FindMatchHighlightMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.FindMatchHighlightMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureNamespace">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureNamespace"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureValueType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureValueType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureInterface">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureInterface"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureAccessor">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureAccessor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureAnonymousMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureAnonymousMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureConstructor">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureConstructor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureDestructor">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureDestructor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureOperator">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureOperator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureConditional">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureConditional"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureLoop">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureLoop"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureProperty">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureProperty"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureEvent">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureEvent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureTry">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureTry"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureCatch">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureCatch"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureFilter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFilter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureFinally">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFinally"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureFault">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFault"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureLock">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureLock"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureUsing">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureUsing"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureFixed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFixed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureSwitch">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureSwitch"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureCase">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureCase"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureLocalFunction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureLocalFunction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureOther">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureOther"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureXml">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureXml"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.BlockStructureXaml">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureXaml"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CompletionMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CompletionMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.CompletionSuffix">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CompletionSuffix"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SignatureHelpDocumentation">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpDocumentation"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SignatureHelpCurrentParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpCurrentParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SignatureHelpParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.SignatureHelpParameterDocumentation">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpParameterDocumentation"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.Url">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Url"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexPeDosHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeDosHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexPeFileHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeFileHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexPeOptionalHeader32">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeOptionalHeader32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexPeOptionalHeader64">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeOptionalHeader64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexPeSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexPeSectionName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeSectionName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexCor20Header">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCor20Header"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexStorageSignature">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageSignature"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexStorageHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexStorageStream">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageStream"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexStorageStreamName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageStreamName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexStorageStreamNameInvalid">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageStreamNameInvalid"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexTablesStream">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexTablesStream"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexTableName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexTableName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.DocumentListMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DocumentListMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.GacMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.GacMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.AppSettingsTreeViewNodeMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AppSettingsTreeViewNodeMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.AppSettingsTextMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AppSettingsTextMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexCurrentLine">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentLine"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexCurrentLineNoFocus">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentLineNoFocus"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexInactiveSelectedText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexInactiveSelectedText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexColumnLine0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLine0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexColumnLine1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLine1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexColumnLineGroup0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLineGroup0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexColumnLineGroup1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLineGroup1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexHighlightedValuesColumn">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexHighlightedValuesColumn"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexHighlightedAsciiColumn">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexHighlightedAsciiColumn"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexGlyphMargin">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexGlyphMargin"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexCurrentValueCell">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentValueCell"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexCurrentAsciiCell">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentAsciiCell"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.OutputWindowText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.OutputWindowText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexFindMatchHighlightMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexFindMatchHighlightMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexToolTipServiceField0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexToolTipServiceField0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexToolTipServiceField1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexToolTipServiceField1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNameKeys.HexToolTipServiceCurrentField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexToolTipServiceCurrentField"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames">
            <summary>
            Classification type names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Text">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Text"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Operator">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Operator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Punctuation">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Punctuation"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Number">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Number"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Comment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Comment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Keyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Keyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.String">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.String"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.VerbatimString">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.VerbatimString"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Char">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Char"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Namespace">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Namespace"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Type">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Type"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SealedType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SealedType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.StaticType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Delegate">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Delegate"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Enum">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Enum"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Interface">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Interface"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ValueType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ValueType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Module">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Module"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.TypeGenericParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.TypeGenericParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.MethodGenericParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.MethodGenericParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InstanceMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.StaticMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ExtensionMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ExtensionMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InstanceField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.EnumField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.EnumField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.LiteralField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.LiteralField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.StaticField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticField"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InstanceEvent">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceEvent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.StaticEvent">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticEvent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InstanceProperty">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InstanceProperty"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.StaticProperty">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.StaticProperty"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Local">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Local"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Parameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Parameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.PreprocessorKeyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.PreprocessorKeyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.PreprocessorText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.PreprocessorText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Label">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Label"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.OpCode">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.OpCode"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ILDirective">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ILDirective"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ILModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ILModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ExcludedCode">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ExcludedCode"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentAttributeName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentAttributeName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentEntityReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentEntityReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocCommentText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocCommentText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralAttributeName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralAttributeName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralEmbeddedExpression">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralEmbeddedExpression"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralEntityReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralEntityReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlLiteralText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlLiteralText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlAttribute">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlAttribute"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlKeyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlKeyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlAttribute">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlAttribute"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlAttributeQuotes">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlAttributeQuotes"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlAttributeValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlAttributeValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlCDataSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlCDataSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlComment">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlComment"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlDelimiter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlDelimiter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlKeyword">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlKeyword"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlMarkupExtensionClass">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlMarkupExtensionClass"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlMarkupExtensionParameterName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlMarkupExtensionParameterName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlMarkupExtensionParameterValue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlMarkupExtensionParameterValue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlProcessingInstruction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlProcessingInstruction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XamlText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XamlText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.XmlDocToolTipHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.XmlDocToolTipHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Assembly">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Assembly"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.AssemblyExe">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AssemblyExe"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.AssemblyModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AssemblyModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DirectoryPart">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DirectoryPart"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.FileNameNoExtension">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.FileNameNoExtension"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.FileExtension">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.FileExtension"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Error">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Error"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ToStringEval">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ToStringEval"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplPrompt1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplPrompt1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplPrompt2">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplPrompt2"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplOutputText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplOutputText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplScriptOutputText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplScriptOutputText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Black">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Black"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Blue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Blue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Cyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Cyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkBlue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkBlue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkCyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkCyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkGray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkGray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkGreen">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkGreen"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkMagenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkMagenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkRed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkRed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DarkYellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DarkYellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Gray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Gray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Green">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Green"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Magenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Magenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Red">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Red"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.White">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.White"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Yellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Yellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvBlack">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvBlack"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvBlue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvBlue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvCyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvCyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkBlue">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkBlue"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkCyan">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkCyan"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkGray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkGray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkGreen">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkGreen"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkMagenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkMagenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkRed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkRed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvDarkYellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvDarkYellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvGray">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvGray"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvGreen">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvGreen"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvMagenta">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvMagenta"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvRed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvRed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvWhite">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvWhite"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InvYellow">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InvYellow"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogExceptionHandled">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExceptionHandled"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogExceptionUnhandled">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExceptionUnhandled"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogStepFiltering">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogStepFiltering"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogLoadModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogLoadModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogUnloadModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogUnloadModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogExitProcess">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExitProcess"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogExitThread">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogExitThread"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogProgramOutput">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogProgramOutput"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogMDA">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogMDA"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DebugLogTimestamp">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DebugLogTimestamp"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.LineNumber">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.LineNumber"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplLineNumberInput1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplLineNumberInput1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplLineNumberInput2">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplLineNumberInput2"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ReplLineNumberOutput">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ReplLineNumberOutput"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.VisibleWhitespace">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.VisibleWhitespace"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SelectedText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SelectedText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.InactiveSelectedText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.InactiveSelectedText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HighlightedReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HighlightedReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HighlightedWrittenReference">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HighlightedWrittenReference"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HighlightedDefinition">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HighlightedDefinition"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CurrentStatement">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentStatement"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CurrentStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CallReturn">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CallReturn"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CallReturnMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CallReturnMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.ActiveStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.ActiveStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BreakpointStatement">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BreakpointStatement"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BreakpointStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BreakpointStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SelectedBreakpointStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SelectedBreakpointStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DisabledBreakpointStatementMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DisabledBreakpointStatementMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CurrentLine">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentLine"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CurrentLineNoFocus">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CurrentLineNoFocus"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexOffset">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexOffset"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexByte0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexByte0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexByte1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexByte1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexByteError">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexByteError"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexAscii">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexAscii"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexCaret">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCaret"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexInactiveCaret">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexInactiveCaret"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexSelection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexSelection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.GlyphMargin">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.GlyphMargin"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BraceMatching">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BraceMatching"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.LineSeparator">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.LineSeparator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.FindMatchHighlightMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.FindMatchHighlightMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureNamespace">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureNamespace"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureModule">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureModule"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureValueType">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureValueType"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureInterface">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureInterface"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureAccessor">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureAccessor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureAnonymousMethod">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureAnonymousMethod"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureConstructor">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureConstructor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureDestructor">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureDestructor"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureOperator">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureOperator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureConditional">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureConditional"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureLoop">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureLoop"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureProperty">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureProperty"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureEvent">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureEvent"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureTry">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureTry"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureCatch">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureCatch"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureFilter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFilter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureFinally">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFinally"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureFault">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFault"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureLock">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureLock"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureUsing">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureUsing"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureFixed">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureFixed"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureSwitch">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureSwitch"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureCase">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureCase"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureLocalFunction">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureLocalFunction"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureOther">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureOther"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureXml">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureXml"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.BlockStructureXaml">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.BlockStructureXaml"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CompletionMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CompletionMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.CompletionSuffix">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.CompletionSuffix"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SignatureHelpDocumentation">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpDocumentation"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SignatureHelpCurrentParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpCurrentParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SignatureHelpParameter">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpParameter"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.SignatureHelpParameterDocumentation">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.SignatureHelpParameterDocumentation"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.Url">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.Url"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexPeDosHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeDosHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexPeFileHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeFileHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexPeOptionalHeader32">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeOptionalHeader32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexPeOptionalHeader64">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeOptionalHeader64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexPeSection">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeSection"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexPeSectionName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexPeSectionName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexCor20Header">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCor20Header"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexStorageSignature">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageSignature"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexStorageHeader">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageHeader"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexStorageStream">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageStream"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexStorageStreamName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageStreamName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexStorageStreamNameInvalid">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexStorageStreamNameInvalid"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexTablesStream">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexTablesStream"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexTableName">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexTableName"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.DocumentListMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.DocumentListMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.GacMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.GacMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.AppSettingsTreeViewNodeMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AppSettingsTreeViewNodeMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.AppSettingsTextMatchHighlight">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.AppSettingsTextMatchHighlight"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexCurrentLine">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentLine"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexCurrentLineNoFocus">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentLineNoFocus"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexInactiveSelectedText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexInactiveSelectedText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexColumnLine0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLine0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexColumnLine1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLine1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexColumnLineGroup0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLineGroup0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexColumnLineGroup1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexColumnLineGroup1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexHighlightedValuesColumn">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexHighlightedValuesColumn"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexHighlightedAsciiColumn">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexHighlightedAsciiColumn"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexGlyphMargin">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexGlyphMargin"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexCurrentValueCell">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentValueCell"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexCurrentAsciiCell">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexCurrentAsciiCell"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.OutputWindowText">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.OutputWindowText"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexFindMatchHighlightMarker">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexFindMatchHighlightMarker"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexToolTipServiceField0">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexToolTipServiceField0"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexToolTipServiceField1">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexToolTipServiceField1"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Classification.ThemeClassificationTypeNames.HexToolTipServiceCurrentField">
            <summary>
            <see cref="F:dnSpy.Contracts.Text.TextColor.HexToolTipServiceCurrentField"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Classification.ThemeMarkerFormatDefinition">
            <summary>
            Theme marker definition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ThemeMarkerFormatDefinition.#ctor(dnSpy.Contracts.Text.TextColor)">
            <summary>
            Constructor
            </summary>
            <param name="textColor">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Classification.ThemeMarkerFormatDefinition.CreateResourceDictionary(dnSpy.Contracts.Themes.ITheme)">
            <summary>
            Creates a new <see cref="T:System.Windows.ResourceDictionary"/>
            </summary>
            <param name="theme">Theme</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.ColorAndText">
            <summary>
            Colorized text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.ColorAndText.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.ColorAndText.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.ColorAndText.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.ColorAndText.#ctor(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.ContentTypes">
            <summary>
            Content types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Inert">
            <summary>
            Inert content
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.PlainText">
            <summary>
            Plain text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Xaml">
            <summary>
            XAML
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Baml">
            <summary>
            Disassembled BAML
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.BamlDnSpy">
            <summary>
            Disassembled BAML (dnSpy BAML extension)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Intellisense">
            <summary>
            Intellisense
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.SignatureHelp">
            <summary>
            Signature help
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CSharp">
            <summary>
            C# code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.VisualBasic">
            <summary>
            Visual Basic code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.IL">
            <summary>
            IL code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.RoslynCode">
            <summary>
            Roslyn (C# / Visual Basic) code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CSharpRoslyn">
            <summary>
            C# (Roslyn)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.VisualBasicRoslyn">
            <summary>
            Visual Basic (Roslyn)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.DecompiledCode">
            <summary>
            Decompiled code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Repl">
            <summary>
            REPL
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.ReplRoslyn">
            <summary>
            REPL (Roslyn)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.ReplCSharpRoslyn">
            <summary>
            REPL C# (Roslyn)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.ReplVisualBasicRoslyn">
            <summary>
            REPL Visual Basic (Roslyn)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Output">
            <summary>
            Output window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.OutputDebug">
            <summary>
            Output window: Debug
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.AboutDnSpy">
            <summary>
            About dnSpy
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CompletionItemText">
            <summary>
            Completion item text, base type of <see cref="F:dnSpy.Contracts.Text.ContentTypes.CompletionDisplayText"/> and <see cref="F:dnSpy.Contracts.Text.ContentTypes.CompletionSuffix"/>
            but not <see cref="F:dnSpy.Contracts.Text.ContentTypes.CompletionToolTip"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CompletionDisplayText">
            <summary>
            Completion item's display text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CompletionSuffix">
            <summary>
            Completion item's suffix
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CompletionToolTip">
            <summary>
            Completion item's tooltip
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.Search">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.TabsDialog">
            <summary>
            Tabs dialog box
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.GacDialog">
            <summary>
            GAC dialog box
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.DocListDialog">
            <summary>
            Documents list dialog box
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.BreakpointsWindow">
            <summary>
            Breakpoints window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.CallStackWindow">
            <summary>
            Call Stack window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.AttachToProcessWindow">
            <summary>
            Attach to Process window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.ExceptionSettingsWindow">
            <summary>
            Exception Settings window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.LocalsWindow">
            <summary>
            Locals window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.ModulesWindow">
            <summary>
            Modules window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.ThreadsWindow">
            <summary>
            Threads window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.MethodBodyEditor">
            <summary>
            Method body editor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.OptionsDialogText">
            <summary>
            Options dialog text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.HexToolTip">
            <summary>
            Hex tooltip
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.ContentTypes.DefaultHexToolTip">
            <summary>
            Default hex tooltip content type
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.ContentTypesHelper.TryGetContentTypeStringByExtension(System.String)">
            <summary>
            Returns a content type or null if it's unknown
            </summary>
            <param name="extension">File extension, with or without the period</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.BlockStructureData">
            <summary>
            Data consumed by <see cref="T:dnSpy.Contracts.Text.Editor.IBlockStructureService"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.BlockStructureData.Top">
            <summary>
            Span of start block
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.BlockStructureData.Bottom">
            <summary>
            Span of end block
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.BlockStructureData.BlockKind">
            <summary>
            Block kind
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.BlockStructureData.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan,dnSpy.Contracts.Text.Editor.BlockStructureKind)">
            <summary>
            Constructor
            </summary>
            <param name="blockTop">Start block span</param>
            <param name="blockBottom">End block span</param>
            <param name="blockKind">Block kind</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.BlockStructureKind">
            <summary>
            Block kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.None">
            <summary>
            Not a block
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Type">
            <summary>
            Reference type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.ValueType">
            <summary>
            Value type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Interface">
            <summary>
            Interface
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Accessor">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.AnonymousMethod">
            <summary>
            Anonymous method
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Constructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Destructor">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Conditional">
            <summary>
            Conditional
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Loop">
            <summary>
            Loop
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Try">
            <summary>
            Try
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Catch">
            <summary>
            Catch
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Filter">
            <summary>
            Catch filter
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Finally">
            <summary>
            Finally
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Fault">
            <summary>
            Fault
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Lock">
            <summary>
            Lock
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Using">
            <summary>
            Using
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Switch">
            <summary>
            Switch
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Case">
            <summary>
            Case
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.LocalFunction">
            <summary>
            Local function
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Other">
            <summary>
            Other block kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Xml">
            <summary>
            XML block
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureKind.Xaml">
            <summary>
            XAML block
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.BlockStructureLineKind">
            <summary>
            Block structure line kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureLineKind.Solid">
            <summary>
            Solid lines
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureLineKind.Dashed_1_1">
            <summary>
            Dashed lines (dash 1px, gap 1px)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureLineKind.Dashed_2_2">
            <summary>
            Dashed lines (dash 2px, gap 2px)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureLineKind.Dashed_3_3">
            <summary>
            Dashed lines (dash 3px, gap 3px)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.BlockStructureLineKind.Dashed_4_4">
            <summary>
            Dashed lines (dash 4px, gap 4px)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.CodeEditorOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.CodeEditorOptions.TextBuffer">
            <summary>
            Text buffer to use or null. Use <see cref="T:Microsoft.VisualStudio.Text.ITextBufferFactoryService"/> to create an instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.CodeEditorOptions.Roles">
            <summary>
            All <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> roles
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CodeEditorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CodeEditorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.CommonTextEditorOptions">
            <summary>
            Common text editor options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.CommonTextEditorOptions.ContentType">
            <summary>
            Content type or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.CommonTextEditorOptions.ContentTypeString">
            <summary>
            Content type string or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CommonTextEditorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CommonTextEditorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CommonTextEditorOptions.CopyTo(dnSpy.Contracts.Text.Editor.CommonTextEditorOptions)">
            <summary>
            Copy this to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.DefaultDsOptions">
            <summary>
            Default options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.DefaultDsTextViewOptions">
            <summary>
            Default <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.DefaultDsWpfViewOptions">
            <summary>
            Default <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.DefaultReplEditorOptions">
            <summary>
            Default <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> Z-indexes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.Bookmark">
            <summary>
            Z-index of bookmarks
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.DisabledBreakpoint">
            <summary>
            (Debugger) Z-index of disabled breakpoints
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.EnabledBreakpoint">
            <summary>
            (Debugger) Z-index of enabled breakpoints
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.CurrentStatement">
            <summary>
            (Debugger) Z-index of current statement
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.ReturnStatement">
            <summary>
            (Debugger) Z-index of return statement
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IBlockStructureService">
            <summary>
            Block structure service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IBlockStructureService.SetDataProvider(dnSpy.Contracts.Text.Editor.IBlockStructureServiceDataProvider)">
            <summary>
            Sets the new data provider
            </summary>
            <param name="dataProvider">New data provider or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IBlockStructureServiceDataProvider">
            <summary>
            Provides data to a <see cref="T:dnSpy.Contracts.Text.Editor.IBlockStructureService"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IBlockStructureServiceDataProvider.GetData(Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.List{dnSpy.Contracts.Text.Editor.BlockStructureData})">
            <summary>
            Gets data for a line
            </summary>
            <param name="lineExtent">Line extent</param>
            <param name="list">Filled with the result</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IBlockStructureServiceProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.IBlockStructureService"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IBlockStructureServiceProvider.GetService(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Returns the cached <see cref="T:dnSpy.Contracts.Text.Editor.IBlockStructureService"/> instance
            </summary>
            <param name="wpfTextView">Text view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ICodeEditor">
            <summary>
            Code text editor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ICodeEditor.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ICodeEditor.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ICodeEditor.TextViewHost">
            <summary>
            Gets the text view host
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ICodeEditorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICodeEditorProvider.Create(dnSpy.Contracts.Text.Editor.CodeEditorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/> instance
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.CustomLineNumberMargin">
            <summary>
            Custom line number margin. The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> must have the
            <see cref="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CustomLineNumberMargin"/> role and
            you must call <see cref="M:dnSpy.Contracts.Text.Editor.CustomLineNumberMargin.SetOwner(Microsoft.VisualStudio.Text.Editor.ITextView,dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner)"/>.
            Option <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineNumberMarginId"/> is used
            to show or hide it after creation.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CustomLineNumberMargin.GetMargin(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the custom line number margin
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.CustomLineNumberMargin.SetOwner(Microsoft.VisualStudio.Text.Editor.ITextView,dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner)">
            <summary>
            Sets the owner and must only be called once
            </summary>
            <param name="textView">Text view</param>
            <param name="owner">Owner</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ICustomLineNumberMargin">
            <summary>
            Custom line number margin
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMargin.SetOwner(dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner)">
            <summary>
            Sets the owner and must only be called once
            </summary>
            <param name="owner">Owner</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner">
            <summary>
            Custom line number margin owner
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.GetMaxLineNumberDigits">
            <summary>
            Gets maximum number of digits in a line number or null to use the default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.GetLineNumber(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Object@)">
            <summary>
            Gets the line number or null to not print any line number. You should normally return null if
            <paramref name="viewLine"/>'s <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsFirstTextViewLineForSnapshotLine"/> is false.
            </summary>
            <param name="viewLine">View line</param>
            <param name="snapshotLine">Snapshot line</param>
            <param name="state">State, initially null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.GetLineNumberTextFormattingRunProperties(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32,System.Object)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties"/> for the line number text
            </summary>
            <param name="viewLine">View line</param>
            <param name="snapshotLine">Snapshot line</param>
            <param name="lineNumber">Line number returned by <see cref="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.GetLineNumber(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Object@)"/></param>
            <param name="state">State, initialized by <see cref="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.GetLineNumber(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Object@)"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.GetDefaultTextFormattingRunProperties">
            <summary>
            Gets the default text formatting properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.OnTextPropertiesChanged(Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
            <summary>
            Gets called when text formatting properties have changed
            </summary>
            <param name="classificationFormatMap">Classification format map</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.OnVisible">
            <summary>
            Called when the margin is visible
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ICustomLineNumberMarginOwner.OnInvisible">
            <summary>
            Called when the margin is hidden and when the margin gets disposed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService">
            <summary>
            dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService"/> interface
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextView(dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView"/> instance with content type text
            </summary>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView"/> instance using <paramref name="textBuffer"/>
            </summary>
            <param name="textBuffer">Text buffer</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView"/> instance using <paramref name="textBuffer"/>
            </summary>
            <param name="textBuffer">Text buffer</param>
            <param name="roles">Roles</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions,dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView"/> instance using <paramref name="textBuffer"/>
            </summary>
            <param name="textBuffer">Text buffer</param>
            <param name="roles">Roles</param>
            <param name="parentOptions">Parent options</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions,dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView"/> instance using <paramref name="dataModel"/>
            </summary>
            <param name="dataModel">Data model</param>
            <param name="roles">Roles</param>
            <param name="parentOptions">Parent options</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.Editor.ITextViewModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions,dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView"/> instance using <paramref name="viewModel"/>
            </summary>
            <param name="viewModel">View model</param>
            <param name="roles">Roles</param>
            <param name="parentOptions">Parent options</param>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsTextEditorFactoryService.CreateTextViewHost(dnSpy.Contracts.Text.Editor.IDsWpfTextView,System.Boolean)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IDsWpfTextViewHost"/> instance
            </summary>
            <param name="wpfTextView">Text view</param>
            <param name="setFocus">true to set focus</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IDsTextView">
            <summary>
            dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IDsTextViewLine">
            <summary>
            dnSpy <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IDsTextViewLine.HasAdornments">
            <summary>
            true if there's at least one adornment
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IDsWpfTextView">
            <summary>
            dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IDsWpfTextView.InvalidateClassifications(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Invalidates classifications
            </summary>
            <param name="span">Span to invalidate</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IDsWpfTextViewHost">
            <summary>
            dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IDsWpfTextViewHost.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler">
            <summary>
            Handles <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarker"/> events
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler.MouseProcessor">
            <summary>
            Gets the mouse processor or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler.GetContextMenuObjects(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Point)">
            <summary>
            Creates context menu objects
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="marginRelativePoint">Position of the mouse pointer relative to the glyph margin</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler.GetToolTipContent(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker)">
            <summary>
            Gets the tool tip content or null if the next handler should be checked
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler.GetPopupContent(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker)">
            <summary>
            Gets the popup content or null if the next handler should be checked. The popup content is
            shown above the line (eg. breakpoint toolbar settings popup)
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerToolTip">
            <summary>
            Contains the tooltip content and style that is shown when hovering over the glyph in the glyph margin
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerToolTip.Content">
            <summary>
            Tooltip content, a <see cref="T:System.String"/> or a UI element
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerToolTip.Style">
            <summary>
            Tooltip style or null. Can be the key of a style in the resources (eg. a <see cref="T:System.String"/>) or a <see cref="T:System.Windows.Style"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerToolTip.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="content">Text content to show in the tooltip</param>
            <param name="style">Tooltip style or null. Can be the key of a style in the resources (eg. a <see cref="T:System.String"/>) or a <see cref="T:System.Windows.Style"/> instance</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerToolTip.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="content">Content to show in the tooltip</param>
            <param name="style">Tooltip style or null. Can be the key of a style in the resources (eg. a <see cref="T:System.String"/>) or a <see cref="T:System.Windows.Style"/> instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext.Margin">
            <summary>
            Gets the glyph margin
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext.Host">
            <summary>
            Gets the text view host
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext.Line">
            <summary>
            Gets the line
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler"/> mouse processor (see also <see cref="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse down handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse up handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseLeftButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button down handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseLeftButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button up handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseRightButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse right button down handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseRightButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse right button up handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor.OnMouseMove(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse move handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase">
            <summary>
            Abstract class implementing <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerMouseProcessor"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse down handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse up handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseLeftButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse left button down handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseLeftButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse left button up handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseRightButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse right button down handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseRightButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse right button up handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerHandlerMouseProcessorBase.OnMouseMove(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandlerContext,dnSpy.Contracts.Text.Editor.IGlyphTextMarker,System.Windows.Input.MouseEventArgs)">
            <summary>
            Default mouse move handler
            </summary>
            <param name="context">Context</param>
            <param name="marker">Marker</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor"/>s. You must <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>
            this interface with a <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute"/>. Optional attributes: <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute"/>,
            <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorProvider.GetAssociatedMouseProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor"/> or returns null
            </summary>
            <param name="wpfTextViewHost">Text view host</param>
            <param name="margin">Margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext.Margin">
            <summary>
            Gets the glyph margin
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext.Host">
            <summary>
            Gets the text view host
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext.Line">
            <summary>
            Gets the line
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext.Markers">
            <summary>
            Sorted markers shown in the glyph margin. The first marker is the top most marker.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarker"/> mouse processor (see also <see cref="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.GetContextMenuObjects(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Point)">
            <summary>
            Creates context menu objects
            </summary>
            <param name="context">Context</param>
            <param name="marginRelativePoint">Position of the mouse pointer relative to the glyph margin</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse down handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse up handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseLeftButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button down handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseLeftButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse left button up handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseRightButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse right button down handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseRightButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse right button up handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseMove(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse move handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseEnter(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse enter handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor.OnMouseLeave(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse leave handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase">
            <summary>
            Abstract class implementing <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessor"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.GetContextMenuObjects(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Point)">
            <summary>
            Creates context menu objects
            </summary>
            <param name="context">Context</param>
            <param name="marginRelativePoint">Position of the mouse pointer relative to the glyph margin</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse down handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse up handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseLeftButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse left button down handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseLeftButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse left button up handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseRightButtonDown(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse right button down handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseRightButtonUp(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Default mouse right button up handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseMove(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseEventArgs)">
            <summary>
            Default mouse move handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseEnter(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseEventArgs)">
            <summary>
            Default mouse enter handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerMouseProcessorBase.OnMouseLeave(dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorContext,System.Windows.Input.MouseEventArgs)">
            <summary>
            Default mouse leave handler
            </summary>
            <param name="context">Context</param>
            <param name="e">Mouse event args</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService">
            <summary>
            Marks text and shows a glyph in the glyph margin
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService.SetMethodOffsetSpanMap(Microsoft.VisualStudio.Text.Editor.ITextView,dnSpy.Contracts.Text.Editor.IMethodOffsetSpanMap)">
            <summary>
            Should be called whenever <paramref name="textView"/> gets a new <see cref="T:dnSpy.Contracts.Text.Editor.IMethodOffsetSpanMap"/>
            </summary>
            <param name="textView">Text view</param>
            <param name="map">New map or null if none</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService.AddMarker(dnlib.DotNet.MethodDef,System.UInt32,System.Nullable{dnSpy.Contracts.Images.ImageReference},System.String,System.String,Microsoft.VisualStudio.Text.Classification.IClassificationType,System.Int32,System.Object,dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler,System.Func{Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean})">
            <summary>
            Adds a marker
            </summary>
            <param name="method">Method</param>
            <param name="ilOffset">Method offset</param>
            <param name="glyphImage">Image shown in the glyph margin or null if none</param>
            <param name="markerTypeName">Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> (or an <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>) or null. It should have a background color and an optional foreground color for the border</param>
            <param name="selectedMarkerTypeName">Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> or null. It's used whenever the caret is inside the text marker.</param>
            <param name="classificationType">Classification type or null. Only the foreground color is needed. If it has a background color, it will hide the text markers shown in the text marker layer (eg. search result, highlighted reference)</param>
            <param name="zIndex">Z-index of <paramref name="glyphImage"/> and <paramref name="markerTypeName"/>, eg. <see cref="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.EnabledBreakpoint"/></param>
            <param name="tag">User data</param>
            <param name="handler">Glyph handler or null</param>
            <param name="textViewFilter">Filters out non-supported text views</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService.AddMarker(dnSpy.Contracts.Metadata.ModuleTokenId,System.UInt32,System.Nullable{dnSpy.Contracts.Images.ImageReference},System.String,System.String,Microsoft.VisualStudio.Text.Classification.IClassificationType,System.Int32,System.Object,dnSpy.Contracts.Text.Editor.IGlyphTextMarkerHandler,System.Func{Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean})">
            <summary>
            Adds a marker
            </summary>
            <param name="tokenId">Method token</param>
            <param name="ilOffset">Method offset</param>
            <param name="glyphImage">Image shown in the glyph margin or null if none</param>
            <param name="markerTypeName">Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> (or an <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>) or null. It should have a background color and an optional foreground color for the border</param>
            <param name="selectedMarkerTypeName">Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> or null. It's used whenever the caret is inside the text marker.</param>
            <param name="classificationType">Classification type or null. Only the foreground color is needed. If it has a background color, it will hide the text markers shown in the text marker layer (eg. search result, highlighted reference)</param>
            <param name="zIndex">Z-index of <paramref name="glyphImage"/> and <paramref name="markerTypeName"/>, eg. <see cref="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.EnabledBreakpoint"/></param>
            <param name="tag">User data</param>
            <param name="handler">Glyph handler or null</param>
            <param name="textViewFilter">Filters out non-supported text views</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService.Remove(dnSpy.Contracts.Text.Editor.IGlyphTextMarker)">
            <summary>
            Removes a marker
            </summary>
            <param name="marker">Marker to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService.Remove(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Text.Editor.IGlyphTextMarker})">
            <summary>
            Removes markers
            </summary>
            <param name="markers">Markers to remove</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarker">
            <summary>
            A marker created by <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.GlyphImageReference">
            <summary>
            Gets the image reference shown in the glyph margin or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.MarkerTypeName">
            <summary>
            Gets the name of the marker format definition or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.SelectedMarkerTypeName">
            <summary>
            Gets the name of the marker format definition to use whenever the caret is inside the span; it can be null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ClassificationType">
            <summary>
            Gets the classification type or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex">
            <summary>
            Gets the z-index of <see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.GlyphImageReference"/> and <see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.MarkerTypeName"/>, eg. <see cref="F:dnSpy.Contracts.Text.Editor.GlyphTextMarkerServiceZIndexes.EnabledBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.Tag">
            <summary>
            Gets the user data
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMethodMarker">
            <summary>
            A method marker created by <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMethodMarker.Method">
            <summary>
            Gets the method token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMethodMarker.ILOffset">
            <summary>
            Gets the IL offset
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IMethodOffsetSpanMap">
            <summary>
            Converts method IL offsets to <see cref="T:Microsoft.VisualStudio.Text.Span"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IMethodOffsetSpanMap.ToSpan(dnSpy.Contracts.Metadata.ModuleTokenId,System.UInt32)">
            <summary>
            Converts a method offset to a <see cref="T:Microsoft.VisualStudio.Text.Span"/> or returns null if the IL offset isn't present in the document
            </summary>
            <param name="method">Method token</param>
            <param name="ilOffset">IL offset</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerTag">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> text marker tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerTag.MarkerTypeName">
            <summary>
            Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> (or an <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>) (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.MarkerTypeName"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerTag.SelectedMarkerTypeName">
            <summary>
            Gets the name of the marker format definition to use whenever the caret is inside the span; it can be null (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.SelectedMarkerTypeName"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerTag.ZIndex">
            <summary>
            Gets the Z-index (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerTag">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> text marker tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerTag.MarkerTypeName">
            <summary>
            Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> (or an <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>) (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.MarkerTypeName"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerTag.SelectedMarkerTypeName">
            <summary>
            Gets the name of the marker format definition to use whenever the caret is inside the span; it can be null (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.SelectedMarkerTypeName"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerTag.ZIndex">
            <summary>
            Gets the Z-index (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerTag.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="markerTypeName">Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> (or an <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>) (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.MarkerTypeName"/>)</param>
            <param name="selectedMarkerTypeName">Name of a <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition"/> (or an <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition"/>) (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.SelectedMarkerTypeName"/>)</param>
            <param name="zIndex">Z-index of this text marker (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex"/>)</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerGlyphTag">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> glyph tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerGlyphTag.ImageReference">
            <summary>
            Gets the image reference (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.GlyphImageReference"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerGlyphTag.ZIndex">
            <summary>
            Gets the Z-index (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerGlyphTag">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> glyph tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerGlyphTag.ImageReference">
            <summary>
            Image reference (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.GlyphImageReference"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.GlyphTextMarkerGlyphTag.ZIndex">
            <summary>
            Z-index (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.GlyphTextMarkerGlyphTag.#ctor(dnSpy.Contracts.Images.ImageReference,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="imageReference">Image reference (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.GlyphImageReference"/>)</param>
            <param name="zIndex">Z-index (<see cref="P:dnSpy.Contracts.Text.Editor.IGlyphTextMarker.ZIndex"/>)</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ILineSeparatorTag">
            <summary>
            Line separator tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ILineSeparatorTag.IsPhysicalLine">
            <summary>
            true to put the line separator after the real line
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.LineSeparatorTag">
            <summary>
            Line separator tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.LineSeparatorTag.IsPhysicalLine">
            <summary>
            true to put the line separator after the real line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.LineSeparatorTag.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isPhysicalLine">true to put the line separator after the real line</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ILogEditor">
            <summary>
            A text control that allows appending text. Writing text is thread safe.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ILogEditor.ShowLineNumbers">
            <summary>
            true to show line numbers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ILogEditor.WordWrapStyle">
            <summary>
            Enables/disables word wrapping
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.Write(System.String,System.Object)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.Write(System.String,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.WriteLine(System.String,System.Object)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.WriteLine(System.String,dnSpy.Contracts.Text.TextColor)">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.Write(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Text.ColorAndText})">
            <summary>
            Writes text
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.Clear">
            <summary>
            Clears all text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditor.GetText">
            <summary>
            Gets all text
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ILogEditor.TextView">
            <summary>
            Gets the text view. It's not thread safe.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ILogEditor.TextViewHost">
            <summary>
            Gets the text view host. It's not thread safe.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ILogEditorProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ILogEditorProvider.Create(dnSpy.Contracts.Text.Editor.LogEditorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/> instance
            </summary>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandlerProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandler"/>s or returns null. You must <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>
            this interface and add a <see cref="T:dnSpy.Contracts.Text.Editor.MarginNameAttribute"/> with the name of the margin (eg.
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph"/>). Optional attribute: <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute"/>.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandlerProvider.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandler"/>s or returns null
            </summary>
            <param name="wpfTextViewHost">Text view host</param>
            <param name="margin">Margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandler">
            <summary>
            Creates context menu objects
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandler.GetContextMenuObjects(System.Windows.Point)">
            <summary>
            Creates context menu objects
            </summary>
            <param name="marginRelativePoint">Position of the mouse pointer relative to the glyph margin</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IMarginContextMenuService">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsProvider"/> that uses <see cref="T:dnSpy.Contracts.Text.Editor.IMarginContextMenuHandler"/>s
            to create objects.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IMarginContextMenuService.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin,System.String)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Menus.IGuidObjectsProvider"/>
            </summary>
            <param name="wpfTextViewHost">Text view host</param>
            <param name="margin">Margin</param>
            <param name="marginName">Margin name</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IndentStyle">
            <summary>
            Indent style
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.IndentStyle.None">
            <summary>
            No indentation, always move caret to column 0
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.IndentStyle.Block">
            <summary>
            Block, use same indentation as the previous line (or first non-empty line)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.IndentStyle.Smart">
            <summary>
            Use the language service to find the correct indentation
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IReplaceListener">
            <summary>
            Can cancel replaces (without having to create read-only regions)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplaceListener.CanReplace(Microsoft.VisualStudio.Text.SnapshotSpan,System.String)">
            <summary>
            Returns true if <paramref name="span"/> can be modified and replaced with new content
            </summary>
            <param name="span">Span to be replaced if all <see cref="T:dnSpy.Contracts.Text.Editor.IReplaceListener"/>s return true.
            This is the latest textview snapshot (<see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot"/>)</param>
            <param name="newText">New text</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IReplaceListenerProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.IReplaceListener"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplaceListenerProvider.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Editor.IReplaceListener"/> or returns null
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IReplCommandHandler">
            <summary>
            Gets notified by a <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplCommandHandler.IsCommand(System.String)">
            <summary>
            Called by <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> after enter has been pressed. Returns true if
            <paramref name="input"/> is a command. If false is returned, the user can enter more
            text.
            </summary>
            <param name="input">Current user input</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplCommandHandler.ExecuteCommand(System.String)">
            <summary>
            Called after <see cref="M:dnSpy.Contracts.Text.Editor.IReplCommandHandler.IsCommand(System.String)"/> has returned true
            </summary>
            <param name="input">User input</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplCommandHandler.OnNewCommand">
            <summary>
            Called when a new command can be entered by the user
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplCommandHandler.OnCommandUpdatedAsync(dnSpy.Contracts.Text.Editor.IReplCommandInput,System.Threading.CancellationToken)">
            <summary>
            Called when the command gets modified by the user. Can be used to colorize the output.
            </summary>
            <param name="command">Current command</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IReplCommandInput">
            <summary>
            REPL command input
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplCommandInput.Input">
            <summary>
            Gets the current input
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplCommandInput.AddClassification(System.Int32,System.Int32,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Adds classification info
            </summary>
            <param name="offset">Offset of text</param>
            <param name="length">Length</param>
            <param name="classificationType">Classification type</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IReplEditor">
            <summary>
            A REPL (Read, Eval, Print, Loop) editor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CanClearScreen">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Editor.IReplEditor.ClearScreen"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.ClearScreen">
            <summary>
            Clears the screen
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CanSaveText">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Editor.IReplEditor.SaveText(System.String,System.String,System.String)"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.SaveText(System.String,System.String,System.String)">
            <summary>
            Saves the text
            </summary>
            <param name="filenameNoExtension">Suggested filename without the file extension</param>
            <param name="fileExtension">File extension</param>
            <param name="filesFilter">File filter passed to <c>SaveFileDialog</c></param>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CanSaveCode">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Editor.IReplEditor.SaveCode(System.String,System.String,System.String)"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.SaveCode(System.String,System.String,System.String)">
            <summary>
            Saves the code
            </summary>
            <param name="filenameNoExtension">Suggested filename without the file extension</param>
            <param name="fileExtension">File extension</param>
            <param name="filesFilter">File filter passed to <c>SaveFileDialog</c></param>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CanCopyCode">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Editor.IReplEditor.CopyCode"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.CopyCode">
            <summary>
            Copies the selected code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CanSelectPreviousCommand">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Editor.IReplEditor.SelectPreviousCommand"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.SelectPreviousCommand">
            <summary>
            Selects the previous command
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CanSelectNextCommand">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Editor.IReplEditor.SelectNextCommand"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.SelectNextCommand">
            <summary>
            Selects the next command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.GetCode">
            <summary>
            Gets all code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.OutputPrint(System.String,System.Object,System.Boolean)">
            <summary>
            Adds script output. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
            <param name="startOnNewLine">true to print the text on a new line</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.OutputPrint(System.String,dnSpy.Contracts.Text.TextColor,System.Boolean)">
            <summary>
            Adds script output. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
            <param name="startOnNewLine">true to print the text on a new line</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.OutputPrintLine(System.String,System.Object,System.Boolean)">
            <summary>
            Adds script output and a new line. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
            <param name="startOnNewLine">true to print the text on a new line</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.OutputPrintLine(System.String,dnSpy.Contracts.Text.TextColor,System.Boolean)">
            <summary>
            Adds script output and a new line. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
            <param name="color">Color</param>
            <param name="startOnNewLine">true to print the text on a new line</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.OutputPrint(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Text.ColorAndText})">
            <summary>
            Adds script output. This method can be called from any thread
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.CommandHandler">
            <summary>
            Gets notified by this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.OnCommandExecuted">
            <summary>
            Called by <see cref="P:dnSpy.Contracts.Text.Editor.IReplEditor.CommandHandler"/> after the command has finished executing
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditor.Reset">
            <summary>
            Resets the state to original executing state, but doesn't reset history or clears the screen
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.ReplEditorOperations">
            <summary>
            Gets the REPL editor operations
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IReplEditor.TextViewHost">
            <summary>
            Gets the text view host
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IReplEditorProvider">
            <summary>
            Creates REPL (Read, Eval, Print, Loop) text editors
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IReplEditorProvider.Create(dnSpy.Contracts.Text.Editor.ReplEditorOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> instance
            </summary>
            <param name="options">Options or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.IsOverlayLayerAttribute">
            <summary>
            Creates an adornment layer that is on top of all normal layers, see also <see cref="T:dnSpy.Contracts.Text.Editor.LayerKindAttribute"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.IsOverlayLayerAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isOverlayLayer">true if it's an overlay layer, false if it's a normal layer</param>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.IsOverlayLayerAttribute.IsOverlayLayer">
            <summary>
            true if it's an overlay layer, false if it's a normal layer
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.LayerKind">
            <summary>
            Layer kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.LayerKind.Normal">
            <summary>
            Normal layer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.LayerKind.Overlay">
            <summary>
            Overlay layer. It's shown above all <see cref="F:dnSpy.Contracts.Text.Editor.LayerKind.Normal"/> layers
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.LayerKind.Underlay">
            <summary>
            Underlay layer. It's shown below all <see cref="F:dnSpy.Contracts.Text.Editor.LayerKind.Normal"/> layers
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.LayerKindAttribute">
            <summary>
            Adds a layer kind
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.LayerKindAttribute.#ctor(dnSpy.Contracts.Text.Editor.LayerKind)">
            <summary>
            Constructor
            </summary>
            <param name="kind">Kind of layer</param>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.LayerKindAttribute.LayerKind">
            <summary>
            Layer kind
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.LogEditorOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.LogEditorOptions.ExtraRoles">
            <summary>
            Extra text view roles
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.LogEditorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.LogEditorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.MarginNameAttribute">
            <summary>
            Adds the name of a margin
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.MarginNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="marginName">Name of margin, eg. <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.MarginNameAttribute.MarginName">
            <summary>
            Name of margin, eg. <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager">
            <summary>
            Text view undo manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager.TextView">
            <summary>
            Gets the text view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager.TextViewUndoHistory">
            <summary>
            Gets the undo history
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager.ClearUndoHistory">
            <summary>
            Clears the undo/redo history. <see cref="P:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager.TextViewUndoHistory"/> also gets
            updated with a new instance.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManagerProvider">
            <summary>
            Enables undo/redo in text views
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManagerProvider.GetTextViewUndoManager(dnSpy.Contracts.Text.Editor.IDsWpfTextView)">
            <summary>
            Creates or returns a cached <see cref="T:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager"/> instance
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManagerProvider.TryGetTextViewUndoManager(dnSpy.Contracts.Text.Editor.IDsWpfTextView,dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager@)">
            <summary>
            Tries to return an existing <see cref="T:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager"/> instance
            </summary>
            <param name="textView">Text view</param>
            <param name="manager">Updated with the existing instance or null if none exists</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManagerProvider.RemoveTextViewUndoManager(dnSpy.Contracts.Text.Editor.IDsWpfTextView)">
            <summary>
            Removes the cached <see cref="T:dnSpy.Contracts.Text.Editor.Operations.ITextViewUndoManager"/> instance, if any.
            </summary>
            <param name="textView">Text view</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.DefaultDsOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsOptionsExtensions.GetIndentStyle(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the indent style option
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.DefaultDsTextViewOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsCanChangeOverwriteModeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the user can change overwrite mode
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsCanChangeUseVisibleWhitespaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the user can enable or disable use-visible-whitespace option
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsCanChangeWordWrapStyleEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if the user can change word wrap style
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsAllowBoxSelectionEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if box selection is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsRefreshScreenOnChangeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if refresh-screen-on-change is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.GetRefreshScreenOnChangeWaitMilliSeconds(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the number of milliseconds to wait before refreshing the screen after the document gets changed
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsColorizationEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if text should be colorized
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsReferenceHighlightingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if references should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsBraceMatchingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if braces should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsLineSeparatorEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if line separators should be shown
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsHighlightRelatedKeywordsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if related keywords should be highlighted
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsCompressEmptyOrWhitespaceLinesEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if empty or whitespace-only lines should be compressed
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsCompressNonLetterLinesEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if non-empty lines that don't contain letters or digits should be compressed
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.IsRemoveExtraTextLineVerticalPixelsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if extra vertical pixels should be removed from text lines
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsTextViewOptionsExtensions.GetBlockStructureLineKind(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Text.Editor.BlockStructureLineKind"/> value
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsWpfViewOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.DefaultDsWpfViewOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultDsWpfViewOptionsExtensions.IsForceClearTypeIfNeededEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if clear type should be forced is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultReplEditorOptionsExtensions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.DefaultReplEditorOptions"/> extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultReplEditorOptionsExtensions.IsReplRefreshScreenOnChangeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns true if refresh-screen-on-change is enabled
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.OptionsExtensionMethods.DefaultReplEditorOptionsExtensions.GetReplRefreshScreenOnChangeWaitMilliSeconds(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Returns the number of milliseconds to wait before refreshing the screen after the document gets changed
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers">
            <summary>
            dnSpy adornment layers
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.BottomLayer">
            <summary>
            Bottom layer. All layers should normally be after this layer.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.TopLayer">
            <summary>
            Top layer. All layers should normally be before this layer.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.NegativeTextMarkerLayer">
            <summary>
            Text marker adornment layer for markers with a negative z-index
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.GlyphTextMarker">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/>'s adornment layer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.LineSeparator">
            <summary>
            Line separator adornment layer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.BackgroundImage">
            <summary>
            Background image adornment layer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.Search">
            <summary>
            Search adornment layer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsAdornmentLayers.IntraTextAdornment">
            <summary>
            Intra text adornment layer
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsGlyphFactoryProviderNames">
            <summary>
            dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsGlyphFactoryProviderNames.GlyphTextViewMarker">
            <summary>
            Glyph textview marker
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsGlyphMouseProcessorProviders">
            <summary>
            Predefined dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider"/>s
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsGlyphMouseProcessorProviders.GlyphTextMarkerService">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsGlyphTextMarkerMouseProcessorProviderNames">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerMouseProcessorProvider"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsGlyphTextMarkerMouseProcessorProviderNames.DebuggerBreakpoints">
            <summary>
            Debugger breakpoints mouse processor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsMarginNames">
            <summary>
            Predefined dnSpy margin names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsMarginNames.CustomLineNumber">
            <summary>
            Custom line number margin
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsMouseProcessorProviders">
            <summary>
            Predefined dnSpy <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider"/>s
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsMouseProcessorProviders.DocumentViewer">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsMouseProcessorProviders.IntellisensePresenter">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter"/> <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsMouseProcessorProviders.Uri">
            <summary>
            URI <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles">
            <summary>
            Predefined dnSpy textview roles
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.DocumentViewer">
            <summary>
            <see cref="T:dnSpy.Contracts.Documents.Tabs.DocViewer.IDocumentViewer"/> text view role
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.LogEditor">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.ILogEditor"/> text view role
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.OutputTextPane">
            <summary>
            <see cref="T:dnSpy.Contracts.Output.IOutputTextPane"/> text view role
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.ReplEditor">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> text view role
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.RoslynRepl">
            <summary>
            Roslyn REPL (any supported language, eg. C# and Visual Basic)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CSharpRepl">
            <summary>
            C# REPL
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.VisualBasicRepl">
            <summary>
            Visual Basic REPL
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CodeEditor">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.ICodeEditor"/> text view role
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.RoslynCodeEditor">
            <summary>
            Roslyn code editor (any supported language, eg. C# and Visual Basic)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.RoslynCSharpCodeEditor">
            <summary>
            Roslyn code editor (C#)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.RoslynVisualBasicCodeEditor">
            <summary>
            Roslyn code editor (Visual Basic)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CustomLineNumberMargin">
            <summary>
            Enables the custom line number margin, see <see cref="T:dnSpy.Contracts.Text.Editor.CustomLineNumberMargin"/>
            documentation for more info.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveGlyphTextMarkerService">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IGlyphTextMarkerService"/> services can be used. Not needed if
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Interactive"/> is already used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveCurrentLineHighlighter">
            <summary>
            Allows the current line highlighter to be used. Not needed if
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document"/> is already used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveLineNumberMargin">
            <summary>
            Allows the line number margin to be used. Not needed if
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document"/> is already used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveLineSeparator">
            <summary>
            Allows line separators to be used. Not needed if
            <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document"/> is already used.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveBackgroundImage">
            <summary>
            Allows background images to be used
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveLineCompressor">
            <summary>
            Allows line compressor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedDsTextViewRoles.CanHaveIntellisenseControllers">
            <summary>
            Allows intellisense controllers
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.PredefinedSpaceReservationManagerNames">
            <summary>
            Predefined <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedSpaceReservationManagerNames.CurrentLine">
            <summary>
            Current line space reservation manager name
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.PredefinedSpaceReservationManagerNames.ToolTip">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ReplEditorOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.ReplEditorOptions.DEFAULT_PRIMARY_PROMPT_TEXT">
            <summary>
            Default <see cref="P:dnSpy.Contracts.Text.Editor.ReplEditorOptions.PrimaryPrompt"/> value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.ReplEditorOptions.DEFAULT_SECONDARY_PROMPT_TEXT">
            <summary>
            Default <see cref="P:dnSpy.Contracts.Text.Editor.ReplEditorOptions.SecondaryPrompt"/> value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ReplEditorOptions.PrimaryPrompt">
            <summary>
            Primary prompt, default is <see cref="F:dnSpy.Contracts.Text.Editor.ReplEditorOptions.DEFAULT_PRIMARY_PROMPT_TEXT"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ReplEditorOptions.SecondaryPrompt">
            <summary>
            Secondary prompt text, default is <see cref="F:dnSpy.Contracts.Text.Editor.ReplEditorOptions.DEFAULT_SECONDARY_PROMPT_TEXT"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.ReplEditorOptions.Roles">
            <summary>
            All <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> roles
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ReplEditorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ReplEditorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.ReplEditorUtils">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> utils
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ReplEditorUtils.AddInstance(dnSpy.Contracts.Text.Editor.IReplEditor,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Adds the <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> instance to the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> properties
            </summary>
            <param name="replEditor">REPL editor</param>
            <param name="textView">REPL editor text view</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.ReplEditorUtils.TryGetInstance(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns the <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> instance if it has been added by <see cref="M:dnSpy.Contracts.Text.Editor.ReplEditorUtils.AddInstance(dnSpy.Contracts.Text.Editor.IReplEditor,Microsoft.VisualStudio.Text.Editor.ITextView)"/>
            </summary>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.TextMarkerServiceZIndexes">
            <summary>
            Text marker service Z-indexes. Markers with a negative z-index are placed in a
            marker layer below most other layers.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.TextMarkerServiceZIndexes.ActiveStatement">
            <summary>
            (Debugger) Z-index of active statement
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.TextMarkerServiceZIndexes.HighlightedReference">
            <summary>
            Highlighted reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.TextMarkerServiceZIndexes.HighlightedWrittenReference">
            <summary>
            Highlighted written reference
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.TextMarkerServiceZIndexes.HighlightedDefinition">
            <summary>
            Highlighted definition
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.TextMarkerServiceZIndexes.FindMatch">
            <summary>
            Find match
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> creator options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions.MenuGuid">
            <summary>
            Guid of context menu or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions.CreateGuidObjects">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Menus.GuidObject"/>s, can be null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions.EnableUndoHistory">
            <summary>
            true to enable undo/redo history. Default value is true
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions.Clone">
            <summary>
            Clones this
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.TextViewCreatorOptions.CopyTo(dnSpy.Contracts.Text.Editor.TextViewCreatorOptions)">
            <summary>
            Copy this to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.TextViewExtensions">
            <summary>
            Text view extensions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Editor.TextViewExtensions.EnsureCaretVisible(Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean)">
            <summary>
            Scrolls the view to make the caret visible. If it's not visible, it's centered.
            </summary>
            <param name="textView">Text view</param>
            <param name="center">true to center the caret</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.Editor.WordWrapStylesConstants">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles"/> constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.WordWrapStylesConstants.DefaultDisabled">
            <summary>
            Default disabled word wrap styles
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.WordWrapStylesConstants.DefaultEnabled">
            <summary>
            Default enabled word wrap styles
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Text.Editor.WordWrapStylesConstants.DefaultValue">
            <summary>
            Default word wrap styles value
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Text.Formatting.IHtmlBuilderService">
            <summary>
            Creates HTML strings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Formatting.IHtmlBuilderService.DefaultDelimiter">
            <summary>
            Gets the default delimiter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Formatting.IHtmlBuilderService.GenerateHtmlFragment(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Formatting.IHtmlBuilderService.GenerateHtmlFragment(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="delimiter">Delimiter added between generated html strings</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Formatting.IHtmlBuilderService.GenerateHtmlFragment(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="textView">Text view</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Formatting.IHtmlBuilderService.GenerateHtmlFragment(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an HTML fragment that can be copied to the clipboard
            </summary>
            <param name="spans">Spans</param>
            <param name="textView">Text view</param>
            <param name="delimiter">Delimiter added between generated html strings</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Operations.IReplEditorOperations">
            <summary>
            <see cref="T:dnSpy.Contracts.Text.Editor.IReplEditor"/> operations
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Operations.IReplEditorOperations.ReplEditor">
            <summary>
            Gets the REPL editor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Operations.IReplEditorOperations.CanCopyCode">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.CopyCode"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.CopyCode">
            <summary>
            Copies only the code, but not the prompts or script output
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.Submit">
            <summary>
            Submits current input
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.InsertNewLineDontSubmit">
            <summary>
            Adds a new line without submitting the current input
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.ClearInput">
            <summary>
            Clears user input
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.ClearScreen">
            <summary>
            Clears the screen
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.Reset">
            <summary>
            Resets the REPL editor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.SelectPreviousCommand">
            <summary>
            Selects the previous command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.SelectNextCommand">
            <summary>
            Selects the next command
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Operations.IReplEditorOperations.CanSelectPreviousCommand">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.SelectPreviousCommand"/> can be called
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.Operations.IReplEditorOperations.CanSelectNextCommand">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.SelectNextCommand"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.SelectSameTextPreviousCommand">
            <summary>
            Selects the previous command matching the current input text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.SelectSameTextNextCommand">
            <summary>
            Selects the next command matching the current input text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.AddUserInput(System.String,System.Boolean)">
            <summary>
            Adds user input
            </summary>
            <param name="text">Text</param>
            <param name="clearSearchText">true to clear search text</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.Operations.IReplEditorOperations.AddUserInput(Microsoft.VisualStudio.Text.Span,System.String,System.Boolean)">
            <summary>
            Adds user input
            </summary>
            <param name="span">Span</param>
            <param name="text">Text</param>
            <param name="clearSearchText">true to clear search text</param>
        </member>
        <member name="T:dnSpy.Contracts.Text.SpanDataCollection`1">
            <summary>
            Span and data collection, sorted by span, no overlaps, see also <see cref="T:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1"/>
            </summary>
            <typeparam name="TData">Type of data</typeparam>
        </member>
        <member name="F:dnSpy.Contracts.Text.SpanDataCollection`1.Empty">
            <summary>
            Gets the empty instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.SpanDataCollection`1.Count">
            <summary>
            Gets the number of elements
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.SpanDataCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at <paramref name="index"/>
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.#ctor(dnSpy.Contracts.Text.SpanData{`0}[])">
            <summary>
            Constructor, see also <see cref="T:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1"/>
            </summary>
            <param name="spanDataArray">Span and data collection</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.Find(System.Int32,System.Boolean)">
            <summary>
            Finds data or returns null if not found
            </summary>
            <param name="position">Position</param>
            <param name="allowIntersection">true if references whose <see cref="P:Microsoft.VisualStudio.Text.Span.End"/> equals <paramref name="position"/> can be returned</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.Find(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Finds data
            </summary>
            <param name="span">Span to search</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.FindFrom(System.Int32)">
            <summary>
            Finds data
            </summary>
            <param name="position">Start position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.Find(System.Int32,System.Int32)">
            <summary>
            Finds data
            </summary>
            <param name="position">Start position</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.GetStartIndex(System.Int32)">
            <summary>
            Gets the index of the first element whose span is greater than or equal to <paramref name="position"/>.
            -1 is returned if no such element exists.
            </summary>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollection`1.FirstOrNull(System.Func{dnSpy.Contracts.Text.SpanData{`0},System.Boolean})">
            <summary>
            Returns the first <see cref="T:dnSpy.Contracts.Text.SpanData`1"/> in the collection that satisfies a condition
            or returns null if nothing was found
            </summary>
            <param name="predicate">Returns true if the element should be returned</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.SpanData`1">
            <summary>
            Span and data
            </summary>
            <typeparam name="TData">Type of data</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Text.SpanData`1.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.SpanData`1.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanData`1.#ctor(Microsoft.VisualStudio.Text.Span,`0)">
            <summary>
            Constructor
            </summary>
            <param name="span">Span</param>
            <param name="data">Data</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanData`1.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1">
            <summary>
            Builds a <see cref="T:dnSpy.Contracts.Text.SpanDataCollection`1"/>
            </summary>
            <typeparam name="TData">Type of data</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1.CreateBuilder">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1.CreateBuilder(System.Int32)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1"/>
            </summary>
            <param name="capacity">Capacity</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1.Clear">
            <summary>
            Clears the created list
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1.Add(Microsoft.VisualStudio.Text.Span,`0)">
            <summary>
            Adds span and data. The span must be located after the previously added span
            </summary>
            <param name="span">Span</param>
            <param name="data">Data</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.SpanDataCollectionBuilder`1.Create">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.SpanDataCollection`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.StringBuilderTextColorOutput">
            <summary>
            An <see cref="T:dnSpy.Contracts.Text.ITextColorWriter"/> using a <see cref="T:System.Text.StringBuilder"/>. It ignores
            all colors passed to it.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.StringBuilderTextColorOutput.IsEmpty">
            <summary>
            true if nothing has been written
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.StringBuilderTextColorOutput.Text">
            <summary>
            Gets all the text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.StringBuilderTextColorOutput.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.StringBuilderTextColorOutput.#ctor(System.Text.StringBuilder)">
            <summary>
            Constructor
            </summary>
            <param name="stringBuilder">String builder</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.StringBuilderTextColorOutput.Write(System.Object,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.StringBuilderTextColorOutput.Write(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Text.StringBuilderTextColorOutput.ToString">
            <summary>
            Gets all the text
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Tagging.ISynchronousBufferTagAggregatorFactoryService">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousBufferTagAggregatorFactoryService.CreateSynchronousTagAggregator``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="textBuffer">Text buffer</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousBufferTagAggregatorFactoryService.CreateSynchronousTagAggregator``1(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="textBuffer">Text buffer</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1.GetTags(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags
            </summary>
            <param name="span">Span to tag</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1.GetTags(Microsoft.VisualStudio.Text.IMappingSpan,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags
            </summary>
            <param name="span">Span to tag</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags
            </summary>
            <param name="snapshotSpans">Spans to tag</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Tagging.ISynchronousTagger`1">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousTagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets the tags
            </summary>
            <param name="spans">Spans to tag</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.Tagging.ISynchronousViewTagAggregatorFactoryService">
            <summary>
            Synchronous <see cref="T:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousViewTagAggregatorFactoryService.CreateSynchronousTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="textView">Text view</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Text.Tagging.ISynchronousViewTagAggregatorFactoryService.CreateSynchronousTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Tagging.ISynchronousTagAggregator`1"/>
            </summary>
            <typeparam name="T">Tag type</typeparam>
            <param name="textView">Text view</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Text.TextEditorPosition">
            <summary>
            Text editor position
            </summary>
            <remarks>It's used by menu handlers only, so it's a class, not a struct (would be boxed otherwise)</remarks>
        </member>
        <member name="P:dnSpy.Contracts.Text.TextEditorPosition.Position">
            <summary>
            Gets the position
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.TextEditorPosition.VirtualSpaces">
            <summary>
            Gets the virtual spaces
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Text.TextEditorPosition.IsInVirtualSpace">
            <summary>
            true if it's in virtual space
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Text.TextEditorPosition.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Constructor
            </summary>
            <param name="point">Position</param>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ColorType">
            <summary>
            Color type
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Themes.ExtensionMethods.ToColorType(dnSpy.Contracts.Text.TextColor)">
            <summary>
            Converts the color to a <see cref="T:dnSpy.Contracts.Themes.ColorType"/>
            </summary>
            <param name="self">Color</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ITheme">
            <summary>
            A theme
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.Guid">
            <summary>Guid</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.Name">
            <summary>Name or an empty string</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.MenuName">
            <summary>Name of theme that can be used in a MenuItem</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.IsHighContrast">
            <summary>true if this is a high-contrast theme</summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.IsDark">
            <summary>
            true if it's a dark colored theme
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.IsLight">
            <summary>
            true if it's a light colored theme
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.ITheme.Order">
            <summary>Theme order. Can be used by a UI class to sort the themes before showing them
            to the user</summary>
        </member>
        <member name="M:dnSpy.Contracts.Themes.ITheme.GetColor(dnSpy.Contracts.Themes.ColorType)">
            <summary>
            Gets the inherited color
            </summary>
            <param name="colorType">Color</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Themes.ITheme.GetTextColor(dnSpy.Contracts.Themes.ColorType)">
            <summary>
            Gets the inherited color that can be used by a text editor (default colors are null)
            </summary>
            <param name="colorType">Color</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Themes.ITheme.GetExplicitColor(dnSpy.Contracts.Themes.ColorType)">
            <summary>
            Gets the color that was defined in the theme file. Inherited colors aren't included.
            </summary>
            <param name="colorType">Color</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Themes.IThemeColor">
            <summary>
            Theme color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Name">
            <summary>
            Name of color
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.FontWeight">
            <summary>
            Font weight or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.FontStyle">
            <summary>
            Font style or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Foreground">
            <summary>
            Foreground (first) color or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Background">
            <summary>
            Background (second) color null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Color3">
            <summary>
            Third color or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeColor.Color4">
            <summary>
            Fourth color or null
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.IThemeService">
            <summary>
            Manages all <see cref="T:dnSpy.Contracts.Themes.ITheme"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Themes.IThemeService.Theme">
            <summary>
            Gets the current theme
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Themes.IThemeService.ThemeChangedHighPriority">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Themes.IThemeService.Theme"/> gets changed, and is raised before <see cref="E:dnSpy.Contracts.Themes.IThemeService.ThemeChanged"/>
            and <see cref="E:dnSpy.Contracts.Themes.IThemeService.ThemeChangedLowPriority"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Themes.IThemeService.ThemeChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Themes.IThemeService.Theme"/> gets changed and is notified after <see cref="E:dnSpy.Contracts.Themes.IThemeService.ThemeChangedHighPriority"/>
            and before <see cref="E:dnSpy.Contracts.Themes.IThemeService.ThemeChangedLowPriority"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Themes.IThemeService.ThemeChangedLowPriority">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Themes.IThemeService.Theme"/> gets changed and is notified after <see cref="E:dnSpy.Contracts.Themes.IThemeService.ThemeChangedHighPriority"/>
            and <see cref="E:dnSpy.Contracts.Themes.IThemeService.ThemeChanged"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ThemeChangedEventArgs">
            <summary>
            Theme changed event args
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Themes.ThemeConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_HIGHCONTRAST_GUID">
            <summary>
            High contrast theme guid
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_BLUE_GUID">
            <summary>
            Blue theme guid
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_DARK_GUID">
            <summary>
            Dark theme guid
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Themes.ThemeConstants.THEME_LIGHT_GUID">
            <summary>
            Light theme guid
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarButton">
            <summary>
            A button in the toolbar
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.IsEnabled(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Returns true if the toolbar item is enabled and its <see cref="M:dnSpy.Contracts.ToolBars.IToolBarButton.Execute(dnSpy.Contracts.ToolBars.IToolBarItemContext)"/>
            method can be called.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.Execute(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Executes the command
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.GetHeader(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the header or null to use the header from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.GetIcon(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the icon or null to use the icon from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarButton.GetToolTip(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the tooltip or null to use the tooltip from the attribute
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.Header">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Header"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.Icon">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Icon"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.ToolTip">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.ToolTip"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarButtonMetadata.IsToggleButton">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.IsToggleButton"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute">
            <summary>
            Exports a toolbar button (<see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Header">
            <summary>
            Toolbar button header property value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.Icon">
            <summary>
            Icon name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.ToolTip">
            <summary>
            Tooltip
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.IsToggleButton">
            <summary>
            true if it's a toggle button. If true, you must implement <see cref="T:dnSpy.Contracts.ToolBars.IToolBarToggleButton"/>.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarItem">
            <summary>
            A ToolBar item command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarItem.IsVisible(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Returns true if the toolbar item is visible in the toolbar
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarItemMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemMetadata.OwnerGuid">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.OwnerGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemMetadata.Group">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Group"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute">
            <summary>
            ToolBar export attribute base class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="contractType">Contract type</param>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.OwnerGuid">
            <summary>
            Guid of owner toolbar or null to use <see cref="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Group">
            <summary>
            Group name, must be of the format "order,name" where order is a decimal number and the
            order of the group in this toolbar.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Order">
            <summary>
            Order within the toolbar group (<see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarItemAttribute.Group"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarItemContext">
            <summary>
            <see cref="T:dnSpy.Contracts.ToolBars.IToolBarItem"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.IToolBarItemContext.ToolBarGuid">
            <summary>
            Gets the guid of the toolbar, eg. <see cref="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarObject">
            <summary>
            A toolbar object
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarObject.GetUIObject(dnSpy.Contracts.ToolBars.IToolBarItemContext,System.Windows.IInputElement)">
            <summary>
            Gets the UI object to place in the <see cref="T:System.Windows.Controls.ToolBar"/>
            </summary>
            <param name="context">Context</param>
            <param name="commandTarget">Command target for toolbar items, eg. the owner window, or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarObjectMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ExportToolBarObjectAttribute">
            <summary>
            Exports a toolbar object (<see cref="T:dnSpy.Contracts.ToolBars.IToolBarObject"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ExportToolBarObjectAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarService">
            <summary>
            ToolBar manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarService.InitializeToolBar(System.Windows.Controls.ToolBar,System.Guid,System.Windows.IInputElement)">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolBar"/>
            </summary>
            <param name="toolBar">The toolbar to initialize or null to create a new one and initialize it</param>
            <param name="toolBarGuid">Guid of toolbar, eg. <see cref="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID"/></param>
            <param name="commandTarget">Command target for toolbar items, eg. the owner window, or null</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.IToolBarToggleButton">
            <summary>
            Implement this interface if <see cref="P:dnSpy.Contracts.ToolBars.ExportToolBarButtonAttribute.IsToggleButton"/> is true
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.IToolBarToggleButton.GetBinding(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <summary>
            Gets the binding
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ToolBarButtonBase">
            <summary>
            Toolbar button base class (implements <see cref="T:dnSpy.Contracts.ToolBars.IToolBarButton"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonBase.Execute(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonBase.IsEnabled(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonBase.IsVisible(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonBase.GetHeader(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonBase.GetIcon(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonBase.GetToolTip(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ToolBarButtonCommand">
            <summary>
            Toolbar button base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolBars.ToolBarButtonCommand.Command">
            <summary>
            Gets the real command
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonCommand.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Constructor
            </summary>
            <param name="realCommand">Real command that gets executed the button is pressed</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonCommand.Execute(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarButtonCommand.IsEnabled(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ToolBarConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.APP_TB_GUID">
            <summary>Guid of app toolbar</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_MENU">
            <summary>Group: App ToolBar: Main, Group: Menu</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_NAVIGATION">
            <summary>Group: App ToolBar: Main, Group: Back/Forward</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_OPEN">
            <summary>Group: App ToolBar: Main, Group: Open</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_LANGUAGE">
            <summary>Group: App ToolBar: Main, Group: Language</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_ASMED_UNDO">
            <summary>Group: App ToolBar: Main, Group: AsmEditor Undo/Redo</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_DEBUG">
            <summary>Group: App ToolBar: Main, Group: Debug</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_DEBUG_CONTINUE">
            <summary>Group: App ToolBar: Main, Group: Debug / Continue</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_DEBUG_STEP">
            <summary>Group: App ToolBar: Main, Group: Debug / Step</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_SEARCH">
            <summary>Group: App ToolBar: Main, Group: Search</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolBars.ToolBarConstants.GROUP_APP_TB_MAIN_FULLSCREEN">
            <summary>Group: App ToolBar: Main, Group: Full Screen</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolBars.ToolBarObjectBase">
            <summary>
            Toolbar object base class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarObjectBase.GetUIObject(dnSpy.Contracts.ToolBars.IToolBarItemContext,System.Windows.IInputElement)">
            <inheritdoc/>
        </member>
        <member name="M:dnSpy.Contracts.ToolBars.ToolBarObjectBase.IsVisible(dnSpy.Contracts.ToolBars.IToolBarItemContext)">
            <inheritdoc/>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_LEFT_FILES">
            <summary>Order of files tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_ANALYZER">
            <summary>Order of analyzer tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_LOCALS">
            <summary>Order of debugger locals window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_BREAKPOINTS">
            <summary>Order of debugger breakpoints tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_CALLSTACK">
            <summary>Order of debugger call stack tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_THREADS">
            <summary>Order of debugger threads tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_EXCEPTIONS">
            <summary>Order of debugger exceptions tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_MODULES">
            <summary>Order of debugger modules tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_DEBUGGER_MEMORY">
            <summary>Order of debugger memory tool window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_SCRIPTING_CSHARP">
            <summary>Order of C# interactive window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_SCRIPTING_VISUALBASIC">
            <summary>Order of Visual Basic interactive window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_BOTTOM_OUTPUT">
            <summary>Order of Output window</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowConstants.DEFAULT_CONTENT_ORDER_TOP_SEARCH">
            <summary>Order of search tool window</summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation">
            <summary>
            Tool window location
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Left">
            <summary>Left</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Right">
            <summary>Right</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Top">
            <summary>Top</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Bottom">
            <summary>Bottom</summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.DefaultHorizontal">
            <summary>Default horizontal location, eg. <see cref="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Bottom"/></summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.DefaultVertical">
            <summary>Default vertical location, eg. <see cref="F:dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation.Left"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService">
            <summary>
            Allows adding tool windows
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Show(dnSpy.Contracts.ToolWindows.ToolWindowContent,System.Nullable{dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation})">
            <summary>
            Adds <paramref name="content"/> to a tool window and gives it keyboard focus. If it's
            already been added, it becomes active and gets keyboard focus.
            </summary>
            <param name="content">Content</param>
            <param name="location">Location or null to use the default location
            (<see cref="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Location"/>). It's ignored if the content is already
            present in the UI.</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Show(System.Guid,System.Nullable{dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation})">
            <summary>
            Adds content to a tool window and gives it keyboard focus. If it's already been added,
            it becomes active and gets keyboard focus.
            </summary>
            <param name="guid">Guid of content, see <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.Guid"/></param>
            <param name="location">Location or null to use the default location
            (<see cref="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Location"/>). It's ignored if the content is already
            present in the UI.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Close(dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Removes <paramref name="content"/> from the UI
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Close(System.Guid)">
            <summary>
            Removes the tool window from the UI
            </summary>
            <param name="guid">Guid</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.IsShown(dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Returns true if <paramref name="content"/> is shown in the UI
            </summary>
            <param name="content">Content</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.IsShown(System.Guid)">
            <summary>
            Returns true if the content is shown in the UI
            </summary>
            <param name="guid">Guid of content, see <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.Guid"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Owns(dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Returns true if it owns <paramref name="toolWindowGroup"/>
            </summary>
            <param name="toolWindowGroup">Group</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.CanMove(dnSpy.Contracts.ToolWindows.ToolWindowContent,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Move(dnSpy.Contracts.ToolWindows.ToolWindowContent,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)"/> can execute
            </summary>
            <param name="content">Content</param>
            <param name="location">Location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Move(dnSpy.Contracts.ToolWindows.ToolWindowContent,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Moves <paramref name="content"/> to a new location
            </summary>
            <param name="content">Content</param>
            <param name="location">Location</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.CanMove(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Returns true if <see cref="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Move(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)"/> can execute
            </summary>
            <param name="group">Group</param>
            <param name="location">Location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IDsToolWindowService.Move(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation)">
            <summary>
            Moves <paramref name="group"/> to a new location
            </summary>
            <param name="group">Group</param>
            <param name="location">Location</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.IToolWindowContentProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.ToolWindows.ToolWindowContent"/> instances.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.IToolWindowContentProvider.GetOrCreate(System.Guid)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.ToolWindows.ToolWindowContent"/> instance or returns a cached instance if it's
            already been created. Returns null if someone else should create it.
            </summary>
            <param name="guid">Guid, see <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.Guid"/></param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.App.IToolWindowContentProvider.ContentInfos">
            <summary>
            Gets the tool windows it can create
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo">
            <summary>
            <see cref="T:dnSpy.Contracts.ToolWindows.ToolWindowContent"/> info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Guid">
            <summary>
            Guid of <see cref="T:dnSpy.Contracts.ToolWindows.ToolWindowContent"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.Order">
            <summary>
            Order, used if <see cref="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.IsDefault"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.IsDefault">
            <summary>
            true if it's shown the first time dnSpy loads
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.App.ToolWindowContentInfo.#ctor(System.Guid,dnSpy.Contracts.ToolWindows.App.AppToolWindowLocation,System.Double,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Guid</param>
            <param name="location">Location</param>
            <param name="order">Order</param>
            <param name="isDefault">true if default</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup">
            <summary>
            Tool window tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.ToolWindowGroupService">
            <summary>
            Gets the owner <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroupService"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.TabContents">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.ToolWindows.ToolWindowContent"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.ActiveTabContent">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.ToolWindows.ToolWindowContent"/> or null if <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.TabContents"/> is empty
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.Add(dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Adds the content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.Close(dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Closes the content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.MoveTo(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Moves <paramref name="content"/> from this group to <paramref name="destGroup"/>
            </summary>
            <param name="destGroup">Destination group</param>
            <param name="content">Content in this group</param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.SetFocus(dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Sets keyboard focus
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroup.CloseActiveTabCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.CloseActiveTab"/> can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroup.CloseActiveTab">
            <summary>
            Closes the active tab
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowGroupService">
            <summary>
            Tool window group manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.TabGroups">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/> instances
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.ActiveTabGroup">
            <summary>
            Gets the active <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/> or null if <see cref="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.TabGroups"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.IsHorizontal">
            <summary>
            true if the <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/>s are lined up horizontally, else vertically
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroup"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.TabSelectionChanged">
            <summary>
            Raised when a new tab has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.TabGroupSelectionChanged">
            <summary>
            Raised when a new tab group has been selected
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.TabGroupCollectionChanged">
            <summary>
            Raised when a tab group has been added or removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.Close(dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Closes the group
            </summary>
            <param name="group">Group</param>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseAllTabsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseAllTabs"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseAllTabs">
            <summary>
            Closes all tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.NewHorizontalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.NewHorizontalTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.NewHorizontalTabGroup">
            <summary>
            Moves the active tab to a new horizontal tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.NewVerticalTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.NewVerticalTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.NewVerticalTabGroup">
            <summary>
            Moves the active tab to a new vertical tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveToNextTabGroup">
            <summary>
            Moves active tab to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveToPreviousTabGroup">
            <summary>
            Moves the active tab to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveAllToNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveAllToNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveAllToNextTabGroup">
            <summary>
            Moves all tabs in the current tab group to the next tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveAllToPreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveAllToPreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveAllToPreviousTabGroup">
            <summary>
            Moves all tabs in the current tab group to the previous tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseTabGroup">
            <summary>
            Closes the tab group and all its tabs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseAllTabGroupsButThisCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseAllTabGroupsButThis"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.CloseAllTabGroupsButThis">
            <summary>
            Closes all tab groups except the active one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveTabGroupAfterNextTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveTabGroupAfterNextTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveTabGroupAfterNextTabGroup">
            <summary>
            Moves the active tab group after the next one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveTabGroupBeforePreviousTabGroupCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveTabGroupBeforePreviousTabGroup"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MoveTabGroupBeforePreviousTabGroup">
            <summary>
            Moves the active tab group before the previous one
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MergeAllTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MergeAllTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.MergeAllTabGroups">
            <summary>
            Moves all tabs to one tab group and closes the remaining (empty) tab groups
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UseVerticalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UseVerticalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UseVerticalTabGroups">
            <summary>
            Stacks all tab groups vertically
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UseHorizontalTabGroupsCanExecute">
            <summary>
            true if <see cref="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UseHorizontalTabGroups"/> can execute
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowGroupService.UseHorizontalTabGroups">
            <summary>
            Stacks all tab groups horizontally
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowService">
            <summary>
            Tool window manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowService.Create(dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowGroupService"/> instance
            </summary>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.IToolWindowServiceProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowService"/> instances
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.IToolWindowServiceProvider.Create">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowService"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowContent">
            <summary>
            Tool window content. If any of the properties can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.UIObject">
            <summary>
            UI object; a WPF UI element or an object with a <see cref="T:System.Windows.DataTemplate"/>.
            If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.FocusedElement">
            <summary>
            The element that gets focus or null if none, see also <see cref="T:dnSpy.Contracts.Controls.IFocusable"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.ZoomElement">
            <summary>
            Gets the element that gets the <see cref="T:System.Windows.Media.ScaleTransform"/> or null if none,
            see also <see cref="T:dnSpy.Contracts.Controls.IZoomableProvider"/> and <see cref="T:dnSpy.Contracts.Controls.IZoomable"/>.
            If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.Guid">
            <summary>
            Gets the guid of this content
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.Title">
            <summary>
            Title. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowContent.ToolTip">
            <summary>
            ToolTip or null. If this property can change, you must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowContent.OnVisibilityChanged(dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent)">
            <summary>
            Called when the visibility changes
            </summary>
            <param name="visEvent">Event</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Added">
            <summary>
            It's been added to the UI. It may or may not be visible.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Removed">
            <summary>
            It's been removed from the UI
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Visible">
            <summary>
            It's open and visible
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.Hidden">
            <summary>
            It's open but hidden
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.GotKeyboardFocus">
            <summary>
            The content got keyboard focus
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.ToolWindows.ToolWindowContentVisibilityEvent.LostKeyboardFocus">
            <summary>
            The content lost keyboard focus
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs">
            <summary>
            Collection changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.Added">
            <summary>
            true if <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.TabGroup"/> was added, false if it was removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.TabGroup">
            <summary>
            The tab group
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupCollectionChangedEventArgs.#ctor(System.Boolean,dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Constructor
            </summary>
            <param name="added">true if it was added</param>
            <param name="tabGroup">Tab group</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs">
            <summary>
            Tab group selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs.Selected">
            <summary>
            Selected tab group or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs.Unselected">
            <summary>
            Unselected tab group or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupSelectedEventArgs.#ctor(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.IToolWindowGroup)">
            <summary>
            Constructor
            </summary>
            <param name="selected">Selected tab group or null</param>
            <param name="unselected">Unselected tab group or null</param>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.ToolWindows.IToolWindowService"/> options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.TabControlStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.TabItemStyle">
            <summary>
            A style or a resource key or null to use the default style
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.ToolWindowGroupGuid">
            <summary>
            Tool window group guid, eg. <see cref="F:dnSpy.Contracts.Menus.MenuConstants.GUIDOBJ_TOOLWINDOW_TABCONTROL_GUID"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="groupGuid">See <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.ToolWindowGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="groupGuid">See <see cref="P:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.ToolWindowGroupGuid"/></param>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowGroupServiceOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs">
            <summary>
            Tab selected event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.TabGroup">
            <summary>
            Tab group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.Selected">
            <summary>
            Selected tab content or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.Unselected">
            <summary>
            Unselected tab content or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.ToolWindows.ToolWindowSelectedEventArgs.#ctor(dnSpy.Contracts.ToolWindows.IToolWindowGroup,dnSpy.Contracts.ToolWindows.ToolWindowContent,dnSpy.Contracts.ToolWindows.ToolWindowContent)">
            <summary>
            Constructor
            </summary>
            <param name="tabGroup">Tab group</param>
            <param name="selected">Selected content or null</param>
            <param name="unselected">Unselected content or null</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.AsyncNodeProvider">
            <summary>
            Creates nodes asynchronously
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.AsyncNodeProvider.cancellationToken">
            <summary>Cancellation token</summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.#ctor(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Constructor
            </summary>
            <param name="targetNode">Target node that will be the parent of the new nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.AddNode(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Adds a new node
            </summary>
            <param name="node">New node</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.AddMessageNode(System.Func{dnSpy.Contracts.TreeView.TreeNodeData})">
            <summary>
            Adds a node with a message
            </summary>
            <param name="create">Creates the message node</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.OnCompleted">
            <summary>
            Called when the async code has stopped
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.Start">
            <summary>
            Starts the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.AsyncNodeProvider.CompletedSuccessfully">
            <summary>
            true if it completed successfully
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.AsyncNodeProvider.IsRunning">
            <summary>
            true if it's still running
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.ThreadMethod">
            <summary>
            Method that gets called in the worker thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.AsyncNodeProvider.Cancel">
            <summary>
            Cancels the async worker
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.IMDTokenNode">
            <summary>
            Holds a reference with a token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.IMDTokenNode.Reference">
            <summary>
            Gets the reference
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNode">
            <summary>
            A tree node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.TreeView">
            <summary>
            Gets the treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.Parent">
            <summary>
            Gets the parent or null if it is the root node or if it hasn't been inserted into the
            treeview yet.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.Children">
            <summary>
            Gets all children or an empty list if <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.LazyLoading"/> is true. See also
            <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.DataChildren">
            <summary>
            Gets all <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/> children in <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/>. See also
            <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.Data">
            <summary>
            Tree node data
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.LazyLoading">
            <summary>
            Gets/sets lazy loading of children. When true, <see cref="M:dnSpy.Contracts.TreeView.TreeNodeData.CreateChildren"/>
            will get called to load the children. Should only be used by <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Data"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.IsExpanded">
            <summary>
            true if it's expanded
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.IsHidden">
            <summary>
            true if it's hidden
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNode.IsVisible">
            <summary>
            true when this node is not hidden and all parent nodes are expanded and not hidden
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded">
            <summary>
            Forces loading of <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.AddChild(dnSpy.Contracts.TreeView.ITreeNode)">
            <summary>
            Adds a new node to <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.Children"/>
            </summary>
            <param name="node">Node to insert</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.Descendants">
            <summary>
            Gets all descendants
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.DescendantsAndSelf">
            <summary>
            Gets all descendants including itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI">
            <summary>
            Refreshes the UI
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeDataProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/>. Use <see cref="T:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute"/> to
            export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeNodeDataProvider.Create(dnSpy.Contracts.TreeView.TreeNodeDataProviderContext)">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/>
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeDataProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeDataProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeDataProviderMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute.Guid"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeDataProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ExportTreeNodeDataProviderAttribute.Guid">
            <summary>
            Guid of owner <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/> that will receive the new
            <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/> nodes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeNodeGroup">
            <summary>
            Tree node group
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeNodeGroup.Order">
            <summary>
            Order of group relative to other groups
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeView">
            <summary>
            A treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.Guid">
            <summary>
            Guid of this treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.Root">
            <summary>
            Gets the invisible root node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.Create(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/> instance that can be inserted into this, and only
            this, treeview.
            </summary>
            <param name="data">User data</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.UIObject">
            <summary>
            Gets the treeview UI object
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.SelectItems(System.Collections.Generic.IEnumerable{dnSpy.Contracts.TreeView.TreeNodeData})">
            <summary>
            Select items
            </summary>
            <param name="items">Items to select</param>
        </member>
        <member name="E:dnSpy.Contracts.TreeView.ITreeView.SelectionChanged">
            <summary>
            Raised when selection has changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.TreeView.ITreeView.NodeRemoved">
            <summary>
            Raised when a node has been removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.SelectedItem">
            <summary>
            Gets the selected node or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.SelectedItems">
            <summary>
            Gets all selected items
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.ITreeView.TopLevelSelection">
            <summary>
            Gets the selected items which don't have any of their ancestors selected
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.Focus">
            <summary>
            Focuses the treeview, possibly getting keyboard focus
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.ScrollIntoView">
            <summary>
            Scrolls the current node into view
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.RefreshAllNodes">
            <summary>
            Calls all nodes' <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI"/> method
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.FromImplNode(System.Object)">
            <summary>
            Converts the selected item to a <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/>. Should rarely be called.
            </summary>
            <param name="selectedItem">Selected item</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.ToImplNode(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Converts <paramref name="node"/> to the real tree node
            </summary>
            <param name="node">Node</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeView.CollapseUnusedNodes">
            <summary>
            Collapses all unselected nodes
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeViewListener">
            <summary>
            Gets notified by the <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeViewListener.OnEvent(dnSpy.Contracts.TreeView.ITreeView,dnSpy.Contracts.TreeView.TreeViewListenerEventArgs)">
            <summary>
            Called at various times
            </summary>
            <param name="treeView">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.ITreeViewService">
            <summary>
            Treeview manager
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.ITreeViewService.Create(System.Guid,dnSpy.Contracts.TreeView.TreeViewOptions)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/> instance. Its <see cref="M:System.IDisposable.Dispose"/> method
            must be called to destroy it.
            </summary>
            <param name="guid">Guid of treeview</param>
            <param name="options">Treeview options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.Text.ITreeViewNodeTextElementProvider">
            <summary>
            Creates WPF text elements for treeview nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.Text.ITreeViewNodeTextElementProvider.CreateTextElement(dnSpy.Contracts.TreeView.Text.TreeViewNodeClassifierContext,System.String,dnSpy.Contracts.Text.Classification.TextElementFlags)">
            <summary>
            Creates a WPF text element
            </summary>
            <param name="context">Context</param>
            <param name="contentType">Treeview node content type, eg. <see cref="F:dnSpy.Contracts.TreeView.Text.TreeViewContentTypes.TreeViewNodeAssemblyExplorer"/></param>
            <param name="flags">Flags</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.Text.TreeViewContentTypes">
            <summary>
            Treeview content types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.Text.TreeViewContentTypes.TreeViewNode">
            <summary>
            Treeview node
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.Text.TreeViewContentTypes.TreeViewNodeAppSettings">
            <summary>
            Application settings treeview node
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.Text.TreeViewContentTypes.TreeViewNodeAssemblyExplorer">
            <summary>
            Assembly Explorer treeview node
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.Text.TreeViewContentTypes.TreeViewNodeAnalyzer">
            <summary>
            Analyzer treeview node
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.Text.TreeViewNodeClassifierContext">
            <summary>
            Treeview node classifier context passed to <see cref="T:dnSpy.Contracts.Text.Classification.ITextClassifier"/>s that classify treeview nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.Text.TreeViewNodeClassifierContext.TreeView">
            <summary>
            Gets the treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.Text.TreeViewNodeClassifierContext.Node">
            <summary>
            Gets the node to classify
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.Text.TreeViewNodeClassifierContext.IsToolTip">
            <summary>
            true if the content will be shown in a tooltip
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.Text.TreeViewNodeClassifierContext.#ctor(System.String,dnSpy.Contracts.TreeView.ITreeView,dnSpy.Contracts.TreeView.TreeNodeData,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyCollection{dnSpy.Contracts.Text.SpanData{System.Object}})">
            <summary>
            Constructor
            </summary>
            <param name="text">Text to classify</param>
            <param name="treeView">Treeview</param>
            <param name="node">Node to classify</param>
            <param name="isToolTip">true if the content will be shown in a tooltip</param>
            <param name="colorize">true if it should be colorized</param>
            <param name="colors">Default colors or null. It doesn't have to be sorted and elements can overlap. The colors
            must be <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>s or <see cref="T:dnSpy.Contracts.Text.TextColor"/>s</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeNodeData">
            <summary>
            Treenode data base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.Guid">
            <summary>
            Guid of this node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.Text">
            <summary>
            Gets the data shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.ToolTip">
            <summary>
            Gets the data shown in a tooltip
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.TreeNodeGroup">
            <summary>
            Group or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.ExpandedIcon">
            <summary>
            Expanded icon or null to use <see cref="P:dnSpy.Contracts.TreeView.TreeNodeData.Icon"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.SingleClickExpandsChildren">
            <summary>
            true if single clicking on a node expands all its children
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeData.TreeNode">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/> owner instance. Only the treeview may write to this
            property.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.ShowExpander(System.Boolean)">
            <summary>
            Returns true if the expander should be shown
            </summary>
            <param name="defaultValue">Default value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.CreateChildren">
            <summary>
            Called when it's time to create its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.Initialize">
            <summary>
            Called after <see cref="P:dnSpy.Contracts.TreeView.TreeNodeData.TreeNode"/> has been set.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.OnRefreshUI">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.RefreshUI"/> before it invalidates all UI properties
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.Activate">
            <summary>
            Called when the item gets activated, eg. double clicked. Returns true if it was handled,
            false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.OnEnsureChildrenLoaded">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.TreeView.ITreeNode.EnsureChildrenLoaded"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.OnChildrenChanged(dnSpy.Contracts.TreeView.TreeNodeData[],dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Called when the children has changed
            </summary>
            <param name="added">Added nodes</param>
            <param name="removed">Removed nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.OnIsVisibleChanged">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsVisible"/> has changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.OnIsExpandedChanged(System.Boolean)">
            <summary>
            Called when <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsExpanded"/> has changed
            </summary>
            <param name="isExpanded">Value of <see cref="P:dnSpy.Contracts.TreeView.ITreeNode.IsExpanded"/></param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.CanDrag(dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Returns true if the nodes can be dragged
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.StartDrag(System.Windows.DependencyObject,dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Starts the drag and drop operation
            </summary>
            <param name="dragSource">Drag source</param>
            <param name="nodes">Nodes</param>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.Copy(dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Copies nodes
            </summary>
            <param name="nodes">Nodes</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.CanDrop(System.Windows.DragEventArgs,System.Int32)">
            <summary>
            Returns true if drop can execute
            </summary>
            <param name="e">Event args</param>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeData.Drop(System.Windows.DragEventArgs,System.Int32)">
            <summary>
            Drops data
            </summary>
            <param name="e">Event args</param>
            <param name="index">Index</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods.Descendants(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets all descendants
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods.DescendantsAndSelf(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets all descendants including itself
            </summary>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataExtensionMethods.GetAncestorOrSelf``1(dnSpy.Contracts.TreeView.TreeNodeData)">
            <summary>
            Gets the ancestor of a certain type
            </summary>
            <typeparam name="T">Desired type</typeparam>
            <param name="self">This</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeNodeDataProviderContext">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeNodeDataProvider"/> context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeNodeDataProviderContext.Owner">
            <summary>
            Owner of new <see cref="T:dnSpy.Contracts.TreeView.TreeNodeData"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeNodeDataProviderContext.#ctor(dnSpy.Contracts.TreeView.ITreeNode)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Owner</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewConstants">
            <summary>
            Treeview constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.TreeViewConstants.DOCUMENT_TREEVIEW_GUID">
            <summary>Guid of documents treeview</summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewListenerEvent">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeViewListener"/> event
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.TreeView.TreeViewListenerEvent.NodeCreated">
            <summary>
            A new node was created. <see cref="P:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.Argument"/> is a <see cref="T:dnSpy.Contracts.TreeView.ITreeNode"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeViewListener"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.Event">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.Argument">
            <summary>
            Argument, see <see cref="T:dnSpy.Contracts.TreeView.TreeViewListenerEvent"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeViewListenerEventArgs.#ctor(dnSpy.Contracts.TreeView.TreeViewListenerEvent,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="event">Event</param>
            <param name="arg">Argument</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewNodeRemovedEventArgs">
            <summary>
            Node removed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewNodeRemovedEventArgs.Node">
            <summary>
            The node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewNodeRemovedEventArgs.Removed">
            <summary>
            true if <see cref="P:dnSpy.Contracts.TreeView.TreeViewNodeRemovedEventArgs.Node"/> was removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeViewNodeRemovedEventArgs.#ctor(dnSpy.Contracts.TreeView.TreeNodeData,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="node">Node</param>
            <param name="removed">true if it was removed</param>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewOptions">
            <summary>
            Treeview options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.CanDragAndDrop">
            <summary>
            true if drag and drop is possible
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.AllowDrop">
            <summary>
            See <see cref="P:System.Windows.UIElement.AllowDrop"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.IsVirtualizing">
            <summary>
            See <see cref="F:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.VirtualizationMode">
            <summary>
            See <see cref="F:System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.SelectionMode">
            <summary>
            See <see cref="P:System.Windows.Controls.ListBox.SelectionMode"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.IsGridView">
            <summary>
            true if it's a grid view
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.TreeViewListener">
            <summary>
            <see cref="T:dnSpy.Contracts.TreeView.ITreeView"/> listener
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.RootNode">
            <summary>
            The root node or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewOptions.ForegroundBrushResourceKey">
            <summary>
            Foreground brush resource key or null to use the default color
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeViewOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.TreeView.TreeViewSelectionChangedEventArgs">
            <summary>
            Selection changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewSelectionChangedEventArgs.Added">
            <summary>
            Added nodes
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.TreeView.TreeViewSelectionChangedEventArgs.Removed">
            <summary>
            Removed nodes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.TreeView.TreeViewSelectionChangedEventArgs.#ctor(dnSpy.Contracts.TreeView.TreeNodeData[],dnSpy.Contracts.TreeView.TreeNodeData[])">
            <summary>
            Constructor
            </summary>
            <param name="added">Added nodes or null</param>
            <param name="removed">Removed nodes or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Utilities.DelayedAction">
            <summary>
            Executes code after a slight delay
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.DelayedAction.#ctor(System.Int32,System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="milliseconds">Milliseconds to wait</param>
            <param name="action">Code to execute</param>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.DelayedAction.Cancel">
            <summary>
            Cancels the timer
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.DelayedAction.Start">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Utilities.ProfileOptimizationHelper">
            <summary>
            Helper class that calls <see cref="T:System.Runtime.ProfileOptimization"/> methods
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.ProfileOptimizationHelper.StartProfile(System.String)">
            <summary>
            Starts a profile by calling <see cref="M:System.Runtime.ProfileOptimization.StartProfile(System.String)"/>, but only if it's
            the first time this method has been called with the same input.
            </summary>
            <param name="type">Unique string that is used as a key to check whether we should start profiling the code</param>
        </member>
        <member name="T:dnSpy.Contracts.Utilities.UIUtilities">
            <summary>
            UI utilities
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.UIUtilities.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent
            </summary>
            <param name="depo">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.UIUtilities.IsLeftDoubleClick``1(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Checks if it's left double click
            </summary>
            <typeparam name="T">Type of element</typeparam>
            <param name="view">View</param>
            <param name="e">Event args</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.UIUtilities.EscapeMenuItemHeader(System.String)">
            <summary>
            Escapes text for <see cref="T:System.Windows.Controls.MenuItem"/> headers
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.UIUtilities.FocusSelector(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Gives a <see cref="T:System.Windows.Controls.Primitives.Selector"/> focus
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:dnSpy.Contracts.Utilities.UIUtilities.Focus(System.Windows.IInputElement,System.Action)">
            <summary>
            Focuses <paramref name="element"/>
            </summary>
            <param name="element">Element to focus</param>
            <param name="calledAfterFocus">Delegate that gets called once the element has gotten focus. Can be null.</param>
        </member>
    </members>
</doc>
