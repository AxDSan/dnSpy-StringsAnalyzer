<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecompilerSettings_AddUsingDeclarations" xml:space="preserve">
    <value>添加using声明</value>
  </data>
  <data name="DecompilerSettings_AllowFieldInitializers" xml:space="preserve">
    <value>允许字段初始值设定项语法</value>
  </data>
  <data name="DecompilerSettings_AlwaysGenerateExceptionVariableForCatchBlocksUnlessTypeIsObject" xml:space="preserve">
    <value>在catch块中总是生成异常变量，除非类型为Object</value>
  </data>
  <data name="DecompilerSettings_DecompilationOrder" xml:space="preserve">
    <value>反编译顺序</value>
  </data>
  <data name="DecompilerSettings_DecompileAnonMethods" xml:space="preserve">
    <value>反编译匿名方法/lambda方法</value>
  </data>
  <data name="DecompilerSettings_DecompileAsyncMethods" xml:space="preserve">
    <value>反编译异步方法（async/await）</value>
  </data>
  <data name="DecompilerSettings_DecompileAutoEvents" xml:space="preserve">
    <value>反编译自动生成的事件</value>
  </data>
  <data name="DecompilerSettings_DecompileAutoProps" xml:space="preserve">
    <value>反编译自动生成的属性</value>
  </data>
  <data name="DecompilerSettings_DecompileEnumerators" xml:space="preserve">
    <value>反编译枚举器（yield return）</value>
  </data>
  <data name="DecompilerSettings_DecompileExprTrees" xml:space="preserve">
    <value>反编译表达式树（Expression Trees）</value>
  </data>
  <data name="DecompilerSettings_DecompileForeachStatements" xml:space="preserve">
    <value>反编译foreach语句</value>
  </data>
  <data name="DecompilerSettings_DecompileLockStatements" xml:space="preserve">
    <value>反编译lock语句</value>
  </data>
  <data name="DecompilerSettings_DecompileQueryExpr" xml:space="preserve">
    <value>反编译查询表达式</value>
  </data>
  <data name="DecompilerSettings_DecompileSwitchOnString" xml:space="preserve">
    <value>反编译string类型的switch语句</value>
  </data>
  <data name="DecompilerSettings_DecompileUsingStatements" xml:space="preserve">
    <value>反编译using语句</value>
  </data>
  <data name="DecompilerSettings_FullyQualifyAllTypes" xml:space="preserve">
    <value>将命名空间名添加到所有类型</value>
  </data>
  <data name="DecompilerSettings_FullyQualifyAmbiguousTypeNames" xml:space="preserve">
    <value>将命名空间名添加到具有相同名称的类型</value>
  </data>
  <data name="DecompilerSettings_HexadecimalNumbers" xml:space="preserve">
    <value>十六进制数</value>
  </data>
  <data name="DecompilerSettings_IntroduceIncrementAndDecrement" xml:space="preserve">
    <value>使用增量和减量运算符</value>
  </data>
  <data name="DecompilerSettings_MakeAssignmentExpressions" xml:space="preserve">
    <value>在流程控制语句中使用赋值表达式（如while ((count = Do()) != 0) ;）</value>
  </data>
  <data name="DecompilerSettings_MaxArrayElements" xml:space="preserve">
    <value>要显示的数组元素最大数量</value>
  </data>
  <data name="DecompilerSettings_MaxStringLength" xml:space="preserve">
    <value>最大字符串长度</value>
  </data>
  <data name="DecompilerSettings_MemberAddPrivateModifier" xml:space="preserve">
    <value>添加private标识符到类成员</value>
  </data>
  <data name="DecompilerSettings_ObjectOrCollectionInitializers" xml:space="preserve">
    <value>反编译对象或集合的初始值设定项</value>
  </data>
  <data name="DecompilerSettings_OneCustomAttributePerLine" xml:space="preserve">
    <value>每行显示一个自定义特性</value>
  </data>
  <data name="DecompilerSettings_RemoveEmptyDefaultCtors" xml:space="preserve">
    <value>移除空的默认构造函数</value>
  </data>
  <data name="DecompilerSettings_RemoveNewDelegateClass" xml:space="preserve">
    <value>将 “new delegate-class(xxx)” 替换为 “xxx”</value>
  </data>
  <data name="DecompilerSettings_ShowCompilerGeneratedTypes" xml:space="preserve">
    <value>显示编译器生成的隐藏类型和方法</value>
  </data>
  <data name="DecompilerSettings_ShowILComments" xml:space="preserve">
    <value>显示IL操作码注释</value>
  </data>
  <data name="DecompilerSettings_ShowILInstrBytes" xml:space="preserve">
    <value>显示IL指令字节</value>
  </data>
  <data name="DecompilerSettings_ShowPdbInfo" xml:space="preserve">
    <value>显示行号和文件名（如果可用）</value>
  </data>
  <data name="DecompilerSettings_ShowTokensRvasOffsets" xml:space="preserve">
    <value>显示标记，RVA和文件偏移</value>
  </data>
  <data name="DecompilerSettings_ShowXMLDocComments" xml:space="preserve">
    <value>在反编译的代码中显示 XML 文档</value>
  </data>
  <data name="DecompilerSettings_SortCustomAttributes" xml:space="preserve">
    <value>排序自定义特性</value>
  </data>
  <data name="DecompilerSettings_SortMethods" xml:space="preserve">
    <value>排序方法、 字段、 属性、 事件和类型</value>
  </data>
  <data name="DecompilerSettings_SortSystemFirst" xml:space="preserve">
    <value>在排序using时将System系列置于首位</value>
  </data>
  <data name="DecompilerSettings_TypeAddInternalModifier" xml:space="preserve">
    <value>添加internal标识符到类</value>
  </data>
  <data name="DecompilerSettings_UseLocalNameFromSyms" xml:space="preserve">
    <value>如果可用，使用debug symbols声明的变量名称</value>
  </data>
  <data name="DecompilerSettings_UseSourceCodeOrder" xml:space="preserve">
    <value>按源代码顺序排序成员</value>
  </data>
</root>