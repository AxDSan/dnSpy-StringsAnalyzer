<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecompilerSettings_AddUsingDeclarations" xml:space="preserve">
    <value>Añadir declaraciones using</value>
  </data>
  <data name="DecompilerSettings_AllowFieldInitializers" xml:space="preserve">
    <value>Permiten a inicializadores de campo</value>
  </data>
  <data name="DecompilerSettings_AlwaysGenerateExceptionVariableForCatchBlocksUnlessTypeIsObject" xml:space="preserve">
    <value>Genere siempre variables de excepción en bloques catch a menos que el tipo sea Object</value>
  </data>
  <data name="DecompilerSettings_DecompilationOrder" xml:space="preserve">
    <value>Orden de descompilación</value>
  </data>
  <data name="DecompilerSettings_DecompileAnonMethods" xml:space="preserve">
    <value>Descompilar métodos anónimos/lambdas</value>
  </data>
  <data name="DecompilerSettings_DecompileAsyncMethods" xml:space="preserve">
    <value>Descompilar métodos asincrónicos (async/await)</value>
  </data>
  <data name="DecompilerSettings_DecompileAutoEvents" xml:space="preserve">
    <value>Descompilar eventos automáticamente</value>
  </data>
  <data name="DecompilerSettings_DecompileAutoProps" xml:space="preserve">
    <value>Descompilar propiedades automáticamente</value>
  </data>
  <data name="DecompilerSettings_DecompileEnumerators" xml:space="preserve">
    <value>Descompilar enumeradores (retorno yield)</value>
  </data>
  <data name="DecompilerSettings_DecompileExprTrees" xml:space="preserve">
    <value>Descompilar árboles de expresión</value>
  </data>
  <data name="DecompilerSettings_DecompileForeachStatements" xml:space="preserve">
    <value>Descompilar declaraciones foreach</value>
  </data>
  <data name="DecompilerSettings_DecompileLockStatements" xml:space="preserve">
    <value>Descompilar declaraciones de bloqueo</value>
  </data>
  <data name="DecompilerSettings_DecompileQueryExpr" xml:space="preserve">
    <value>Descompilar expresiones de consulta</value>
  </data>
  <data name="DecompilerSettings_DecompileSwitchOnString" xml:space="preserve">
    <value>Descompilar interruptor de cadena</value>
  </data>
  <data name="DecompilerSettings_DecompileUsingStatements" xml:space="preserve">
    <value>Descompilar sentencias using</value>
  </data>
  <data name="DecompilerSettings_FullyQualifyAllTypes" xml:space="preserve">
    <value>Agregar espacios de nombre a todos los tipos</value>
  </data>
  <data name="DecompilerSettings_FullyQualifyAmbiguousTypeNames" xml:space="preserve">
    <value>Añadir un espacio de nombre a los tipos con el mismo nombre</value>
  </data>
  <data name="DecompilerSettings_HexadecimalNumbers" xml:space="preserve">
    <value>Números hexadecimales</value>
  </data>
  <data name="DecompilerSettings_IntroduceIncrementAndDecrement" xml:space="preserve">
    <value>Uso de incremento y decremento de operadores</value>
  </data>
  <data name="DecompilerSettings_MakeAssignmentExpressions" xml:space="preserve">
    <value>Asignación de expresiones tales como while ((Count = Do())! = 0);</value>
  </data>
  <data name="DecompilerSettings_MaxArrayElements" xml:space="preserve">
    <value>Número máximo de elementos de matriz para mostrar</value>
  </data>
  <data name="DecompilerSettings_MaxStringLength" xml:space="preserve">
    <value>Longitud máxima de cadena</value>
  </data>
  <data name="DecompilerSettings_MemberAddPrivateModifier" xml:space="preserve">
    <value>Añadir el modificador 'private' para miembros type</value>
  </data>
  <data name="DecompilerSettings_ObjectOrCollectionInitializers" xml:space="preserve">
    <value>Descompilar los inicializadores de objeto o colección</value>
  </data>
  <data name="DecompilerSettings_OneCustomAttributePerLine" xml:space="preserve">
    <value>Mostrar un atributo personalizado por línea</value>
  </data>
  <data name="DecompilerSettings_RemoveEmptyDefaultCtors" xml:space="preserve">
    <value>Quitar los constructores predeterminados de vacío</value>
  </data>
  <data name="DecompilerSettings_RemoveNewDelegateClass" xml:space="preserve">
    <value>Reemplazar 'delegate-class(xxx) nuevo' con 'xxx'</value>
  </data>
  <data name="DecompilerSettings_ShowCompilerGeneratedTypes" xml:space="preserve">
    <value>Mostrar los tipos y métodos ocultos generados por el compilador</value>
  </data>
  <data name="DecompilerSettings_ShowILComments" xml:space="preserve">
    <value>Mostrar los comentarios de opcode IL</value>
  </data>
  <data name="DecompilerSettings_ShowILInstrBytes" xml:space="preserve">
    <value>Mostrar las instrucciones bytes IL</value>
  </data>
  <data name="DecompilerSettings_ShowPdbInfo" xml:space="preserve">
    <value>Mostrar números de línea y nombres de archivos si están disponibles</value>
  </data>
  <data name="DecompilerSettings_ShowTokensRvasOffsets" xml:space="preserve">
    <value>Mostrar fichas, RVAs y compensaciones de archivo</value>
  </data>
  <data name="DecompilerSettings_ShowXMLDocComments" xml:space="preserve">
    <value>Mostrar la documentación XML en código descompilado</value>
  </data>
  <data name="DecompilerSettings_SortCustomAttributes" xml:space="preserve">
    <value>Ordenar atributos personalizados</value>
  </data>
  <data name="DecompilerSettings_SortMethods" xml:space="preserve">
    <value>Ordenar los métodos, campos, propiedades, eventos y tipos</value>
  </data>
  <data name="DecompilerSettings_SortSystemFirst" xml:space="preserve">
    <value>Colocar la directiva 'using System' en primer al ordenar los using´s</value>
  </data>
  <data name="DecompilerSettings_TypeAddInternalModifier" xml:space="preserve">
    <value>Agregue el modificador 'internal' a tipos</value>
  </data>
  <data name="DecompilerSettings_UseLocalNameFromSyms" xml:space="preserve">
    <value>Utilice nombres de variables de símbolos de depuración, si está disponible</value>
  </data>
  <data name="DecompilerSettings_UseSourceCodeOrder" xml:space="preserve">
    <value>Ordene miembros en orden de código fuente</value>
  </data>
</root>