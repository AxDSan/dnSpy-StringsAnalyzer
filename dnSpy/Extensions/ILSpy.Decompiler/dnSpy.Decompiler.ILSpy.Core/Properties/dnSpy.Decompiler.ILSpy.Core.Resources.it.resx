<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecompilerSettings_AddUsingDeclarations" xml:space="preserve">
    <value>Aggiungere mediante dichiarazioni</value>
  </data>
  <data name="DecompilerSettings_AllowFieldInitializers" xml:space="preserve">
    <value>Consentire gli inizializzatori di campo</value>
  </data>
  <data name="DecompilerSettings_AlwaysGenerateExceptionVariableForCatchBlocksUnlessTypeIsObject" xml:space="preserve">
    <value>Generare sempre le variabili di eccezione in blocchi catch a meno che tipo non sia un oggetto</value>
  </data>
  <data name="DecompilerSettings_DecompilationOrder" xml:space="preserve">
    <value>Ordine di decompilazione</value>
  </data>
  <data name="DecompilerSettings_DecompileAnonMethods" xml:space="preserve">
    <value>Decompila metodi/lambda anonimi</value>
  </data>
  <data name="DecompilerSettings_DecompileAsyncMethods" xml:space="preserve">
    <value>Decompila metodi async (async/await)</value>
  </data>
  <data name="DecompilerSettings_DecompileAutoEvents" xml:space="preserve">
    <value>Decompila gli eventi automatici</value>
  </data>
  <data name="DecompilerSettings_DecompileAutoProps" xml:space="preserve">
    <value>Decompila proprietà automatiche</value>
  </data>
  <data name="DecompilerSettings_DecompileEnumerators" xml:space="preserve">
    <value>Decompila gli enumeratori (yield return)</value>
  </data>
  <data name="DecompilerSettings_DecompileExprTrees" xml:space="preserve">
    <value>Decompila alberi espressione</value>
  </data>
  <data name="DecompilerSettings_DecompileForeachStatements" xml:space="preserve">
    <value>Decompila istruzioni foreach</value>
  </data>
  <data name="DecompilerSettings_DecompileLockStatements" xml:space="preserve">
    <value>Decompila istruzioni lock</value>
  </data>
  <data name="DecompilerSettings_DecompileQueryExpr" xml:space="preserve">
    <value>Decompila espressioni query</value>
  </data>
  <data name="DecompilerSettings_DecompileSwitchOnString" xml:space="preserve">
    <value>Decompila switch sulla stringa</value>
  </data>
  <data name="DecompilerSettings_DecompileUsingStatements" xml:space="preserve">
    <value>Decompila usando istruzioni</value>
  </data>
  <data name="DecompilerSettings_FullyQualifyAllTypes" xml:space="preserve">
    <value>Aggiungi spazi dei nomi per tutti i tipi</value>
  </data>
  <data name="DecompilerSettings_FullyQualifyAmbiguousTypeNames" xml:space="preserve">
    <value>Aggiungi uno spazio dei nomi per i tipi con lo stesso nome</value>
  </data>
  <data name="DecompilerSettings_HexadecimalNumbers" xml:space="preserve">
    <value>Numeri esadecimali</value>
  </data>
  <data name="DecompilerSettings_IntroduceIncrementAndDecrement" xml:space="preserve">
    <value>Utilizza operatori di incremento e decremento</value>
  </data>
  <data name="DecompilerSettings_MakeAssignmentExpressions" xml:space="preserve">
    <value>Utilizza le espressioni di assegnazione così come nel while ((count = Do()) != 0) ;</value>
  </data>
  <data name="DecompilerSettings_MaxArrayElements" xml:space="preserve">
    <value>Numero massimo di elementi della matrice da mostrare</value>
  </data>
  <data name="DecompilerSettings_MaxStringLength" xml:space="preserve">
    <value>Lunghezza massima della stringa</value>
  </data>
  <data name="DecompilerSettings_MemberAddPrivateModifier" xml:space="preserve">
    <value>Aggiungi il modificatore 'private' ai membri di tipo</value>
  </data>
  <data name="DecompilerSettings_ObjectOrCollectionInitializers" xml:space="preserve">
    <value>Decompila oggetto o inizializzatori di collezione</value>
  </data>
  <data name="DecompilerSettings_OneCustomAttributePerLine" xml:space="preserve">
    <value>Mostra un attributo personalizzato per riga</value>
  </data>
  <data name="DecompilerSettings_RemoveEmptyDefaultCtors" xml:space="preserve">
    <value>Rimuovi i costruttori predefiniti vuoti</value>
  </data>
  <data name="DecompilerSettings_RemoveNewDelegateClass" xml:space="preserve">
    <value>Sostituire 'nuova delegate-class(xxx)' con 'xxx'</value>
  </data>
  <data name="DecompilerSettings_ShowCompilerGeneratedTypes" xml:space="preserve">
    <value>Visualizza i metodi e i tipi nascosti generati dal compilatore</value>
  </data>
  <data name="DecompilerSettings_ShowILComments" xml:space="preserve">
    <value>Visualizza il commento sul codice operativo IL</value>
  </data>
  <data name="DecompilerSettings_ShowILInstrBytes" xml:space="preserve">
    <value>Visualizza i byte di instruzione del codie IL</value>
  </data>
  <data name="DecompilerSettings_ShowPdbInfo" xml:space="preserve">
    <value>Mostra i numeri di linea ed i nomi dei file, se disponibili</value>
  </data>
  <data name="DecompilerSettings_ShowTokensRvasOffsets" xml:space="preserve">
    <value>Visualizza token, RVA e offset del file</value>
  </data>
  <data name="DecompilerSettings_ShowXMLDocComments" xml:space="preserve">
    <value>Visualizza documentazione XML nel codice decompilato</value>
  </data>
  <data name="DecompilerSettings_SortCustomAttributes" xml:space="preserve">
    <value>Ordina attributi personalizzati</value>
  </data>
  <data name="DecompilerSettings_SortMethods" xml:space="preserve">
    <value>Ordina metodi, campi, proprietà, eventi e tipi</value>
  </data>
  <data name="DecompilerSettings_SortSystemFirst" xml:space="preserve">
    <value>Porta le direttive 'System' al primo posto quando si usa l'ordinamento</value>
  </data>
  <data name="DecompilerSettings_TypeAddInternalModifier" xml:space="preserve">
    <value>Aggiungi il modificatore 'internal' ai tipi</value>
  </data>
  <data name="DecompilerSettings_UseLocalNameFromSyms" xml:space="preserve">
    <value>Utilizza nomi di variabili da simboli di debug, se disponibili</value>
  </data>
  <data name="DecompilerSettings_UseSourceCodeOrder" xml:space="preserve">
    <value>Ordina i membri nell'ordine del codice sorgente</value>
  </data>
</root>