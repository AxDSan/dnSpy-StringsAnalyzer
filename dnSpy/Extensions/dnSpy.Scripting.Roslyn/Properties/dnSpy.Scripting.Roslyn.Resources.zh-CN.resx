<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompilationAdditionalError" xml:space="preserve">
    <value>+ 额外的 {0} 个错误</value>
  </data>
  <data name="CompilationAdditionalErrors" xml:space="preserve">
    <value>+ 额外的 {0} 个错误</value>
  </data>
  <data name="CopyCommand" xml:space="preserve">
    <value>复制(_Y)</value>
  </data>
  <data name="CutCommand" xml:space="preserve">
    <value>剪切(_T)</value>
  </data>
  <data name="HelpAltDown" xml:space="preserve">
    <value>显示下一命令</value>
  </data>
  <data name="HelpAltUp" xml:space="preserve">
    <value>显示前一命令</value>
  </data>
  <data name="HelpCtrlA" xml:space="preserve">
    <value>选择输入文本。再按则选择全部文件</value>
  </data>
  <data name="HelpCtrlAltDown" xml:space="preserve">
    <value>显示匹配当前输入文本的下一命令</value>
  </data>
  <data name="HelpCtrlAltUp" xml:space="preserve">
    <value>显示匹配当前输入文本的前一命令</value>
  </data>
  <data name="HelpCtrlEnter" xml:space="preserve">
    <value>执行命令</value>
  </data>
  <data name="HelpEnter" xml:space="preserve">
    <value>执行命令</value>
  </data>
  <data name="HelpEscape" xml:space="preserve">
    <value>清除当前输入</value>
  </data>
  <data name="HelpKeyboardShortcuts" xml:space="preserve">
    <value>快捷键：</value>
  </data>
  <data name="HelpReplCommands" xml:space="preserve">
    <value>REPL 命令：</value>
  </data>
  <data name="HelpScriptDirectives" xml:space="preserve">
    <value>脚本指令：</value>
  </data>
  <data name="HelpScriptDirective_load" xml:space="preserve">
    <value>加载并执行脚本，#load "myscript.csx"</value>
  </data>
  <data name="HelpScriptDirective_r" xml:space="preserve">
    <value>添加引用，可以是磁盘上的程序集或是文件路径，也可以是相对于 dnSpy 的路径，或是用户目录，#r "myfile.dll"</value>
  </data>
  <data name="HelpShiftEnter" xml:space="preserve">
    <value>插入新行</value>
  </data>
  <data name="HelpString" xml:space="preserve">
    <value>键入 "#help" 以获取更多信息。</value>
  </data>
  <data name="LoadingContextFromFile" xml:space="preserve">
    <value>从 '{0}' 加载上下文。</value>
  </data>
  <data name="PasteCommand" xml:space="preserve">
    <value>粘贴(_P)</value>
  </data>
  <data name="Plugin_ShortDescription" xml:space="preserve">
    <value>脚本</value>
  </data>
  <data name="ResettingExecutionEngine" xml:space="preserve">
    <value>重置执行引擎。</value>
  </data>
  <data name="Script_ToolTip_ClearScreen" xml:space="preserve">
    <value>清空屏幕</value>
  </data>
  <data name="Script_ToolTip_HistoryNext" xml:space="preserve">
    <value>后一条历史记录</value>
  </data>
  <data name="Script_ToolTip_HistoryPrevious" xml:space="preserve">
    <value>前一条历史记录</value>
  </data>
  <data name="Script_ToolTip_Reset" xml:space="preserve">
    <value>重置</value>
  </data>
  <data name="ShortCutKeyAltDown" xml:space="preserve">
    <value>Alt + ↓</value>
  </data>
  <data name="ShortCutKeyAltUp" xml:space="preserve">
    <value>Alt + ↑</value>
  </data>
  <data name="ShortCutKeyCtrlA" xml:space="preserve">
    <value>Ctrl+A</value>
  </data>
  <data name="ShortCutKeyCtrlAltDown" xml:space="preserve">
    <value>Ctrl+Alt+↓</value>
  </data>
  <data name="ShortCutKeyCtrlAltN" xml:space="preserve">
    <value>Ctrl+Alt+N</value>
  </data>
  <data name="ShortCutKeyCtrlAltUp" xml:space="preserve">
    <value>Ctrl+Alt+↑</value>
  </data>
  <data name="ShortCutKeyCtrlC" xml:space="preserve">
    <value>Ctrl+C</value>
  </data>
  <data name="ShortCutKeyCtrlEnter" xml:space="preserve">
    <value>Ctrl+Enter</value>
  </data>
  <data name="ShortCutKeyCtrlV" xml:space="preserve">
    <value>Ctrl+V</value>
  </data>
  <data name="ShortCutKeyCtrlX" xml:space="preserve">
    <value>Ctrl+X</value>
  </data>
  <data name="ShortCutKeyEnter" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="ShortCutKeyEscape" xml:space="preserve">
    <value>Esc</value>
  </data>
  <data name="ShortCutKeyShiftEnter" xml:space="preserve">
    <value>Shift+Enter</value>
  </data>
  <data name="Window_CSharp" xml:space="preserve">
    <value>C# 交互</value>
  </data>
  <data name="HelpClearDescription" xml:space="preserve">
    <value>清空脚本编辑器</value>
  </data>
  <data name="HelpHelpDescription" xml:space="preserve">
    <value>显示帮助</value>
  </data>
  <data name="HelpResetDescription" xml:space="preserve">
    <value>重置执行环境</value>
  </data>
  <data name="ClearScreenCommand" xml:space="preserve">
    <value>清空屏幕</value>
  </data>
  <data name="ShortCutKeyCtrlL" xml:space="preserve">
    <value>Ctrl+L</value>
  </data>
  <data name="Window_VisualBasic" xml:space="preserve">
    <value>Visual Basic 交互窗口</value>
  </data>
  <data name="ShortCutKeyCtrlAltI" xml:space="preserve">
    <value>Ctrl+Alt+I</value>
  </data>
  <data name="CopyCodeCommand" xml:space="preserve">
    <value>复制代码</value>
  </data>
  <data name="ShortCutKeyCtrlShiftC" xml:space="preserve">
    <value>Ctrl+Shift+C</value>
  </data>
  <data name="ShortCutKeyCtrlECtrlW" xml:space="preserve">
    <value>Ctrl+E, Ctrl+W</value>
  </data>
  <data name="ShowLineNumbersCommand" xml:space="preserve">
    <value>显示行号</value>
  </data>
  <data name="WordWrapHeader" xml:space="preserve">
    <value>自动换行(_W)</value>
  </data>
  <data name="Repl_WordWrap_ToolTip" xml:space="preserve">
    <value>切换自动换行</value>
  </data>
  <data name="AllFiles" xml:space="preserve">
    <value>所有文件</value>
  </data>
  <data name="Repl_Save_ToolTip" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="TextFiles" xml:space="preserve">
    <value>文本文件</value>
  </data>
  <data name="SaveCodeCommand" xml:space="preserve">
    <value>保存代码...</value>
  </data>
  <data name="SaveCommand" xml:space="preserve">
    <value>保存...</value>
  </data>
  <data name="ShortCutKeyCtrlS" xml:space="preserve">
    <value>Ctrl+S</value>
  </data>
  <data name="ShortCutKeyCtrlShiftS" xml:space="preserve">
    <value>Ctrl+Shift+S</value>
  </data>
  <data name="CSharpScriptFiles" xml:space="preserve">
    <value>C#脚本文件</value>
  </data>
  <data name="VisualBasicScriptFiles" xml:space="preserve">
    <value>Visual Basic脚本文件</value>
  </data>
</root>