<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DbgAsm_Args" xml:space="preserve">
    <value>A_rguments</value>
  </data>
  <data name="DbgAsm_BreakAt" xml:space="preserve">
    <value>_S'arrêter à</value>
  </data>
  <data name="DbgAsm_Host" xml:space="preserve">
    <value>_Hôte</value>
  </data>
  <data name="DbgAsm_HostArgs" xml:space="preserve">
    <value>Arguments de l'_hôte</value>
  </data>
  <data name="DbgAsm_WorkingDir" xml:space="preserve">
    <value>Répertoire de _travail</value>
  </data>
  <data name="DbgBreak_CreateProcessEvent" xml:space="preserve">
    <value>CreateProcess</value>
  </data>
  <data name="DbgBreak_Dont" xml:space="preserve">
    <value>Ne pas s'arrêter</value>
  </data>
  <data name="DbgBreak_EntryPoint" xml:space="preserve">
    <value>Point d’entrée</value>
  </data>
  <data name="Error_CouldNotFindDotNetCoreHost" xml:space="preserve">
    <value>Impossible de trouver l'hôte .NET Core "{0}"</value>
  </data>
  <data name="Error_CouldNotStartDebugger" xml:space="preserve">
    <value>N'a pas pu démarrer le débogueur. {0}</value>
  </data>
  <data name="Error_CouldNotStartDebuggerCheckAccessToFile" xml:space="preserve">
    <value>N'a pas pu démarrer le débogueur. Assurez-vous que vous avez accès au fichier "{0}" Erreur : {1}</value>
  </data>
  <data name="Error_CouldNotStartDebuggerRequireAdminPrivLvl" xml:space="preserve">
    <value>N'a pas pu démarrer le débogueur. Le programme débogué requiert des privilèges d’administrateur. Redémarrez dnSpy avec les droits d’administrateur, puis réessayez.</value>
  </data>
  <data name="Error_FileDoesNotExist" xml:space="preserve">
    <value>Le fichier n’existe pas</value>
  </data>
  <data name="Error_MissingFilename" xml:space="preserve">
    <value>Nom de fichier manquant</value>
  </data>
  <data name="Plugin_ShortDescription" xml:space="preserve">
    <value>Débogueur ({0})</value>
  </data>
  <data name="Thread_UserState_Background" xml:space="preserve">
    <value>Arrière plan</value>
  </data>
  <data name="Thread_UserState_Stopped" xml:space="preserve">
    <value>Arrêté</value>
  </data>
  <data name="Thread_UserState_StopRequested" xml:space="preserve">
    <value>StopRequested</value>
  </data>
  <data name="Thread_UserState_Suspended" xml:space="preserve">
    <value>Suspendu</value>
  </data>
  <data name="Thread_UserState_SuspendRequested" xml:space="preserve">
    <value>SuspendRequested</value>
  </data>
  <data name="Thread_UserState_ThreadPool" xml:space="preserve">
    <value>ThreadPool</value>
  </data>
  <data name="Thread_UserState_UnsafePoint" xml:space="preserve">
    <value>UnsafePoint</value>
  </data>
  <data name="Thread_UserState_Unstarted" xml:space="preserve">
    <value>Non démarré</value>
  </data>
  <data name="Thread_UserState_WaitSleepJoin" xml:space="preserve">
    <value>WaitSleepJoin</value>
  </data>
  <data name="UseDnSpy64ExeToDebug32" xml:space="preserve">
    <value>Utilisez dnSpy 32-bit pour les exécutables 32-bit.</value>
  </data>
  <data name="UseDnSpyExeToDebug64" xml:space="preserve">
    <value>Utilisez dnSpy 64-bit pour les exécutables 64-bit.</value>
  </data>
  <data name="ExceptionMessageIsNull" xml:space="preserve">
    <value>« &lt;no message exception&gt; »</value>
  </data>
  <data name="Error_CouldNotStartDebugger2" xml:space="preserve">
    <value>Ne peut pas démarrer le débogueur. Erreur : {0}</value>
  </data>
  <data name="Error_CouldNotAttachToProcess" xml:space="preserve">
    <value>Impossible de s'attacher au processus {0}</value>
  </data>
  <data name="Error_ProcessIsAlreadyBeingDebugged" xml:space="preserve">
    <value>Un autre processus débogue déjà le processus {0}</value>
  </data>
  <data name="StackFrame_NativeFrame" xml:space="preserve">
    <value>Frame native {0}</value>
  </data>
  <data name="StackFrame_AppdomainTransition" xml:space="preserve">
    <value>Transition d'AppDomain</value>
  </data>
  <data name="StackFrame_ClassInit" xml:space="preserve">
    <value>Initialisation de classe</value>
  </data>
  <data name="StackFrame_Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="StackFrame_FunctionEvaluation" xml:space="preserve">
    <value>Évaluation de la fonction</value>
  </data>
  <data name="StackFrame_InternalCall" xml:space="preserve">
    <value>Appel interne</value>
  </data>
  <data name="StackFrame_InternalFrame" xml:space="preserve">
    <value>Frame interne {0}</value>
  </data>
  <data name="StackFrame_JITCompilation" xml:space="preserve">
    <value>Compilation JIT</value>
  </data>
  <data name="StackFrame_LightweightFunction" xml:space="preserve">
    <value>Fonction légère</value>
  </data>
  <data name="StackFrame_ManagedToNativeTransition" xml:space="preserve">
    <value>Passage de managé à natif</value>
  </data>
  <data name="StackFrame_NativeToManagedTransition" xml:space="preserve">
    <value>Passage de natif à managé</value>
  </data>
  <data name="StackFrame_Security" xml:space="preserve">
    <value>Sécurité</value>
  </data>
  <data name="GlyphToolTip_IL_offset_0" xml:space="preserve">
    <value>Offset IL {0}</value>
  </data>
  <data name="GlyphToolTip_line_0_character_1" xml:space="preserve">
    <value>ligne {0} caractère {1}</value>
  </data>
  <data name="GlyphToolTip_NativeAddress" xml:space="preserve">
    <value>adresse {0}</value>
  </data>
  <data name="Error_CouldNotSetNextStatement" xml:space="preserve">
    <value>Impossible de définir l'instruction suivante.</value>
  </data>
  <data name="Error_CouldNotBreakProcess" xml:space="preserve">
    <value>Impossible d'arrêter le processus. Erreur : 0x{0:X8}</value>
  </data>
  <data name="InternalDebuggerError" xml:space="preserve">
    <value>Erreur interne de débogueur</value>
  </data>
  <data name="Error_CLRDebuggerErrorOccurred" xml:space="preserve">
    <value>Une erreur du débogueur CLR s'est produite. Terminez le processus débogué et réessayez. HR : 0x{0:X8} Erreur : 0x{1:X8}</value>
  </data>
  <data name="DbgAsm_UseHostExecutable" xml:space="preserve">
    <value>Utiliser l'exécutable hôte</value>
  </data>
  <data name="DbgAsm_Executable" xml:space="preserve">
    <value>E_xécutable</value>
  </data>
</root>