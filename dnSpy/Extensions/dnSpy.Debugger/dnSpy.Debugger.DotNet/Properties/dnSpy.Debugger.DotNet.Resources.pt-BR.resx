<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddClassBreakpointCommand" xml:space="preserve">
    <value>Adicionar interrupção de Método</value>
  </data>
  <data name="AddClassTracepointCommand" xml:space="preserve">
    <value>Adicionar ponto de rastreamento de Classe</value>
  </data>
  <data name="AddMethodBreakpointCommand" xml:space="preserve">
    <value>Adicionar interrupção de Método</value>
  </data>
  <data name="BreakWhenExceptionThrownCommand" xml:space="preserve">
    <value>Parar quando acionado</value>
  </data>
  <data name="Button_Cancel" xml:space="preserve">
    <value>_Cancelar</value>
  </data>
  <data name="CancelLoadingModulesMessage" xml:space="preserve">
    <value>Cancelar carregamento de módulos?</value>
  </data>
  <data name="CantEvaluateWhenCurrentFrameIsNative" xml:space="preserve">
    <value>Não é possível avaliar expressões quando a estrutura de pilha atual é a estrutura de pilha nativa</value>
  </data>
  <data name="DecompilerGeneratedVariablesCanNotBeEvaluated" xml:space="preserve">
    <value>As variáveis geradas pelo descompilador não podem ser avaliadas</value>
  </data>
  <data name="GlyphToolTip_IL_offset_0" xml:space="preserve">
    <value>IL offset {0}</value>
  </data>
  <data name="GlyphToolTip_line_0_character_1" xml:space="preserve">
    <value>linha {0} caractere {1}</value>
  </data>
  <data name="InternalDebuggerError" xml:space="preserve">
    <value>Erro interno do depurador</value>
  </data>
  <data name="LoadModule_InfoText" xml:space="preserve">
    <value>Carregando o módulo. Se é um módulo grande, isso pode demorar um pouco.</value>
  </data>
  <data name="LoadModule_Title" xml:space="preserve">
    <value>Carregando Módulos Dinâmicos</value>
  </data>
  <data name="Method_X_ThrewAnExceptionOfType_Y" xml:space="preserve">
    <value>'{0}' lançou uma exceção do tipo '{1}'</value>
  </data>
  <data name="ModuleMetadataNotFoundOrInvalid" xml:space="preserve">
    <value>Não foi possível encontrar os metadados do módulo ou eles são inválidos</value>
  </data>
  <data name="Module_BreakProcessBeforeLoadingDynamicModules" xml:space="preserve">
    <value>Você deve quebrar o processo antes que módulos dinâmicos possam ser carregados.</value>
  </data>
  <data name="NoDotNetObjectFoundAtAddress" xml:space="preserve">
    <value>Nenhum objeto encontrado no endereço específicado</value>
  </data>
  <data name="NoExceptionOnTheCurrentThread" xml:space="preserve">
    <value>Não existe nenhuma exceção na thread atual</value>
  </data>
  <data name="ReloadAllMethodBodiesCommand" xml:space="preserve">
    <value>Recarregar todos os corpos de método</value>
  </data>
  <data name="ReturnValueNotAvailable" xml:space="preserve">
    <value>O valor de retorno não está disponível atualmente</value>
  </data>
  <data name="StepFilter_SteppingOverOperator" xml:space="preserve">
    <value>Entrar em: Pulando o operador '{0} '.</value>
  </data>
  <data name="StepFilter_SteppingOverProperty" xml:space="preserve">
    <value>Entrar em: Pulando o propriedade '{0} '.</value>
  </data>
  <data name="UnknownVariableOrObjectId" xml:space="preserve">
    <value>Variável ou ID de objeto desconhecido</value>
  </data>
</root>