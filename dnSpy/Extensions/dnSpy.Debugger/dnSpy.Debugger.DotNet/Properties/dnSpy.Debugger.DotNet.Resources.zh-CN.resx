<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddClassBreakpointCommand" xml:space="preserve">
    <value>添加类断点</value>
  </data>
  <data name="AddClassTracepointCommand" xml:space="preserve">
    <value>添加类跟踪点</value>
  </data>
  <data name="AddMethodBreakpointCommand" xml:space="preserve">
    <value>添加方法断点</value>
  </data>
  <data name="BreakWhenExceptionThrownCommand" xml:space="preserve">
    <value>引发异常时中断</value>
  </data>
  <data name="Button_Cancel" xml:space="preserve">
    <value>取消(_C)</value>
  </data>
  <data name="CancelLoadingModulesMessage" xml:space="preserve">
    <value>取消加载模块吗？</value>
  </data>
  <data name="CantEvaluateWhenCurrentFrameIsNative" xml:space="preserve">
    <value>在当前栈帧为本地栈帧时无法计算表达式</value>
  </data>
  <data name="DecompilerGeneratedVariablesCanNotBeEvaluated" xml:space="preserve">
    <value>反编译器生成的变量不能被求值</value>
  </data>
  <data name="GlyphToolTip_IL_offset_0" xml:space="preserve">
    <value>IL 偏移量 {0}</value>
  </data>
  <data name="GlyphToolTip_line_0_character_1" xml:space="preserve">
    <value>行 {0} 字符 {1}</value>
  </data>
  <data name="InternalDebuggerError" xml:space="preserve">
    <value>内部调试器错误</value>
  </data>
  <data name="LoadModule_InfoText" xml:space="preserve">
    <value>正在加载模块。如果它是个大模块则需要一些时间。</value>
  </data>
  <data name="LoadModule_Title" xml:space="preserve">
    <value>加载动态模块中</value>
  </data>
  <data name="Method_X_ThrewAnExceptionOfType_Y" xml:space="preserve">
    <value>'{0}'抛出了类型为'{1}'的异常</value>
  </data>
  <data name="ModuleMetadataNotFoundOrInvalid" xml:space="preserve">
    <value>模块的元数据不存在或无效</value>
  </data>
  <data name="Module_BreakProcessBeforeLoadingDynamicModules" xml:space="preserve">
    <value>加载动态模块前您必须先中断此进程。</value>
  </data>
  <data name="NoDotNetObjectFoundAtAddress" xml:space="preserve">
    <value>在给定地址未找到对象</value>
  </data>
  <data name="NoExceptionOnTheCurrentThread" xml:space="preserve">
    <value>在当前线程上未发生异常</value>
  </data>
  <data name="ReloadAllMethodBodiesCommand" xml:space="preserve">
    <value>重新加载所有方法体</value>
  </data>
  <data name="ReturnValueNotAvailable" xml:space="preserve">
    <value>返回值当前不可用</value>
  </data>
  <data name="StepFilter_SteppingOverOperator" xml:space="preserve">
    <value>步入：跨越运算符“{0}”。</value>
  </data>
  <data name="StepFilter_SteppingOverProperty" xml:space="preserve">
    <value>步入：跨越属性“{0}”。</value>
  </data>
  <data name="UnknownVariableOrObjectId" xml:space="preserve">
    <value>未知变量或对象ID</value>
  </data>
</root>