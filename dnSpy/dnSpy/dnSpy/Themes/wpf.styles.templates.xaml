<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:tb="clr-namespace:dnSpy.ToolBars"
                    xmlns:shtv="clr-namespace:ICSharpCode.TreeView;assembly=ICSharpCode.TreeView"
                    xmlns:ctrls="clr-namespace:dnSpy.Controls"
                    xmlns:ctrls2="clr-namespace:dnSpy.Contracts.Controls;assembly=dnSpy.Contracts.DnSpy"
                    xmlns:tabssettings="clr-namespace:dnSpy.Documents.Tabs.Settings"
                    xmlns:mainappsettings="clr-namespace:dnSpy.MainApp.Settings"
                    xmlns:tw="clr-namespace:dnSpy.ToolWindows"
                    xmlns:p="clr-namespace:dnSpy.Properties"
                    xmlns:mvvm="clr-namespace:dnSpy.Contracts.MVVM;assembly=dnSpy.Contracts.DnSpy"
                    xmlns:mvvmvc="clr-namespace:dnSpy.Contracts.MVVM.Converters;assembly=dnSpy.Contracts.DnSpy"
                    xmlns:search="clr-namespace:dnSpy.Search"
                    xmlns:bgImg="clr-namespace:dnSpy.BackgroundImage.Dialog"
                    xmlns:img2="clr-namespace:dnSpy.Images"
                    xmlns:img="clr-namespace:dnSpy.Contracts.Images;assembly=dnSpy.Contracts.DnSpy"
                    xmlns:codesettings="clr-namespace:dnSpy.Text.CodeEditor"
                    xmlns:replsettings="clr-namespace:dnSpy.Text.Repl"
                    xmlns:docvwrsettings="clr-namespace:dnSpy.Documents.Tabs.DocViewer.Settings"
                    xmlns:outputsettings="clr-namespace:dnSpy.Output.Settings"
                    xmlns:hexedsettings="clr-namespace:dnSpy.Hex.HexEditor"
                    xmlns:disasmsettingsx86="clr-namespace:dnSpy.Disassembly.X86"
                    xmlns:disasmviewersettings="clr-namespace:dnSpy.Disassembly.Viewer"
                    xmlns:bm="clr-namespace:dnSpy.Bookmarks.Settings"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--
    The styles and templates were copied from aero.normalcolor.xaml and later updated to
    use the styles from aero2.normalcolor.xaml, see eg.:
        C:\Program Files (x86)\Microsoft Visual Studio 12.0\Blend\SystemThemes\Wpf
        C:\Program Files (x86)\Microsoft Visual Studio 14.0\DesignTools\SystemThemes\Wpf
    -->

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Geometry x:Key="DownArrow"> M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">   M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <Geometry x:Key="Checkmark">F1M5,11L3,7 5,7 6,9 9,3 11,3 7,11 5,11z</Geometry>
    <Geometry x:Key="ListUpArrow16x16">M4.999,8L4.999,15 10.999,15 10.999,8 14.999,8 7.999,1 1,8z</Geometry>
    <SolidColorBrush x:Key="TransparentBrush" Color="Transparent" />
    <img2:DsImageConverter x:Key="dsImageConverter" />
    <img2:DsImageBitmapScalingModeConverter x:Key="dsImageBitmapScalingModeConverter" />

    <Style x:Key="{x:Type img:DsImage}" TargetType="{x:Type img:DsImage}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="RenderOptions.BitmapScalingMode">
            <Setter.Value>
                <MultiBinding Mode="OneWay" Converter="{StaticResource dsImageBitmapScalingModeConverter}">
                    <Binding Mode="OneWay" Path="(img:DsImage.Zoom)" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="(img:DsImage.Dpi)" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Source">
            <Setter.Value>
                <MultiBinding Mode="OneWay" Converter="{StaticResource dsImageConverter}">
                    <Binding Mode="OneWay" Path="Width" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="Height" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="ImageReference" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="(img:DsImage.BackgroundColor)" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="(img:DsImage.BackgroundBrush)" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="(img:DsImage.Zoom)" RelativeSource="{RelativeSource Self}" />
                    <Binding Mode="OneWay" Path="(img:DsImage.Dpi)" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ContentPresenter}"
           TargetType="{x:Type ContentPresenter}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <Style x:Key="FocusVisual" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource CommonControlsFocusVisualText}"
                        StrokeThickness="1"
                        StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource CommonControlsFocusVisualText}"
                        StrokeThickness="1"
                        StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseButtonStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource CommonControlsButton}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsButtonBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsButtonText}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False">
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonDefault}" />
                <Setter Property="Foreground" Value="{DynamicResource CommonControlsButtonDefaultText}" />
                <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsButtonBorderDefault}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonFocused}" />
                <Setter Property="Foreground" Value="{DynamicResource CommonControlsButtonFocusedText}" />
                <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsButtonBorderFocused}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonHover}" />
                <Setter Property="Foreground" Value="{DynamicResource CommonControlsButtonHoverText}" />
                <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsButtonBorderHover}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource CommonControlsButtonPressedText}" />
                <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsButtonBorderPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonDisabled}" />
                <Setter Property="Foreground" Value="{DynamicResource CommonControlsButtonDisabledText}" />
                <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsButtonBorderDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ctrls2:TextControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrls2:TextControl}">
                    <TextBlock Text="{TemplateBinding Content}" TextWrapping="{TemplateBinding TextWrapping}" TextTrimming="{TemplateBinding TextTrimming}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToggleButton}"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type ToggleButton}"/>

    <Style x:Key="{x:Type RepeatButton}"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false"/>
    </Style>

    <Style x:Key="{x:Type Button}"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}"/>
    <Style x:Key="ButtonResource"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}"/>

    <ControlTemplate x:Key="WindowTemplateKey"
                     TargetType="{x:Type Window}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter/>
                </AdornerDecorator>

                <ResizeGrip x:Name="WindowResizeGrip"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Visibility="Collapsed"
                            IsTabStop="false"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode"
                               Value="CanResizeWithGrip"/>
                    <Condition Property="Window.WindowState"
                               Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="WindowResizeGrip"
                        Property="Visibility"
                        Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="{x:Type Window}"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsWindowText}"/>
        <Setter Property="Background"
                Value="{DynamicResource SystemColorsWindow}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Window.ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Selected.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource SystemColorsControlText}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" 
                        ClipToBounds="true" 
                        SnapsToDevicePixels="true" 
                        KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" 
                            Background="Transparent"
                            Grid.Column="0" 
                            Grid.Row="0"
                            IsItemsHost="true" 
                            Margin="2,2,2,0" 
                            KeyboardNavigation.TabIndex="1" 
                            Panel.ZIndex="1"/>
                        <Border x:Name="contentPanel" 
                            Grid.Column="0" 
                            Grid.Row="1" 
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabNavigation="Local" 
                            KeyboardNavigation.TabIndex="2" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource TabItemForeground}"/>
        <Setter Property="Background" Value="{DynamicResource TabItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Static.Border}" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" 
                            BorderThickness="1,1,1,0" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="0">
                            <Border x:Name="innerBorder" 
                                BorderThickness="1,1,1,0" 
                                Background="{DynamicResource TabItem.Selected.Background}"
                                BorderBrush="{DynamicResource TabItem.Selected.Border}"
                                Margin="-1"
                                Opacity="0" />
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                            ContentSource="Header" 
                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            Focusable="False" 
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.MouseOver.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.MouseOver.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.MouseOver.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.MouseOver.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.MouseOver.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.MouseOver.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.MouseOver.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.MouseOver.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.Disabled.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.Disabled.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.Disabled.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.Disabled.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.Disabled.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.Disabled.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource TabItem.Disabled.Background}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource TabItem.Disabled.Border}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditableTextBox"
           TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="AllowDrop"
                Value="true"/>
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="SelectionBrush"
                Value="{DynamicResource CommonControlsComboBoxTextInputSelection}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"
                                  Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type TextBoxBase}"
           TargetType="{x:Type TextBoxBase}"
           BasedOn="{x:Null}">
        <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxText}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="TextBox.TextWrapping" Value="NoWrap" />
        <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource CommonControlsTextBoxSelection}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource CommonControlsTextBoxBorderError}" BorderThickness="1">
                        <AdornedElementPlaceholder x:Name="Placeholder" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border
                        Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Value="{DynamicResource CommonControlsTextBoxMouseOverBorder}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <!-- OneTime is used to prevent a memory leak since ValidationError doesn't impl INotifyPropertyChanged and gets stored in a static: System.ComponentModel.ReflectTypeDescriptionProvider._propertyCache
                                 It holds a reference to the DataContext -->
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Mode=OneTime, Path=(Validation.Errors)[0].ErrorContent}"/>
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxErrorBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxErrorForeground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxErrorBackground}" />
                            <Setter TargetName="border" Value="{DynamicResource CommonControlsTextBoxErrorBackground}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type TextBox}"
           BasedOn="{StaticResource {x:Type TextBoxBase}}"
           TargetType="{x:Type TextBox}">
    </Style>
    <!--
    Disable it, we don't use it: Prevent buggy Live Visual Tree from crashing:
        "Can only base on a Style with target type that is base type 'PasswordBox'."
    <Style x:Key="{x:Type PasswordBox}"
           BasedOn="{StaticResource {x:Type TextBoxBase}}"
           TargetType="{x:Type PasswordBox}">
    </Style>
    -->

    <Style x:Key="{x:Type ToolTip}"
           TargetType="{x:Type ToolTip}">
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource ToolTipBorderBrush}"/>
        <Setter Property="Background"
                Value="{DynamicResource ToolTipBackground}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource ToolTipForeground}"/>
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Padding"
                Value="6,4"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="HasDropShadow"
                Value="False"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid>
                        <!-- This extra border is a high DPI fix which is noticeable when eg. zooming in. Without it,
                             there's an extra 1px border between the real border and the background. This 'border' is
                             invisible, meaning the color behind the tooltip is shown.
                             Test: zoom in text viewer to 380% (other zoom levels also work), place mouse cursor over
                                   a breakpoint glyph in the glyph margin and wait 150ms for the tooltip to appear.
                        -->
                        <Border Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                SnapsToDevicePixels="True"/>
                        <Border Name="Border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type UserControl}"
           TargetType="{x:Type UserControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type UserControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsCheckBoxText}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid
                            SnapsToDevicePixels="True"
                            Width="16"
                            Height="16"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center">
                            <Border
                                x:Name="checkBoxBorder"
                                BorderThickness="1"
                                Background="{DynamicResource CommonControlsCheckBoxBackground}"
                                BorderBrush="{DynamicResource CommonControlsCheckBoxBorder}" />
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Stretch="Uniform"
                                    Margin="3,1,2,2"
                                    Fill="{DynamicResource CommonControlsCheckBoxGlyph}"
                                    Data="M6.22,11.02C6.22,11.02 2.5,7.24 2.5,7.24 2.5,7.24 4.05,5.71 4.05,5.71 4.05,5.71 5.97,7.65 5.97,7.65 5.97,7.65 10.52,1.38 10.52,1.38 10.52,1.38 13.19,1.38 13.19,1.38 13.19,1.38 6.22,11.02 6.22,11.02 6.22,11.02 6.22,11.02 6.22,11.02z"
                                    Visibility="Collapsed"
                                    Width="9"
                                    Height="8"
                                    />
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="3"
                                    Fill="{DynamicResource CommonControlsCheckBoxGlyph}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Grid>
                        <Border x:Name="paddingBorder" Grid.Column="1" Background="Transparent" Width="6" Visibility="Collapsed" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            RecognizesAccessKey="True"
                            Grid.Column="2"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="0,1,0,0" />
                            <Setter TargetName="paddingBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="IsChecked">
                            <Setter TargetName="indeterminateMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBackgroundDisabled}" Property="Background" />
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBorderDisabled}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsCheckBoxGlyphDisabled}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsCheckBoxTextDisabled}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBackgroundFocused}" Property="Background" />
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBorderFocused}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsCheckBoxGlyphFocused}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsCheckBoxTextFocused}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBackgroundHover}" Property="Background" />
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBorderHover}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsCheckBoxGlyphHover}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsCheckBoxTextHover}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBackgroundPressed}" Property="Background" />
                            <Setter TargetName="checkBoxBorder" Value="{DynamicResource CommonControlsCheckBoxBorderPressed}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsCheckBoxGlyphPressed}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsCheckBoxTextPressed}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxListItemText}" />
        <Setter Property="Margin" Value="2,0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Bd" Value="{DynamicResource CommonControlsComboBoxListItemBackgroundHover}" Property="Background" />
                            <Setter TargetName="Bd" Value="{DynamicResource CommonControlsComboBoxListItemBorderHover}" Property="BorderBrush" />
                            <Setter TargetName="Bd" Value="{DynamicResource CommonControlsComboBoxListItemTextHover}" Property="TextElement.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

 
    <Style x:Key="{x:Type ContentControl}"
           TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuScrollButton"
           TargetType="{x:Type RepeatButton}"
           BasedOn="{x:Null}">
        <Setter Property="ClickMode"
                Value="Hover"/>
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent"
                               SnapsToDevicePixels="true">
                        <Rectangle DockPanel.Dock="Right"
                                   x:Name="R1"
                                   Width="1"
                                   Fill="Transparent"/>
                        <Rectangle DockPanel.Dock="Bottom"
                                   x:Name="B1"
                                   Height="1"
                                   Fill="Transparent"/>
                        <Rectangle DockPanel.Dock="Left"
                                   x:Name="L1"
                                   Width="1"
                                   Fill="Transparent"/>
                        <Rectangle DockPanel.Dock="Top"
                                   x:Name="T1"
                                   Height="1"
                                   Fill="Transparent"/>
                        <ContentPresenter x:Name="ContentContainer"
                                          Margin="2,2,2,2"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="R1"
                                    Property="Fill"
                                    Value="{DynamicResource SystemColorsControlLightLight}"/>
                            <Setter TargetName="B1"
                                    Property="Fill"
                                    Value="{DynamicResource SystemColorsControlLightLight}"/>
                            <Setter TargetName="L1"
                                    Property="Fill"
                                    Value="{DynamicResource SystemColorsControlDarkDark}"/>
                            <Setter TargetName="T1"
                                    Property="Fill"
                                    Value="{DynamicResource SystemColorsControlDarkDark}"/>
                            <Setter TargetName="ContentContainer"
                                    Property="Margin"
                                    Value="3,3,1,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}"
           TargetType="{x:Type ScrollViewer}"
           BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="HorizontalScrollBarVisibility"
                Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"
                                Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </Border>
                        <RepeatButton
                                      Style="{StaticResource MenuScrollButton}"
                                      Grid.Row="0"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="false">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedVerticalScrollBarVisibility"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="VerticalOffset"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ExtentHeight"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ViewportHeight"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource SystemColorsMenuText}"
                                  Data="{StaticResource UpArrow}"/>
                        </RepeatButton>
                        <RepeatButton
                                      Style="{StaticResource MenuScrollButton}"
                                      Grid.Row="2"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="false">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedVerticalScrollBarVisibility"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="VerticalOffset"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ExtentHeight"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ViewportHeight"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource SystemColorsMenuText}"
                                  Data="{StaticResource DownArrow}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type ContextMenu}"
           TargetType="{x:Type ContextMenu}">
        <Setter Property="Background"
                Value="{DynamicResource ContextMenuBackground}"/>
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsMenuText}"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource ContextMenuBorderBrush}"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="Grid.IsSharedSizeScope"
                Value="true"/>
        <Setter Property="HasDropShadow"
                Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <theme:SystemDropShadowChrome Name="Shdw"
                                                  Color="Transparent"
                                                  SnapsToDevicePixels="true">
                        <Border Name="ContextMenuBorder" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer Name="ContextMenuScrollViewer"
                                          FocusVisualStyle="{x:Null}"
                                          Grid.ColumnSpan="2" Margin="0"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                              <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Height="{Binding ElementName=ContextMenuBorder,Path=ActualHeight}"
                                        Width="{Binding ElementName=ContextMenuBorder,Path=ActualWidth}"
                                        Fill="{Binding ElementName=ContextMenuBorder,Path=Background}" />
                                </Canvas>
                                <Rectangle Fill="{DynamicResource ContextMenuRectangleFill}"
                                           HorizontalAlignment="Left"
                                           Width="27"
                                           Margin="0"
                                           RadiusX="0"
                                           RadiusY="0"/>
                                <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                              </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="{DynamicResource ControlShadow}"/>
                        </Trigger>
                        <Trigger SourceName="ContextMenuScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ExpanderDownHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle"
                                     Width="19"
                                     Height="19"
                                     Stroke="{DynamicResource Expander.Static.Circle.Stroke}"
                                     Fill="{DynamicResource Expander.Static.Circle.Fill}"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"/>
                            <Path x:Name="arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Stroke="{DynamicResource Expander.Static.Arrow.Stroke}"
                                  StrokeThickness="2"
                                  SnapsToDevicePixels="false"
                                  Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Fill}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Circle.Stroke}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Pressed.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Circle.Stroke}" 
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Disabled.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Arrow.Stroke}" 
                                    TargetName="arrow"/>                        
                        </Trigger>                                    
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         Stroke="{DynamicResource Expander.Static.Circle.Stroke}"
                                         Fill="{DynamicResource Expander.Static.Circle.Fill}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{DynamicResource Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2"
                                      SnapsToDevicePixels="false"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Circle.Stroke}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Pressed.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Circle.Stroke}" 
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Disabled.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Arrow.Stroke}" 
                                    TargetName="arrow"/>
                        </Trigger>                                    
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         Stroke="{DynamicResource Expander.Static.Circle.Stroke}"
                                         Fill="{DynamicResource Expander.Static.Circle.Fill}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{DynamicResource Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2"
                                      SnapsToDevicePixels="false"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            </Grid>
                            <ContentPresenter Grid.Row="1"
                                              Margin="0,4,0,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Top"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Circle.Stroke}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Pressed.Circle.Fill}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Circle.Stroke}" 
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Disabled.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Arrow.Stroke}" 
                                    TargetName="arrow"/>     
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         Stroke="{DynamicResource Expander.Static.Circle.Stroke}"
                                         Fill="{DynamicResource Expander.Static.Circle.Fill}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{DynamicResource Expander.Static.Arrow.Stroke}"
                                      StrokeThickness="2"
                                      SnapsToDevicePixels="false"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            </Grid>
                            <ContentPresenter Grid.Row="1"
                                              Margin="0,4,0,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Top"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Stroke}" 
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.MouseOver.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}" 
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Circle.Stroke}" 
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Pressed.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Pressed.Arrow.Stroke}" 
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Circle.Stroke}" 
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{DynamicResource Expander.Disabled.Circle.Fill}"
                                    TargetName="circle"/>                                    
                            <Setter Property="Stroke"
                                    Value="{DynamicResource Expander.Disabled.Arrow.Stroke}" 
                                    TargetName="arrow"/>
                        </Trigger>                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style x:Key="{x:Type Expander}"
           TargetType="{x:Type Expander}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Margin="1"
                                          MinWidth="0"
                                          MinHeight="0"
                                          Style="{StaticResource ExpanderDownHeaderStyle}"
                                          FocusVisualStyle="{x:Null}"
                                          IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Foreground="{TemplateBinding Foreground}"
                                          Padding="{TemplateBinding Padding}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Visibility="Collapsed"
                                              Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="ExpandSite"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Right">
                            <Setter Property="DockPanel.Dock"
                                    Value="Right"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Left"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource ExpanderRightHeaderStyle}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Up">
                            <Setter Property="DockPanel.Dock"
                                    Value="Top"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Bottom"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource ExpanderUpHeaderStyle}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Left">
                            <Setter Property="DockPanel.Dock"
                                    Value="Left"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Right"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource ExpanderLeftHeaderStyle}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="{DynamicResource GridSplitterPreviewFill}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GridSplitter}"
           TargetType="{x:Type GridSplitter}">
        <Setter Property="Background"
                Value="{DynamicResource SystemColorsControl}"/>
        <Setter Property="PreviewStyle"
                Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style x:Key="{x:Type GroupBox}"
           TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource GroupBoxBorderBrush}"/>
        <Setter Property="BorderThickness"
                Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="Transparent"
                                Background="{TemplateBinding Background}"/>

                        <Border CornerRadius="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}"
                                              ConverterParameter="7">
                                    <Binding ElementName="Header"
                                             Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}"
                                             Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}"
                                             Path="ActualHeight"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        
                        <Border x:Name="Header"
                                Padding="3,1,3,1"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1">
                            <ContentPresenter ContentSource="Header" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.Row="2"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type HeaderedContentControl}"
           TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <StackPanel>
                        <ContentPresenter ContentSource="Header"/>
                        <ContentPresenter/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ItemsControl}"
           TargetType="{x:Type ItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Label}"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Padding"
                Value="5"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="VerticalContentAlignment"
                Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ListBox}"
           TargetType="{x:Type ListBox}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Background"
                Value="{DynamicResource ListBoxBackground}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource ListBoxBorder}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true"
                            Padding="0">
                        <ScrollViewer Padding="{TemplateBinding Padding}"
                                      Focusable="false">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource SystemColorsControl}"/>
                        </Trigger>
                        <!-- TODO: Disable this since VirtualizingPanel.IsVirtualizingWhenGrouping is
                                available in 4.5+ only
                        <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true" />
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                        </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="true">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ListBoxItem.MouseOver.Background}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ListBoxItem.MouseOver.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ListBoxItem.SelectedInactive.Background}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ListBoxItem.SelectedInactive.Border}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ListBoxItem.SelectedActive.Background}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ListBoxItem.SelectedActive.Border}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer DockPanel.Dock="Top"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          Focusable="false">
                                <GridViewHeaderRowPresenter Margin="2,0,2,0"
                                                            Columns="{Binding Path=TemplatedParent.View.Columns,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderStringFormat="{Binding Path=TemplatedParent.View.ColumnHeaderStringFormat,RelativeSource={RelativeSource TemplatedParent}}"
                                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip,RelativeSource={RelativeSource TemplatedParent}}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Local"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Minimum="0.0"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Value="{Binding Path=HorizontalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Cursor="Arrow"/>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Orientation="Vertical"
                                   Grid.Column="1"
                                   Minimum="0.0"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{Binding Path=VerticalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Cursor="Arrow"/>
                        <Rectangle
                            Grid.Column="1"
                            Grid.Row="1"
                            Fill="{DynamicResource EnvironmentScrollBarBackground}"
                            />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewColumnHeaderGripper"
           TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right"
                Value="-9"/>
        <Setter Property="Width"
                Value="18"/>
        <Setter Property="Height"
                Value="{Binding Path=ActualHeight,RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Padding"
                Value="0"/>
        <Setter Property="Background"
                Value="{DynamicResource HeaderSeparatorLine}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent">
                        <Rectangle HorizontalAlignment="Center"
                                   Width="1"
                                   Fill="{TemplateBinding Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type GridViewColumnHeader}"
           TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Background"
                Value="{DynamicResource HeaderDefault}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource HeaderSeparatorLine}"/>
        <Setter Property="BorderThickness"
                Value="0"/>
        <Setter Property="Padding"
                Value="6,0,6,0"/>
        <Setter Property="Foreground"
                Value="{DynamicResource HeaderDefaultText}"/>
        <Setter Property="mvvm:GridViewColumnSorter.GridViewSortDirection"
                Value="{Binding Column.(mvvm:GridViewColumnSorter.GridViewSortDirection), RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid SnapsToDevicePixels="true">
                        <Border Name="HeaderBorder"
                                BorderThickness="0,1,0,1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="7"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Grid.RowSpan="2"
                                        Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Name="HeaderContent"
                                                          Margin="0,0,0,1"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        <Path Grid.Column="1"
                                              x:Name="arrowPath"
                                              VerticalAlignment="Center"
                                              Fill="{DynamicResource HeaderGlyph}"
                                              SnapsToDevicePixels="true" />
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper"
                                   Style="{StaticResource GridViewColumnHeaderGripper}"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="mvvm:GridViewColumnSorter.GridViewSortDirection"
                            Value="{x:Static mvvm:GridViewSortDirection.Ascending}">
                            <Setter TargetName="arrowPath" Property="Data" Value="M0,5L4.5,0 9,5 0,5z" />
                        </Trigger>
                        <Trigger Property="mvvm:GridViewColumnSorter.GridViewSortDirection"
                            Value="{x:Static mvvm:GridViewSortDirection.Descending}">
                            <Setter TargetName="arrowPath" Property="Data" Value="M0,0L4.5,5 9,0 0,0z" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="HeaderBorder"
                                    Property="Background"
                                    Value="{DynamicResource HeaderMouseOver}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource HeaderMouseOverText}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="HeaderBorder"
                                    Property="Background"
                                    Value="{DynamicResource HeaderMouseDown}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource HeaderMouseDownText}"/>
                        </Trigger>
                        <Trigger Property="Height"
                                 Value="Auto">
                            <Setter Property="MinHeight"
                                    Value="20"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role"
                     Value="Floating">
                <Setter Property="Opacity"
                        Value="0.4082"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Opacity="0.4697"
                                           Fill="{DynamicResource HeaderMouseDown}"
                                           Width="{TemplateBinding ActualWidth}"
                                           Height="{TemplateBinding ActualHeight}"/>
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role"
                     Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Border Name="HeaderBorder"
                                    BorderThickness="0,1,0,1"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Height"
                                         Value="Auto">
                                    <Setter Property="MinHeight"
                                            Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static GridView.GridViewStyleKey}"
           TargetType="{x:Type ListView}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Background"
                Value="{DynamicResource GridViewBackground}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource GridViewBorder}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Foreground"
                Value="{DynamicResource GridViewListViewForeground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <!-- Focusable=False (setter) is ignored in the style for some reason. Override it here -->
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                                      Focusable="False"
                                      Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource TextBoxDisabledBorder}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource TextBoxDisabledBackground}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource TextBoxHoverBorder}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource TextBoxFocusedBorder}"/>
                        </Trigger>
                        -->
                        <!-- TODO: Disable this since VirtualizingPanel.IsVirtualizingWhenGrouping is
                                available in 4.5+ only
                        <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true" />
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                        </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1"
                               RadiusX="0"
                               RadiusY="0"
                               Stroke="{DynamicResource GridViewListViewItemFocusVisualStroke}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}"
           TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource ListViewItemFocusVisual}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="0,0,0,1"/>
        <Setter Property="Padding"
                Value="5,2,5,2"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Border Name="InnerBorder"
                                BorderThickness="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <GridViewRowPresenter Grid.RowSpan="2"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{DynamicResource GridViewListItemHoverFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource GridViewItemContainerMouseOverHoverBorder}"/>
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{DynamicResource GridViewListItemSelectedFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource GridViewItemContainerSelectedBorder}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true"/>
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{DynamicResource GridViewListItemSelectedInactiveFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource GridViewItemContainerSelectedInactiveBorder}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true"/>
                                <Condition Property="IsMouseOver"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{DynamicResource GridViewListItemSelectedHoverFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource GridViewItemContainerSelectedMouseOverBorder}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid SnapsToDevicePixels="true" UseLayoutRounding="False" Margin="0 1 0 0">
                        <Rectangle Height="1"
                                   Margin="30,0,1,1"
                                   Fill="{DynamicResource MenuItemSeparatorFillTop}"/>
                        <Rectangle Height="1"
                                   Margin="30,1,1,0"
                                   Fill="{DynamicResource MenuItemSeparatorFillBottom}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}"
                     TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle Name="Bg"
                       Fill="{TemplateBinding MenuItem.Background}"
                       Stroke="{TemplateBinding MenuItem.BorderBrush}"
                       StrokeThickness="1"/>
            <Rectangle x:Name="InnerBorder"
                       Margin="1"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="27"
                                      Width="Auto"
                                      SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="7"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition Width="Auto"
                                      SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="2 1 3 1"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <Border x:Name="GlyphPanel"
                        Background="{DynamicResource EnvironmentCommandBarSelectedIcon}"
                        BorderThickness="0"
                        Margin="3 2"
                        Visibility="Hidden"
                        Width="18"
                        Height="18">
                    <Path Name="Glyph"
                          Width="16"
                          Height="16"
                          Fill="{DynamicResource EnvironmentCommandBarCheckBox}"
                          FlowDirection="LeftToRight"
                          StrokeThickness="1"
                          Data="{StaticResource Checkmark}"/>
                </Border>
                <ContentPresenter Grid.Column="2"
                                  ContentSource="Header"
                                  VerticalAlignment="Center"
                                  Margin="{TemplateBinding MenuItem.Padding}"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <TextBlock Grid.Column="4"
                           VerticalAlignment="Center"
                           Text="{TemplateBinding MenuItem.InputGestureText}"
                           Margin="{TemplateBinding MenuItem.Padding}"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon"
                     Value="{x:Null}">
                <Setter TargetName="Icon"
                        Property="Visibility"
                        Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked"
                     Value="true">
                <Setter TargetName="GlyphPanel"
                        Property="Visibility"
                        Value="Visible"/>
                <Setter TargetName="Icon"
                        Property="Visibility"
                        Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted"
                     Value="true">
                <Setter TargetName="Bg"
                        Property="Fill"
                        Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                <Setter TargetName="Bg"
                        Property="Stroke"
                        Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                <Setter TargetName="InnerBorder"
                        Property="Stroke"
                        Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                <Setter TargetName="GlyphPanel"
                        Property="Background"
                        Value="{DynamicResource EnvironmentCommandBarHoverOverSelectedIcon}"/>
                <Setter TargetName="Glyph"
                        Property="Fill"
                        Value="{DynamicResource EnvironmentCommandBarCheckBoxMouseOver}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource MenuItemDisabledForeground}"/>
                <Setter TargetName="GlyphPanel"
                        Property="Background"
                        Value="{DynamicResource MenuItemDisabledGlyphPanelBackground}"/>
                <Setter TargetName="Glyph"
                        Property="Fill"
                        Value="{DynamicResource MenuItemDisabledGlyphFill}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}"
                     TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle Name="Bg"
                       Fill="{TemplateBinding MenuItem.Background}"
                       Stroke="{TemplateBinding MenuItem.BorderBrush}"
                       StrokeThickness="1"/>
            <Rectangle x:Name="InnerBorder"
                       Margin="1"
                       Stroke="Transparent"
                       StrokeThickness="1"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="27"
                                      Width="Auto"
                                      SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="7"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition Width="Auto"
                                      SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                  Margin="4 1 1 1"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <Border x:Name="GlyphPanel"
                        Background="{DynamicResource EnvironmentCommandBarSelectedIcon}"
                        BorderThickness="0"
                        Margin="3 2"
                        Visibility="Hidden"
                        Width="18"
                        Height="18">
                    <Path Name="Glyph"
                          Width="16"
                          Height="16"
                          Fill="{DynamicResource EnvironmentCommandBarCheckBox}"
                          FlowDirection="LeftToRight"
                          StrokeThickness="1"
                          Data="{StaticResource Checkmark}"/>
                </Border>
                <ContentPresenter Grid.Column="2"
                                  ContentSource="Header"
                                  VerticalAlignment="Center"
                                  Margin="{TemplateBinding MenuItem.Padding}"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <TextBlock Grid.Column="4"
                           VerticalAlignment="Center"
                           Text="{TemplateBinding MenuItem.InputGestureText}"
                           Margin="{TemplateBinding MenuItem.Padding}"
                           Visibility="Collapsed"/>
                <Path Grid.Column="5"
                      x:Name="rightArrowPath"
                      VerticalAlignment="Center"
                      Margin="4,0,0,0"
                      Fill="{TemplateBinding MenuItem.Foreground}"
                      Data="{StaticResource RightArrow}"/>
            </Grid>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Placement="Right"
                   VerticalOffset="-3"
                   HorizontalOffset="-2"
                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                   Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <theme:SystemDropShadowChrome Name="Shdw"
                                              Color="Transparent">
                    <Border Name="SubMenuBorder"
                            Background="{DynamicResource ContextMenuBackground}"
                            BorderBrush="{DynamicResource ContextMenuBorderBrush}"
                            BorderThickness="1">
                        <ScrollViewer Name="SubMenuScrollViewer"
                                      Margin="2"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                          <Grid RenderOptions.ClearTypeHint="Enabled">
                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Rectangle
                                    Name="OpaqueRect"
                                    Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                    Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                    Fill="{DynamicResource ContextMenuBackground}" />
                            </Canvas>
                            <Rectangle Fill="{DynamicResource ContextMenuRectangleFill}"
                                       HorizontalAlignment="Left"
                                       Width="27"
                                       Margin="0"
                                       RadiusX="0"
                                       RadiusY="0"/>
                            <ItemsPresenter Name="ItemsPresenter"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Grid.IsSharedSizeScope="true"/>
                          </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation"
                     Value="true">
                <Setter TargetName="PART_Popup"
                        Property="PopupAnimation"
                        Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted"
                     Value="true">
                <Setter TargetName="InnerBorder"
                        Property="Stroke"
                        Value="{DynamicResource MenuItemHighlightedInnerBorder}"/>
            </Trigger>
             <Trigger Property="Icon"
                     Value="{x:Null}">
                <Setter TargetName="Icon"
                        Property="Visibility"
                        Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked"
                     Value="true">
                <Setter TargetName="GlyphPanel"
                        Property="Visibility"
                        Value="Visible"/>
                <Setter TargetName="Icon"
                        Property="Visibility"
                        Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="PART_Popup"
                     Property="Popup.HasDropShadow"
                     Value="true">
                <Setter TargetName="Shdw"
                        Property="Margin"
                        Value="0,0,5,5"/>
                <Setter TargetName="Shdw"
                        Property="Color"
                        Value="{DynamicResource ControlShadow}"/>
            </Trigger>
            <Trigger SourceName="PART_Popup"
                     Property="Popup.IsOpen"
                     Value="true">
                <Setter TargetName="rightArrowPath"
                        Property="Fill"
                        Value="{DynamicResource EnvironmentCommandBarMenuMouseOverSubmenuGlyph}"/>
            </Trigger>
            <Trigger Property="IsHighlighted"
                     Value="true">
                <Setter TargetName="Bg"
                        Property="Fill"
                        Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                <Setter TargetName="Bg"
                        Property="Stroke"
                        Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                <Setter TargetName="InnerBorder"
                        Property="Stroke"
                        Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                <Setter TargetName="GlyphPanel"
                        Property="Background"
                        Value="{DynamicResource EnvironmentCommandBarHoverOverSelectedIcon}"/>
                <Setter TargetName="Glyph"
                        Property="Fill"
                        Value="{DynamicResource EnvironmentCommandBarCheckBoxMouseOver}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource MenuItemDisabledForeground}"/>
                <Setter TargetName="GlyphPanel"
                        Property="Background"
                        Value="{DynamicResource MenuItemDisabledGlyphPanelBackground}"/>
                <Setter TargetName="Glyph"
                        Property="Fill"
                        Value="{DynamicResource MenuItemDisabledGlyphFill}"/>
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer"
                     Property="ScrollViewer.CanContentScroll"
                     Value="false" >
                <Setter TargetName="OpaqueRect"
                        Property="Canvas.Top"
                        Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect"
                        Property="Canvas.Left"
                        Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type MenuItem}"
           TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsMenuText}"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}}"/>
        <Style.Triggers>
            <!-- TODO: Uncomment when needed. We don't need these styles now.
            <Trigger Property="Role"
                     Value="TopLevelHeader">
                <Setter Property="Padding"
                        Value="7,2,8,3"/>
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role"
                     Value="TopLevelItem">
                <Setter Property="Padding"
                        Value="7,2,8,3"/>
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}}"/>
            </Trigger>
            -->
            <Trigger Property="Role"
                     Value="SubmenuHeader">
                <Setter Property="Padding"
                        Value="0"/>
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role"
                     Value="SubmenuItem">
                <Setter Property="Padding"
                        Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource ProgressBarProgress}" />
        <Setter Property="Background" Value="{DynamicResource ProgressBarBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ProgressBarBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator"
                            HorizontalAlignment="Left"
                            ClipToBounds="true">
                            <Rectangle x:Name="Indicator" 
                                Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" 
                                RenderTransformOrigin="0.5,0.5" 
                                Fill="{TemplateBinding Foreground}">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsRadioButtonText}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" 
                            Margin="1,1,2,1" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                            BorderThickness="1" 
                            Background="{DynamicResource CommonControlsRadioButtonBackground}" 
                            BorderBrush="{DynamicResource CommonControlsRadioButtonBorder}" 
                            CornerRadius="100">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse
                                    x:Name="optionMark"
                                    Opacity="0"
                                    MinWidth="6"
                                    MinHeight="6"
                                    Fill="{DynamicResource CommonControlsRadioButtonGlyph}"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                            RecognizesAccessKey="True" 
                            Grid.Column="1" 
                            Margin="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                            Focusable="False"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="6,1,0,0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" Value="0.56" TargetName="optionMark" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBackgroundDisabled}" Property="Background" />
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBorderDisabled}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsRadioButtonGlyphDisabled}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsRadioButtonTextDisabled}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBackgroundFocused}" Property="Background" />
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBorderFocused}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsRadioButtonGlyphFocused}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsRadioButtonTextFocused}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBackgroundHover}" Property="Background" />
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBorderHover}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsRadioButtonGlyphHover}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsRadioButtonTextHover}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBackgroundPressed}" Property="Background" />
                            <Setter TargetName="radioButtonBorder" Value="{DynamicResource CommonControlsRadioButtonBorderPressed}" Property="BorderBrush" />
                            <Setter TargetName="optionMark" Value="{DynamicResource CommonControlsRadioButtonGlyphPressed}" Property="Fill" />
                            <Setter Value="{DynamicResource CommonControlsRadioButtonTextPressed}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
        <!--
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="CornerRadius" Value="0,0,0,0" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Margin" Value="0,0,11,0" />
        <Setter Property="CornerRadius" Value="3,3,3,3" />
        -->
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="MinWidth"
                Value="2"/>
        <Setter Property="MinHeight"
                Value="1"/>
        <Setter Property="Margin"
                Value="3 3 3 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1" />
                            <ColumnDefinition Width="1" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource EnvironmentCommandBarToolBarSeparator}"
                            BorderThickness="1"
                            SnapsToDevicePixels="true"/>
                        <Border Grid.Column="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource EnvironmentCommandBarToolBarSeparatorHighlight}"
                            BorderThickness="1"
                            SnapsToDevicePixels="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource ToolBarButtonPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                            <Setter Property="Background"
                                    Value="{DynamicResource ToolBarButtonChecked}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ToolBarButtonCheckedText}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                            <Setter Property="Background"
                                    Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                            <Setter Property="Background"
                                    Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true"/>
                                <Condition Property="IsChecked"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                            <Setter Property="Background"
                                    Value="{DynamicResource ToolBarButtonPressed}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused"
                                           Value="true"/>
                                <Condition Property="IsChecked"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                            <Setter Property="Background"
                                    Value="{DynamicResource ToolBarButtonPressed}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                            <Setter Property="Background"
                                    Value="{DynamicResource ToolBarButtonPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
           BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
           TargetType="{x:Type CheckBox}"/>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
           BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
           TargetType="{x:Type RadioButton}"/>

    <Style x:Key="{x:Type ResizeGrip}"
           TargetType="{x:Type ResizeGrip}">
        <Setter Property="MinWidth"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ResizeGrip}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Path HorizontalAlignment="Right" 
                              VerticalAlignment="Bottom" 
                              Margin="0,0,2,2"
                              Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z">

                            <Path.Fill>
                                <DrawingBrush Viewbox="0,0,3,3"
                                              Viewport="0,0,3,3"
                                              TileMode="Tile"
                                              ViewportUnits="Absolute"
                                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="{DynamicResource ResizeGripperForeground}"
                                                                 Geometry="M 0,0 L 2,0 L 2,2 L 0,2 z "/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Path.Fill>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="IsTabStop"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border" Background="{DynamicResource EnvironmentScrollBarArrowBackground}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Path Grid.Row="1"
                                  Grid.Column="1"
                                  x:Name="arrowPath"
                                  Fill="{DynamicResource EnvironmentScrollBarArrowGlyph}"
                                  Data="M0,0L0,9 5,4.5 0,0z"
                                  SnapsToDevicePixels="true" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="theme:ScrollChrome.ScrollGlyph"
                            Value="{x:Static theme:ScrollGlyph.DownArrow}">
                            <Setter TargetName="arrowPath" Property="Data" Value="M0,0L4.5,5 9,0 0,0z" />
                        </Trigger>
                        <Trigger Property="theme:ScrollChrome.ScrollGlyph"
                            Value="{x:Static theme:ScrollGlyph.LeftArrow}">
                            <Setter TargetName="arrowPath" Property="Data" Value="M5,0L0,4.5 5,9 5,0z" />
                        </Trigger>
                        <Trigger Property="theme:ScrollChrome.ScrollGlyph"
                            Value="{x:Static theme:ScrollGlyph.UpArrow}">
                            <Setter TargetName="arrowPath" Property="Data" Value="M0,5L4.5,0 9,5 0,5z" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource EnvironmentScrollBarArrowMouseOverBackground}" />
                            <Setter TargetName="arrowPath"
                                    Property="Fill"
                                    Value="{DynamicResource EnvironmentScrollBarArrowGlyphMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource EnvironmentScrollBarArrowPressedBackground}" />
                            <Setter TargetName="arrowPath"
                                    Property="Fill"
                                    Value="{DynamicResource EnvironmentScrollBarArrowGlyphPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource EnvironmentScrollBarArrowDisabledBackground}" />
                            <Setter TargetName="arrowPath"
                                    Property="Fill"
                                    Value="{DynamicResource EnvironmentScrollBarArrowGlyphDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb"
           TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="IsTabStop"
                Value="false"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="Border"
                            BorderBrush="Transparent"
                            Background="{DynamicResource EnvironmentScrollBarThumbBackground}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource EnvironmentScrollBarThumbMouseOverBackground}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource EnvironmentScrollBarThumbPressedBackground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border"
                                    Property="Border.Background"
                                    Value="{DynamicResource EnvironmentScrollBarThumbDisabled}" />
                        </Trigger>
                        <Trigger Property="theme:ScrollChrome.ScrollGlyph"
                            Value="{x:Static theme:ScrollGlyph.VerticalGripper}">
                            <Setter Property="BorderThickness"
                                TargetName="Border"
                                Value="4 0 4 0"/>
                        </Trigger>
                        <Trigger Property="theme:ScrollChrome.ScrollGlyph"
                            Value="{x:Static theme:ScrollGlyph.HorizontalGripper}">
                            <Setter Property="BorderThickness"
                                TargetName="Border"
                                Value="0 4 0 4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="IsTabStop"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="IsTabStop"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ScrollBar}"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false"/>
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Width"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border Name="Border"
                            Background="{DynamicResource EnvironmentScrollBarBackground}"
                            BorderBrush="{DynamicResource EnvironmentScrollBarBorder}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            </Grid.RowDefinitions>
                            <RepeatButton Style="{StaticResource ScrollBarButton}"
                                          Command="{x:Static ScrollBar.LineUpCommand}"
                                          theme:ScrollChrome.ScrollGlyph="UpArrow"/>
                            <Track Grid.Row="1"
                                   Name="PART_Track"
                                   IsDirectionReversed="true">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}"
                                                  Command="{x:Static ScrollBar.PageUpCommand}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}"
                                                  Command="{x:Static ScrollBar.PageDownCommand}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumb}"
                                           theme:ScrollChrome.ScrollGlyph="VerticalGripper"/>
                                </Track.Thumb>
                            </Track>
                            <RepeatButton Style="{StaticResource ScrollBarButton}"
                                          Grid.Row="2"
                                          Command="{x:Static ScrollBar.LineDownCommand}"
                                          theme:ScrollChrome.ScrollGlyph="DownArrow"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Width"
                        Value="Auto"/>
                <Setter Property="MinWidth"
                        Value="0"/>
                <Setter Property="Height"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight"
                        Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border Name="Border"
                                    Background="{DynamicResource EnvironmentScrollBarBackground}"
                                    BorderBrush="{DynamicResource EnvironmentScrollBarBorder}">
                                <Grid SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                        <ColumnDefinition Width="0.00001*"/>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Style="{StaticResource ScrollBarButton}"
                                                  Command="{x:Static ScrollBar.LineLeftCommand}"
                                                  theme:ScrollChrome.ScrollGlyph="LeftArrow"/>
                                    <Track Grid.Column="1"
                                           Name="PART_Track">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                                          Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
                                                          Command="{x:Static ScrollBar.PageRightCommand}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumb}"
                                                   theme:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton Style="{StaticResource ScrollBarButton}"
                                                  Grid.Column="2"
                                                  Command="{x:Static ScrollBar.LineRightCommand}"
                                                  theme:ScrollChrome.ScrollGlyph="RightArrow"/>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!-- Updated to include the default ScrollViewer template. This template isn't included in a
         XAML file. It's created by ScrollViewer.CreateDefaultControlTemplate().
    -->
    <Style x:Key="{x:Type ScrollViewer}" 
           TargetType="{x:Type ScrollViewer}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" 
                     Value="false">
                <Setter Property="Foreground" 
                        Value="{DynamicResource SystemColorsGrayText}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinitionOne" Width="*" />
                            <ColumnDefinition x:Name="ColumnDefinitionTwo" Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinitionOne" Height="*" />
                            <RowDefinition x:Name="RowDefinitionTwo" Height="Auto" />
                        </Grid.RowDefinitions>
                        <Rectangle
                            x:Name="Corner"
                            Grid.Column="1"
                            Grid.Row="1"
                            Fill="{DynamicResource EnvironmentScrollBarBackground}"
                            />
                        <ScrollContentPresenter
                            x:Name="PART_ScrollContentPresenter"
                            Grid.Column="0"
                            Grid.Row="0"
                            Margin="{TemplateBinding Padding}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Orientation="Horizontal"
                            Grid.Column="0"
                            Grid.Row="1"
                            Minimum="0.0"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Cursor="Arrow"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Column="1"
                            Grid.Row="0"
                            Minimum="0.0"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Cursor="Arrow"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type StatusBar}"
           TargetType="{x:Type StatusBar}">
        <Setter Property="Background"
                Value="{DynamicResource StatusBarDebuggingBackground}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource StatusBarDebuggingForeground}"/>
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="Background"
                Value="{DynamicResource SystemColorsControlDarkDark}"/>
        <Setter Property="MinWidth"
                Value="1"/>
        <Setter Property="MinHeight"
                Value="1"/>
        <Setter Property="Margin"
                Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type StatusBarItem}"
           TargetType="{x:Type StatusBarItem}">
        <Setter Property="Padding"
                Value="3"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ToolBarComboBoxTransparentButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="Width"
                Value="Auto"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="ClickMode"
                Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"
                                              SharedSizeGroup="ComboBoxButton"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Chrome"
                                Grid.Column="1"
                                Width="13"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                SnapsToDevicePixels="true">
                            <Path x:Name="ArrowDownPath"
                                  Data="M 0 0 L 3 3 L 6 0 Z"
                                  Margin="0 1 0 0"
                                  Fill="{TemplateBinding Foreground}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Chrome"
                                    Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundPressed}" />
                            <Setter TargetName="Chrome"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxSeparatorPressed}" />
                            <Setter TargetName="ArrowDownPath"
                                    Property="Fill"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphPressed}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Chrome"
                                    Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundPressed}" />
                            <Setter TargetName="Chrome"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxSeparatorPressed}" />
                            <Setter TargetName="ArrowDownPath"
                                    Property="Fill"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphPressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource CommonControlsComboBoxText}"/>
        <Setter Property="Background"
                Value="{DynamicResource CommonControlsComboBoxBackground}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource CommonControlsComboBoxBorder}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="1,0"/>
        <Setter Property="Padding"
                Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="MinHeight"
                Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid Grid.IsSharedSizeScope="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"
                                                  SharedSizeGroup="ComboBoxButton"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="Background"
                                    Background="{TemplateBinding Background}"/>
                            <Border Name="SelectedContentBorder"
                                    Margin="2,2,1,2">
                                <ContentPresenter x:Name="ContentSite"
                                                  Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="Center"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <Border Name="Border"
                                    Grid.ColumnSpan="2"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"/>
                            <ToggleButton BorderBrush="{DynamicResource CommonControlsComboBoxSeparator}"
                                          Background="{DynamicResource CommonControlsComboBoxGlyphBackground}"
                                          Foreground="{DynamicResource CommonControlsComboBoxGlyph}"
                                          BorderThickness="1"
                                          x:Name="DropDownButton"
                                          Grid.ColumnSpan="2"
                                          Style="{StaticResource ToolBarComboBoxTransparentButtonStyle}"
                                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                            <TextBox Padding="{TemplateBinding Padding}"
                                     Margin="1,1,0,1"
                                     MinHeight="18"
                                     x:Name="PART_EditableTextBox"
                                     Style="{StaticResource ComboBoxEditableTextBox}"
                                     Visibility="Collapsed"
                                     IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
                                     VerticalAlignment="Center"/>
                        </Grid>
                        <Popup Name="PART_Popup"
                               AllowsTransparency="true"
                               Placement="Bottom"
                               IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}"
                               Focusable="false"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome Name="Shdw"
                                                          Color="Transparent"
                                                          MinWidth="{TemplateBinding ActualWidth}"
                                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="{TemplateBinding Background}"
                                        Margin="0 1 0 0"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource CommonControlsComboBoxListBorder}">
                                    <ScrollViewer Name="DropDownScrollViewer">
                                      <Grid RenderOptions.ClearTypeHint="Enabled"
                                            Background="{DynamicResource CommonControlsComboBoxListBackground}">
                                        <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle
                                                Name="OpaqueRect"
                                                Height="{Binding ElementName=DropDownBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=DropDownBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=DropDownBorder,Path=Background}" />
                                        </Canvas>
                                        <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                      </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Background"
                                    Property="Grid.ColumnSpan"
                                    Value="2"/>
                            <Setter TargetName="DropDownButton"
                                    Property="BorderBrush"
                                    Value="Transparent" />
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundDisabled}" />
                            <Setter TargetName="DropDownButton"
                                    Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphDisabled}" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxBorderDisabled}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxBackgroundDisabled}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxTextDisabled}" />
                        </Trigger>
                        <Trigger Property="ComboBox.IsDropDownOpen" Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxBackgroundPressed}" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxBorderPressed}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxTextPressed}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin"
                                           Value="true"/>
                                <Condition Property="IsDropDownOpen"
                                           Value="false"/>
                                <Condition Property="IsEditable"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectedContentBorder"
                                    Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxListItemBackgroundHover}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{x:Null}"/>
                            <Setter TargetName="ContentSite"
                                    Property="Visibility"
                                    Value="Collapsed"/>
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="DropDownButton"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxSeparatorHover}" />
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundHover}" />
                            <Setter TargetName="DropDownButton"
                                    Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphHover}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxBackgroundHover}" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxBorderHover}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxTextHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="true">
                            <Setter TargetName="DropDownButton"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxSeparatorFocused}" />
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundFocused}" />
                            <Setter TargetName="DropDownButton"
                                    Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxGlyphFocused}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource CommonControlsComboBoxBackgroundFocused}" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CommonControlsComboBoxBorderFocused}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxTextFocused}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="IsEditable" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxText}" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_Popup"
                                 Property="Popup.HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="SnapsToDevicePixels"
                                    Value="true"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="{DynamicResource ControlShadow}"/>
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="DropDownBorder"
                                    Property="MinHeight"
                                    Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin"
                                           Value="true"/>
                                <Condition Property="IsDropDownOpen"
                                           Value="false"/>
                                <Condition Property="IsEditable"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource CommonControlsComboBoxListItemTextHover}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="Padding"
                                    Value="2"/>
                            <Setter Property="IsTabStop"
                                    Value="false"/>
                        </Trigger>
                        <Trigger SourceName="DropDownScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}"
           TargetType="{x:Type TextBox}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource CommonControlsTextBoxText}"/>
        <Setter Property="Background"
                Value="{DynamicResource CommonControlsTextBoxBackground}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource CommonControlsTextBoxBorder}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="1,0"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="MinHeight"
                Value="18"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      VerticalAlignment="Center"
                                      MinHeight="18"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}"/>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource ToolBarDisabledFill}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolBarDisabledBorder}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Static ToolBar.MenuStyleKey}"
           TargetType="{x:Type Menu}">
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsMenuText}"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="Continue"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="OverridesDefaultStyle"
                        Value="true" />
                <Setter Property="Background"
                        Value="{DynamicResource ToolBarSeparatorFill}" />
                <Setter Property="Height" Value="1" />
                <Setter Property="Margin" Value="0 1 0 1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="1" Margin="4,0,0,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="{x:Type MenuItem}"
                   TargetType="{x:Type MenuItem}">
                <Setter Property="OverridesDefaultStyle"
                        Value="true" />
                <Setter Property="HorizontalContentAlignment"
                        Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment"
                        Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Background"
                        Value="Transparent"/>
                <Setter Property="Foreground"
                        Value="{DynamicResource SystemColorsMenuText}"/>
                <Setter Property="BorderThickness"
                        Value="1"/>
                <Setter Property="Margin"
                        Value="0,0,0,0"/>
                <Setter Property="Padding"
                        Value="8,3,8,3"/>
                <Setter Property="DockPanel.Dock"
                        Value="Top"/>
                <Setter Property="ScrollViewer.PanningMode"
                        Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled"
                        Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="Transparent"
                                  SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="24"
                                                      Width="Auto"
                                                      SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"
                                                      SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <Border Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Grid.ColumnSpan="4"
                                        Margin="0"/>
                                <ContentPresenter x:Name="Icon"
                                                  Margin="0"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Icon"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Border Name="GlyphPanel"
                                        Margin="3 2"
                                        Width="18"
                                        Height="18"
                                        Visibility="Hidden"
                                        Background="{DynamicResource EnvironmentCommandBarSelectedIcon}"
                                        BorderThickness="0">
                                    <Path Name="GlyphPanelPath"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"
                                          FlowDirection="LeftToRight"
                                          Fill="{DynamicResource EnvironmentCommandBarCheckBox}"
                                          StrokeThickness="1"
                                          Width="16" Height="16"
                                          Data="{StaticResource Checkmark}"/>
                                </Border>

                                <ContentPresenter Grid.Column="1"
                                                  ContentSource="Header"
                                                  VerticalAlignment="Center"
                                                  Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <TextBlock Grid.Column="2"
                                           VerticalAlignment="Center"
                                           Text="{TemplateBinding InputGestureText}"
                                           Margin="4,3,2,3"
                                           HorizontalAlignment="Right"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Icon"
                                         Value="{x:Null}">
                                    <Setter TargetName="Icon"
                                            Property="Visibility"
                                            Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsChecked"
                                         Value="true">
                                    <Setter TargetName="GlyphPanel"
                                            Property="Visibility"
                                            Value="Visible"/>
                                    <Setter TargetName="Icon"
                                            Property="Visibility"
                                            Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsHighlighted"
                                         Value="true">
                                    <Setter TargetName="Border"
                                            Property="BorderBrush"
                                            Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                                    <Setter TargetName="Border"
                                            Property="Background"
                                            Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                                    <Setter TargetName="GlyphPanel"
                                            Property="Background"
                                            Value="{DynamicResource EnvironmentCommandBarHoverOverSelectedIcon}"/>
                                    <Setter TargetName="GlyphPanelPath"
                                            Property="Fill"
                                            Value="{DynamicResource EnvironmentCommandBarCheckBoxMouseOver}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource SystemColorsGrayText}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Role"
                             Value="TopLevelHeader">
                        <Setter Property="Padding"
                                Value="9,0,9,1"/>
                        <Setter Property="Grid.IsSharedSizeScope"
                                Value="true"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border Name="Border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1"
                                            SnapsToDevicePixels="true">
                                        <DockPanel Name="Header">
                                            <ContentPresenter x:Name="Icon"
                                                              Margin="4,0,6,0"
                                                              VerticalAlignment="Center"
                                                              ContentSource="Icon"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <Path x:Name="GlyphPanel"
                                                  Margin="4,0,6,0"
                                                  Visibility="Collapsed"
                                                  VerticalAlignment="Center"
                                                  FlowDirection="LeftToRight"
                                                  Fill="{TemplateBinding Foreground}"
                                                  StrokeThickness="1"
                                                  Width="16" Height="16"
                                                  Data="{StaticResource Checkmark}"/>
                                            <ContentPresenter ContentSource="Header"
                                                              Margin="{TemplateBinding Padding}"
                                                              RecognizesAccessKey="True"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <Popup x:Name="PART_Popup"
                                                   Placement="Bottom"
                                                   HorizontalOffset="-1"
                                                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                                   Focusable="false"
                                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                                   AllowsTransparency="true">
                                                <theme:SystemDropShadowChrome Name="Shdw"
                                                                              Color="Transparent">
                                                    <Border Name="SubMenuBorder" Background="{DynamicResource ToolBarSubMenuBackground}"
                                                            BorderBrush="{DynamicResource ToolBarMenuBorder}"
                                                            BorderThickness="1">
                                                        <Grid>
                                                            <Rectangle Fill="{DynamicResource ToolBarSubMenuBackground}"
                                                                       Margin="0,-1,0,0"
                                                                       VerticalAlignment="Top"
                                                                       HorizontalAlignment="Left"
                                                                       Height="1"
                                                                       Width="{Binding ElementName=Header, Path=ActualWidth}" />
                                                            <ScrollViewer Name="SubMenuScrollViewer"
                                                                          FocusVisualStyle="{x:Null}"
                                                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                              <Grid RenderOptions.ClearTypeHint="Enabled" Grid.IsSharedSizeScope="true">
                                                                  <Grid.ColumnDefinitions>
                                                                      <ColumnDefinition MinWidth="24"
                                                                                        Width="Auto"
                                                                                        SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                                      <ColumnDefinition Width="*"/>
                                                                  </Grid.ColumnDefinitions>
                                                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                    <Rectangle
                                                                        Name="OpaqueRect"
                                                                        Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                                                        Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                                                        Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                                                </Canvas>
                                                                <Rectangle Fill="{DynamicResource ToolBarVerticalBackground}"
                                                                           Margin="0"/>
                                                                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                                Grid.ColumnSpan="2"
                                                                                KeyboardNavigation.TabNavigation="Cycle"
                                                                                Margin="2"
                                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                              </Grid>
                                                            </ScrollViewer>
                                                        </Grid>
                                                    </Border>
                                                </theme:SystemDropShadowChrome>
                                            </Popup>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSuspendingPopupAnimation"
                                                 Value="true">
                                            <Setter TargetName="PART_Popup"
                                                    Property="PopupAnimation"
                                                    Value="None"/>
                                        </Trigger>
                                        <Trigger Property="Icon"
                                                 Value="{x:Null}">
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                 Value="true">
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Visibility"
                                                    Value="Visible"/>
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource TopLevelMenuHeaderHoverBorder}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{DynamicResource TopLevelMenuHeaderHoverBackground}"/>
                                        </Trigger>
                                        <Trigger Property="IsSubmenuOpen"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource ToolBarMenuBorder}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{DynamicResource ToolBarOpenHeaderBackground}"/>
                                        </Trigger>
                                        <Trigger SourceName="PART_Popup"
                                                  Property="Popup.HasDropShadow"
                                                  Value="true">
                                             <Setter TargetName="Shdw"
                                                     Property="Margin"
                                                     Value="0,0,5,5"/>
                                             <Setter TargetName="Shdw"
                                                     Property="SnapsToDevicePixels"
                                                     Value="true"/>
                                             <Setter TargetName="Shdw"
                                                     Property="Color"
                                                     Value="{DynamicResource ControlShadow}"/>
                                         </Trigger>
                                        <Trigger Property="IsEnabled"
                                                 Value="false">
                                            <Setter Property="Foreground"
                                                    Value="{DynamicResource SystemColorsGrayText}"/>
                                        </Trigger>
                                        <Trigger SourceName="SubMenuScrollViewer"
                                                 Property="ScrollViewer.CanContentScroll"
                                                 Value="false" >
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Top"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Left"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="Role"
                             Value="TopLevelItem">
                        <Setter Property="Margin"
                                Value="0"/>
                        <Setter Property="Padding"
                                Value="7,1,8,2"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border Name="Border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1"
                                            SnapsToDevicePixels="true">
                                        <DockPanel>
                                            <ContentPresenter x:Name="Icon"
                                                              Margin="4,0,6,0"
                                                              VerticalAlignment="Center"
                                                              ContentSource="Icon"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <Path x:Name="GlyphPanel"
                                                  Margin="4,0,6,0"
                                                  Visibility="Collapsed"
                                                  VerticalAlignment="Center"
                                                  FlowDirection="LeftToRight"
                                                  Fill="{TemplateBinding Foreground}"
                                                  StrokeThickness="1"
                                                  Width="16" Height="16"
                                                  Data="{StaticResource Checkmark}"/>
                                            <ContentPresenter ContentSource="Header"
                                                              Margin="{TemplateBinding Padding}"
                                                              RecognizesAccessKey="True"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="Icon"
                                                 Value="{x:Null}">
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                 Value="true">
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Visibility"
                                                    Value="Visible"/>
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{DynamicResource ToolBarButtonHover}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled"
                                                 Value="false">
                                            <Setter Property="Foreground"
                                                    Value="{DynamicResource SystemColorsGrayText}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="Role"
                             Value="SubmenuHeader">
                        <Setter Property="DockPanel.Dock"
                                Value="Top"/>
                        <Setter Property="Padding"
                                Value="8,3,8,3"/>
                        <Setter Property="Grid.IsSharedSizeScope"
                                Value="true"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Grid Background="Transparent"
                                          SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="24"
                                                              Width="Auto"
                                                              SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"
                                                              SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border Name="Border"
                                                Background="{TemplateBinding Background}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Grid.ColumnSpan="4"
                                                Margin="0"/>
                                        <ContentPresenter x:Name="Icon"
                                                          Margin="2"
                                                          VerticalAlignment="Center"
                                                          ContentSource="Icon"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        <Border Name="GlyphPanel"
                                                Margin="3 2"
                                                Width="18"
                                                Height="18"
                                                Visibility="Hidden"
                                                Background="{DynamicResource EnvironmentCommandBarSelectedIcon}"
                                                BorderThickness="0">
                                            <Path Name="GlyphPanelPath"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  FlowDirection="LeftToRight"
                                                  Fill="{DynamicResource EnvironmentCommandBarCheckBox}"
                                                  StrokeThickness="1"
                                                  Width="16" Height="16"
                                                  Data="{StaticResource Checkmark}"/>
                                        </Border>
                                        <ContentPresenter Grid.Column="1"
                                                          ContentSource="Header"
                                                          Margin="{TemplateBinding Padding}"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        <Path Grid.Column="3"
                                              x:Name="rightArrowPath"
                                              DockPanel.Dock="Right"
                                              VerticalAlignment="Center"
                                              Margin="4,0,6,0"
                                              Fill="{TemplateBinding Foreground}"
                                              Data="{StaticResource RightArrow}"/>
                                        <Popup x:Name="PART_Popup"
                                               Placement="Right"
                                               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                               Focusable="false"
                                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                               AllowsTransparency="true">
                                            <theme:SystemDropShadowChrome Name="Shdw"
                                                                          Color="Transparent">
                                                <Border Name="SubMenuBorder" Background="{DynamicResource ToolBarSubMenuBackground}"
                                                        BorderBrush="{DynamicResource ToolBarMenuBorder}"
                                                        BorderThickness="1"
                                                        Grid.IsSharedSizeScope="true">
                                                    <ScrollViewer Name="SubMenuScrollViewer"
                                                                  FocusVisualStyle="{x:Null}"
                                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                      <Grid RenderOptions.ClearTypeHint="Enabled">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition MinWidth="24"
                                                                              Width="Auto"
                                                                              SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                            <ColumnDefinition Width="*"/>
                                                        </Grid.ColumnDefinitions>
                                                        <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                            <Rectangle
                                                                Name="OpaqueRect"
                                                                Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                                                Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                                                Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                                        </Canvas>
                                                        <Rectangle Fill="{DynamicResource ToolBarVerticalBackground}"
                                                                   Margin="0"/>
                                                        <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                        Grid.ColumnSpan="2"
                                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                                        Margin="2"
                                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                      </Grid>
                                                    </ScrollViewer>
                                                </Border>
                                            </theme:SystemDropShadowChrome>
                                        </Popup>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSuspendingPopupAnimation"
                                                 Value="true">
                                            <Setter TargetName="PART_Popup"
                                                    Property="PopupAnimation"
                                                    Value="None"/>
                                        </Trigger>
                                        <Trigger Property="Icon"
                                                 Value="{x:Null}">
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                 Value="true">
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Visibility"
                                                    Value="Visible"/>
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{DynamicResource EnvironmentCommandBarMenuItemMouseOver}"/>
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Background"
                                                    Value="{DynamicResource EnvironmentCommandBarHoverOverSelectedIcon}"/>
                                            <Setter TargetName="GlyphPanelPath"
                                                    Property="Fill"
                                                    Value="{DynamicResource EnvironmentCommandBarCheckBoxMouseOver}"/>
                                        </Trigger>
                                        <Trigger SourceName="PART_Popup"
                                                  Property="Popup.HasDropShadow"
                                                  Value="true">
                                             <Setter TargetName="Shdw"
                                                     Property="Margin"
                                                     Value="0,0,5,5"/>
                                             <Setter TargetName="Shdw"
                                                     Property="SnapsToDevicePixels"
                                                     Value="true"/>
                                             <Setter TargetName="Shdw"
                                                     Property="Color"
                                                     Value="{DynamicResource ControlShadow}"/>
                                         </Trigger>
                                        <Trigger SourceName="PART_Popup"
                                                  Property="Popup.IsOpen"
                                                  Value="true">
                                             <Setter TargetName="rightArrowPath"
                                                     Property="Fill"
                                                     Value="{DynamicResource EnvironmentCommandBarMenuMouseOverSubmenuGlyph}"/>
                                         </Trigger>
                                        <Trigger Property="IsEnabled"
                                                 Value="false">
                                            <Setter Property="Foreground"
                                                    Value="{DynamicResource SystemColorsGrayText}"/>
                                        </Trigger>
                                        <Trigger SourceName="SubMenuScrollViewer"
                                                 Property="ScrollViewer.CanContentScroll"
                                                 Value="false" >
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Top"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Left"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="{x:Type Hyperlink}"
           TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground"
                Value="{DynamicResource HyperlinkNormal}"/>
        <Setter Property="TextDecorations"
                Value="Underline"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Foreground"
                        Value="{DynamicResource HyperlinkMouseOver}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource HyperlinkDisabled}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="true">
                <Setter Property="Cursor"
                        Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!-- I've disabled the (IMHO) useless and ugly toolbar thumb that's always present on the right
         side. Enabling it will require adding more colors and styles. -->
    <Style x:Key="{x:Type ToolBar}"
           TargetType="{x:Type ToolBar}">
    <!--
    <Style.Triggers>
        <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
            <Setter Property="Background"
                        Value="{DynamicResource SystemColorsControl}" />
        </DataTrigger>
    </Style.Triggers>
    -->
    <Setter Property="Background" Value="{DynamicResource ToolBarHorizontalBackground}"/>
    <Setter Property="img:DsImage.BackgroundBrush" Value="{DynamicResource ToolBarIconBackground}" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToolBar}">
                <Grid Name="Grid"
                      Margin="0 0 0 0"
                      SnapsToDevicePixels="true">
                    <!--
                    <Grid HorizontalAlignment="Right"
                          x:Name="OverflowGrid">
                        <ToggleButton x:Name="OverflowButton"
                                      FocusVisualStyle="{x:Null}"
                                      IsEnabled="{TemplateBinding HasOverflowItems}"
                                      Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
                                      IsChecked="{Binding Path=IsOverflowOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press"/>
                        <Popup x:Name="OverflowPopup"
                               AllowsTransparency="true"
                               Placement="Bottom"
                               IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}"
                               StaysOpen="false"
                               Focusable="false"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome Name="Shdw"
                                                          Color="Transparent">
                                <Border Background="{DynamicResource ToolBarSubMenuBackground}"
                                        BorderBrush="{DynamicResource ToolBarMenuBorder}"
                                        BorderThickness="1"
                                        RenderOptions.ClearTypeHint="Enabled"
                                        x:Name="ToolBarSubMenuBorder">
                                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                          Margin="2"
                                                          WrapWidth="200"
                                                          Focusable="true"
                                                          FocusVisualStyle="{x:Null}"
                                                          KeyboardNavigation.TabNavigation="Cycle"
                                                          KeyboardNavigation.DirectionalNavigation="Cycle"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    -->
                    <Border x:Name="MainPanelBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            Style="{StaticResource ToolBarMainPanelBorderStyle}">
                        <DockPanel KeyboardNavigation.TabIndex="1"
                                   KeyboardNavigation.TabNavigation="Local">
                            <!--
                            <Thumb x:Name="ToolBarThumb"
                                   Style="{StaticResource ToolBarThumbStyle}"
                                   Margin="-3,-1,0,0"
                                   Width="10"
                                   Padding="6,5,1,6"/>
                            -->
                            <ContentPresenter x:Name="ToolBarHeader"
                                              ContentSource="Header"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Margin="4,0,4,0"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <ToolBarPanel x:Name="PART_ToolBarPanel"
                                          IsItemsHost="true"
                                          Margin="0,0,0,2"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </DockPanel>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <!--
                    <Trigger Property="IsOverflowOpen"
                             Value="true">
                        <Setter TargetName="ToolBarThumb"
                                Property="IsEnabled"
                                Value="false"/>
                    </Trigger>
                    -->
                    <Trigger Property="Header"
                             Value="{x:Null}">
                        <Setter TargetName="ToolBarHeader"
                                Property="Visibility"
                                Value="Collapsed"/>
                    </Trigger>
                    <!--
                    <Trigger Property="ToolBarTray.IsLocked"
                             Value="true">
                        <Setter TargetName="ToolBarThumb"
                                Property="Visibility"
                                Value="Collapsed"/>
                    </Trigger>
                    <Trigger SourceName="OverflowPopup"
                             Property="Popup.HasDropShadow"
                             Value="true">
                        <Setter TargetName="Shdw"
                                Property="Margin"
                                Value="0,0,5,5"/>
                        <Setter TargetName="Shdw"
                                Property="SnapsToDevicePixels"
                                Value="true"/>
                        <Setter TargetName="Shdw"
                                Property="Color"
                                Value="{DynamicResource ControlShadow}"/>
                    </Trigger>
                    -->
                    <Trigger Property="Orientation"
                             Value="Vertical">
                        <Setter TargetName="Grid"
                                Property="Margin"
                                Value="1,3,1,1"/>
                        <!--
                        <Setter TargetName="OverflowButton"
                                Property="Style"
                                Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                        <Setter TargetName="ToolBarThumb"
                                Property="Height"
                                Value="10"/>
                        <Setter TargetName="ToolBarThumb"
                                Property="Width"
                                Value="Auto"/>
                        <Setter TargetName="ToolBarThumb"
                                Property="Margin"
                                Value="-1,-3,0,0"/>
                        <Setter TargetName="ToolBarThumb"
                                Property="Padding"
                                Value="5,6,6,1"/>
                        -->
                        <Setter TargetName="ToolBarHeader"
                                Property="Margin"
                                Value="0,0,0,4"/>
                        <Setter TargetName="PART_ToolBarPanel"
                                Property="Margin"
                                Value="1,0,2,2"/>
                        <!--
                        <Setter TargetName="ToolBarThumb"
                                Property="DockPanel.Dock"
                                Value="Top"/>
                        -->
                        <Setter TargetName="ToolBarHeader"
                                Property="DockPanel.Dock"
                                Value="Top"/>
                        <!--
                        <Setter TargetName="OverflowGrid"
                                Property="HorizontalAlignment"
                                Value="Stretch"/>
                        <Setter TargetName="OverflowGrid"
                                Property="VerticalAlignment"
                                Value="Bottom"/>
                        <Setter TargetName="OverflowPopup"
                                Property="Placement"
                                Value="Right"/>
                        <Setter TargetName="MainPanelBorder"
                                Property="Margin"
                                Value="0,0,0,11"/>
                        -->
                        <Setter Property="Background"
                                Value="{DynamicResource ToolBarVerticalBackground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled"
                             Value="false">
                        <Setter Property="Foreground"
                                Value="{DynamicResource SystemColorsGrayText}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    </Style>

    <!--
    End of WPF standard styles
    -->
    
    <!-- The ListView is only used with the GridView at the moment, and our modified styles aren't
        loaded by default for some reason, so add these two styles.
    -->
    <Style x:Key="{x:Type ListView}"
           BasedOn="{StaticResource {x:Static GridView.GridViewStyleKey}}"
           TargetType="{x:Type ListView}">
    </Style>
    <Style x:Key="{x:Type ListViewItem}"
           BasedOn="{StaticResource {x:Static GridView.GridViewItemContainerStyleKey}}"
           TargetType="{x:Type ListViewItem}">
    </Style>

    <Style x:Key="{x:Type ComboBox}"
           BasedOn="{StaticResource {x:Static ToolBar.ComboBoxStyleKey}}"
           TargetType="{x:Type ComboBox}">
    </Style>


    <!--
    SharpTreeView styles and templates
    -->

    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16"
                            Height="16"
                            Background="Transparent">
                        <Path Name="ExpandPath"
                              Fill="Transparent"
                              Stroke="{DynamicResource TreeViewGlyph}"
                              Data="M0.5,0.5 L0.5,6.5 L6.5,0.5 z"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              SnapsToDevicePixels="True">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135"
                                                 CenterX="3"
                                                 CenterY="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"
                                                     CenterX="3"
                                                     CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{DynamicResource TreeViewGlyph}" />
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource TreeViewGlyph}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource TreeViewGlyphMouseOver}" />
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="Transparent" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{DynamicResource TreeViewGlyphMouseOver}" />
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{DynamicResource TreeViewGlyphMouseOver}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shtv:InsertMarker}">
        <Setter Property="IsHitTestVisible"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shtv:InsertMarker}">
                    <Grid>
                        <Border VerticalAlignment="Center"
                                Height="2"
                                Background="{DynamicResource SystemColorsHighlight}" />
                        <Path Data="m 0 0 l 3 3 l -3 3"
                              Fill="{DynamicResource SystemColorsHighlight}"
                              HorizontalAlignment="Left" />
                        <Path Data="m 0 0 l -3 3 l 3 3"
                              Fill="{DynamicResource SystemColorsHighlight}"
                              HorizontalAlignment="Right" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shtv:EditTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Foreground"
                Value="{DynamicResource CommonControlsTextBoxText}" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shtv:EditTextBox}">
                    <Border Background="{DynamicResource CommonControlsTextBoxBackground}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource CommonControlsTextBoxBorder}"
                            Padding="0 1 2 0">
                        <ScrollViewer Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type shtv:SharpTreeView}"
           BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Background"
                Value="{DynamicResource TreeViewBackground}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource TreeViewBorder}"/>
        <Setter Property="img:DsImage.BackgroundBrush"
                Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="AlternationCount" Value="1"/>
        <Style.Triggers>
            <Trigger Property="ShowRoot"
                     Value="False">
                <Setter Property="Padding"
                        Value="5 0 0 0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static shtv:SharpTreeView.DefaultItemContainerStyleKey}"
           TargetType="{x:Type shtv:SharpTreeViewItem}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.AlternationIndex"
                               Value="1" />
                    <Condition Property="shtv:SharpTreeView.ShowAlternation"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="{DynamicResource TVItemAlternationBackground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static shtv:SharpGridView.ItemContainerStyleKey}"
           TargetType="{x:Type ListViewItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource TreeViewItemSelectedBackground}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource TreeViewItemSelectedForeground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource TreeViewItemMouseOverTextBackground}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource TreeViewItemMouseOverForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shtv:SharpTreeViewItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shtv:SharpTreeViewItem}">
                    <Border x:Name="nodeBorder" Background="{TemplateBinding Background}">
                        <ctrls:FastTreeNodeView x:Name="nodeView"
                                                    Foreground="{Binding Foreground}"
                                                    HorizontalAlignment="Left" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="nodeBorder"
                                    Property="Background"
                                    Value="{DynamicResource TreeViewItemSelectedBackground}" />
                            <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource TreeViewItemSelectedForeground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="nodeBorder"
                                    Property="Background"
                                    Value="{DynamicResource TreeViewItemMouseOverTextBackground}" />
                            <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource TreeViewItemMouseOverForeground}" />
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="nodeBorder"
                                    Property="Background"
                                    Value="{DynamicResource SystemColorsControl}" />
                            <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource SystemColorsControlText}" />
                        </MultiTrigger>-->
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="nodeView"
                                    Property="Foreground"
                                    Value="{DynamicResource SystemColorsGrayText}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type shtv:SharpTreeNodeView}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shtv:SharpTreeNodeView}">
                    <Grid>
                        <StackPanel Orientation="Horizontal">
                            <FrameworkElement Name="spacer" />
                            <ToggleButton Name="expander"
                                          Style="{StaticResource ExpandCollapseToggleStyle}"
                                          IsChecked="{Binding IsExpanded}"
                                          Visibility="Hidden"
                                          VerticalAlignment="Center" />
                            <Border Name="checkBoxContainer"
                                    Width="16"
                                    Margin="0 0 3 0"
                                    Visibility="Collapsed">
                                <CheckBox IsChecked="{Binding IsChecked}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                            </Border>
                            <StackPanel Orientation="Horizontal"
                                        Background="Transparent"
                                        ToolTip="{Binding ToolTip}">
                                <ContentPresenter Name="icon"
                                                  Content="{Binding Icon}"
                                                  Width="16"
                                                  Height="16"
                                                  Margin="0 0 5 1"
                                                  VerticalAlignment="Center"
                                                  Focusable="False">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <img:DsImage ImageReference="{Binding}"/>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                                <Border Name="textContainer"
                                        Background="{TemplateBinding TextBackground}">
                                    <ContentPresenter Content="{Binding Text}"
                                                      Margin="2 0 6 0"
                                                      VerticalAlignment="Center"
                                                      Focusable="False" />
                                </Border>
                                <Border Name="textEditorContainer" />
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsEditing}"
                                     Value="True">
                            <Setter TargetName="textContainer"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </DataTrigger>
                          <DataTrigger Binding="{Binding ShowIcon}"
                                     Value="False">
                              <Setter TargetName="icon"
                                    Property="Visibility"
                                   Value="Collapsed" />
                           </DataTrigger>
                        <DataTrigger Binding="{Binding IsExpanded}"
                                     Value="True">
                            <Setter TargetName="icon"
                                    Property="Content"
                                    Value="{Binding ExpandedIcon}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ShowExpander}"
                                     Value="True">
                            <Setter TargetName="expander"
                                    Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCheckable}"
                                     Value="True">
                            <Setter TargetName="checkBoxContainer"
                                    Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCut}"
                                     Value="True">
                            <Setter TargetName="icon"
                                    Property="Opacity"
                                    Value="0.5" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Same as above except that Text and ToolTip aren't used. Used by eg. locals window -->
    <Style x:Key="SharpTreeNodeView_GridView" TargetType="{x:Type shtv:SharpTreeNodeView}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shtv:SharpTreeNodeView}">
                    <Grid>
                        <StackPanel Orientation="Horizontal">
                            <FrameworkElement Name="spacer" />
                            <ToggleButton Name="expander"
                                          Style="{StaticResource ExpandCollapseToggleStyle}"
                                          IsChecked="{Binding IsExpanded}"
                                          Visibility="Hidden"
                                          VerticalAlignment="Center" />
                            <Border Name="checkBoxContainer"
                                    Width="16"
                                    Margin="0 0 3 0"
                                    Visibility="Collapsed">
                                <CheckBox IsChecked="{Binding IsChecked}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                            </Border>
                            <ContentPresenter Name="icon"
                                                  Content="{Binding Icon}"
                                                  Width="16"
                                                  Height="16"
                                                  Margin="0 0 5 1"
                                                  VerticalAlignment="Center"
                                                  Focusable="False">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <img:DsImage ImageReference="{Binding}"/>
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </ContentPresenter>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                          <DataTrigger Binding="{Binding ShowIcon}"
                                     Value="False">
                              <Setter TargetName="icon"
                                    Property="Visibility"
                                   Value="Collapsed" />
                           </DataTrigger>
                        <DataTrigger Binding="{Binding IsExpanded}"
                                     Value="True">
                            <Setter TargetName="icon"
                                    Property="Content"
                                    Value="{Binding ExpandedIcon}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ShowExpander}"
                                     Value="True">
                            <Setter TargetName="expander"
                                    Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCheckable}"
                                     Value="True">
                            <Setter TargetName="checkBoxContainer"
                                    Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCut}"
                                     Value="True">
                            <Setter TargetName="icon"
                                    Property="Opacity"
                                    Value="0.5" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    End of SharpTreeView styles and templates
    -->

    <Style x:Key="SharpTreeViewGridViewStyle"
           BasedOn="{StaticResource {x:Static GridView.GridViewStyleKey}}"
           TargetType="{x:Type shtv:SharpTreeView}">
        <Setter Property="img:DsImage.BackgroundBrush"
                Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
    </Style>

    <!-- See FixEditorContextMenuStyle() in App.xaml.cs for more info -->
    <Style x:Key="EditorContextMenuStyle"
           BasedOn="{StaticResource {x:Type ContextMenu}}"
           TargetType="{x:Type ContextMenu}">
    </Style>

    <DataTemplate DataType="{x:Type tb:ToolBarButtonVM}">
        <Button ToolTipService.ShowOnDisabled="True" ToolTip="{Binding ToolTip}" Command="{Binding Command}" CommandTarget="{Binding CommandTarget}" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" FocusVisualStyle="{x:Null}" Focusable="False">
            <Button.Resources>
                <Style TargetType="{x:Type img:DsImage}" BasedOn="{StaticResource {x:Type img:DsImage}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Control}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                            <Setter Property="Opacity" Value="0.30" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Resources>
            <StackPanel Orientation="Horizontal">
                <img:DsImage ImageReference="{Binding ImageReference}" />
                <TextBlock Margin="5 0 5 0"  Text="{Binding Header}" Visibility="{Binding HasHeader, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </StackPanel>
        </Button>
    </DataTemplate>

    <Style x:Key="StackedContentGridStyle"
           TargetType="{x:Type Grid}">
    </Style>

    <Style x:Key="{x:Type ctrls:TabButton}"
           TargetType="{x:Type ctrls:TabButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="TextElement.Foreground" Value="{Binding GlyphForeground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrls:TabButton}">
                    <Border x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{Binding HoverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness"
                                    TargetName="Border"
                                    Value="{Binding HoverBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding HoverForeground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness"
                                    TargetName="Border"
                                    Value="{Binding PressedBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding PressedForeground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ctrls:WinSysButton}"
           TargetType="{x:Type ctrls:WinSysButton}"
           BasedOn="{StaticResource {x:Type ctrls:TabButton}}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0,3,0,0" />
        <Setter Property="Width" Value="34" />
        <Setter Property="Height" Value="25" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
        <Setter Property="HoverBorderThickness" Value="1,0,1,1" />
        <Setter Property="PressedBorderThickness" Value="1,0,1,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource EnvironmentMainWindowButtonActiveBorder}" />
        <Setter Property="GlyphForeground" Value="{DynamicResource EnvironmentMainWindowButtonActiveGlyph}" />
        <Setter Property="HoverBackground" Value="{DynamicResource EnvironmentMainWindowButtonHoverActive}" />
        <Setter Property="HoverBorderBrush" Value="{DynamicResource EnvironmentMainWindowButtonHoverActiveBorder}" />
        <Setter Property="HoverForeground" Value="{DynamicResource EnvironmentMainWindowButtonHoverActiveGlyph}" />
        <Setter Property="PressedBackground" Value="{DynamicResource EnvironmentMainWindowButtonDown}" />
        <Setter Property="PressedBorderBrush" Value="{DynamicResource EnvironmentMainWindowButtonDownBorder}" />
        <Setter Property="PressedForeground" Value="{DynamicResource EnvironmentMainWindowButtonDownGlyph}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrls:WinSysButton}">
                    <Border x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path
                            x:Name="path"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{Binding HoverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness"
                                    TargetName="Border"
                                    Value="{Binding HoverBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding HoverForeground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="Border"
                                    Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background"
                                    TargetName="Border"
                                    Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness"
                                    TargetName="Border"
                                    Value="{Binding PressedBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="TextElement.Foreground"
                                    Value="{Binding PressedForeground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="CurrentWinSysType" Value="Minimize">
                            <Setter Property="ToolTip" Value="{x:Static p:dnSpy_Resources.Window_Minimize}" />
                            <Setter TargetName="path" Property="Width" Value="9" />
                            <Setter TargetName="path" Property="Height" Value="9" />
                            <Setter TargetName="path" Property="Stretch" Value="None" />
                            <Setter TargetName="path" Property="Data" Value="F1M0,6L0,9 9,9 9,6 0,6z" />
                        </Trigger>
                        <Trigger Property="CurrentWinSysType" Value="Maximize">
                            <Setter Property="ToolTip" Value="{x:Static p:dnSpy_Resources.Window_Maximize}" />
                            <Setter TargetName="path" Property="Width" Value="9" />
                            <Setter TargetName="path" Property="Height" Value="9" />
                            <Setter TargetName="path" Property="Stretch" Value="Uniform" />
                            <Setter TargetName="path" Property="Data" Value="F1M0,0L0,9 9,9 9,0 0,0 0,3 8,3 8,8 1,8 1,3z" />
                        </Trigger>
                        <Trigger Property="CurrentWinSysType" Value="Restore">
                            <Setter Property="ToolTip" Value="{x:Static p:dnSpy_Resources.Window_Restore}" />
                            <Setter TargetName="path" Property="Width" Value="10" />
                            <Setter TargetName="path" Property="Height" Value="10" />
                            <Setter TargetName="path" Property="Stretch" Value="Uniform" />
                            <Setter TargetName="path" Property="Data" Value="F1M0,10L0,3 3,3 3,0 10,0 10,2 4,2 4,3 7,3 7,6 6,6 6,5 1,5 1,10z M1,10L7,10 7,7 10,7 10,2 9,2 9,6 6,6 6,9 1,9z" />
                        </Trigger>
                        <Trigger Property="CurrentWinSysType" Value="Close">
                            <Setter Property="ToolTip" Value="{x:Static p:dnSpy_Resources.Window_Close}" />
                            <Setter TargetName="path" Property="Width" Value="10" />
                            <Setter TargetName="path" Property="Height" Value="8" />
                            <Setter TargetName="path" Property="Stretch" Value="Uniform" />
                            <Setter TargetName="path" Property="Data" Value="F1M0,0L2,0 5,3 8,0 10,0 6,4 10,8 8,8 5,5 2,8 0,8 4,4 0,0z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ctrls:SysMenuButton}" TargetType="{x:Type ctrls:SysMenuButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrls:SysMenuButton}">
                    <ContentPresenter
                        RecognizesAccessKey="True"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Focusable="False" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ctrls2:MetroWindow}" TargetType="{x:Type ctrls2:MetroWindow}">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Icon" Value="../Images/dnSpy.ico"/>
        <Setter Property="IsDebugging" Value="{DynamicResource IsDebuggingKey}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrls2:MetroWindow}">
                    <Border
                        x:Name="border"
                        ctrls2:MetroWindow.MaximizedElement="True"
                        BorderBrush="{TemplateBinding ActiveDefaultBorder}"
                        BorderThickness="1"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="titleBarRowDef" Height="{x:Static ctrls2:MetroWindow.GridCaptionHeight}" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <DockPanel
                                x:Name="titleBar"
                                Grid.Row="0"
                                Background="{TemplateBinding ActiveCaption}"
                                TextElement.Foreground="{TemplateBinding ActiveCaptionText}"
                                >
                                <ctrls:SysMenuButton
                                    x:Name="sysMenuButton"
                                    img:DsImage.BackgroundBrush="{DynamicResource EnvironmentMainWindowActiveCaption}"
                                    DockPanel.Dock="Left"
                                    WindowChrome.IsHitTestVisibleInChrome="True"
                                    Command="{x:Static ctrls2:MetroWindow.ShowSystemMenuCommand}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                    Margin="4 7 4 7"
                                    Padding="0 0 0 0"
                                    Background="Transparent"
                                    VerticalAlignment="Center"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowMenuButton, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                    <img:DsImage ImageReference="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SystemMenuImage}" />
                                </ctrls:SysMenuButton>
                                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
                                    <ctrls:WinSysButton x:Name="minButton" WinSysType="Minimize" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowMinimizeButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    <ctrls:WinSysButton x:Name="maxButton" WinSysType="Maximize" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowMaximizeButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    <ctrls:WinSysButton x:Name="closeButton" WinSysType="Close" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowCloseButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                </StackPanel>
                                <TextBlock
                                    Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"
                                    Margin="5 0 0 0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    TextTrimming="CharacterEllipsis"
                                    TextWrapping="NoWrap" />
                            </DockPanel>
                            <Grid Grid.Row="1">
                                <AdornerDecorator>
                                    <ContentPresenter/>
                                </AdornerDecorator>
            
                                <ResizeGrip x:Name="WindowResizeGrip"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            Visibility="Collapsed"
                                            IsTabStop="false"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="sysMenuButton" Property="img:DsImage.BackgroundBrush" Value="{DynamicResource EnvironmentMainWindowInactiveCaption}" />
                        </Trigger>
                        <Trigger Property="IsFullScreen" Value="True">
                            <Setter Property="WindowState" Value="Maximized" />
                            <Setter TargetName="titleBar" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="titleBarRowDef" Property="Height" Value="0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                            <Setter Property="ResizeMode" Value="NoResize" />
                            <Setter Property="UseResizeBorder" Value="False" />
                            <Setter Property="WindowStyle" Value="None" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter Property="UseResizeBorder" Value="False" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="UseResizeBorder" Value="False" />
                        </Trigger>
                        <Trigger Property="IsDebugging" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding ActiveDebuggingBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding InactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="titleBar" Property="Background" Value="{Binding InactiveCaption, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="titleBar" Property="TextElement.Foreground" Value="{Binding InactiveCaptionText, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="minButton" Property="BorderBrush" Value="{Binding ButtonInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="minButton" Property="GlyphForeground" Value="{Binding ButtonInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="minButton" Property="HoverBackground" Value="{Binding ButtonHoverInactive, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="minButton" Property="HoverBorderBrush" Value="{Binding ButtonHoverInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="minButton" Property="HoverForeground" Value="{Binding ButtonHoverInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="maxButton" Property="BorderBrush" Value="{Binding ButtonInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="maxButton" Property="GlyphForeground" Value="{Binding ButtonInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="maxButton" Property="HoverBackground" Value="{Binding ButtonHoverInactive, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="maxButton" Property="HoverBorderBrush" Value="{Binding ButtonHoverInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="maxButton" Property="HoverForeground" Value="{Binding ButtonHoverInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="closeButton" Property="BorderBrush" Value="{Binding ButtonInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="closeButton" Property="GlyphForeground" Value="{Binding ButtonInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="closeButton" Property="HoverBackground" Value="{Binding ButtonHoverInactive, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="closeButton" Property="HoverBorderBrush" Value="{Binding ButtonHoverInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                            <Setter TargetName="closeButton" Property="HoverForeground" Value="{Binding ButtonHoverInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls2:MetroWindow}}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode"
                                           Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState"
                                           Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MainWindowStyle" TargetType="{x:Type ctrls2:MetroWindow}" BasedOn="{StaticResource {x:Type ctrls2:MetroWindow}}">
        <Setter Property="Foreground" Value="{DynamicResource EnvironmentForeground}" />
        <Setter Property="Background" Value="{DynamicResource EnvironmentBackground}" />
        <Setter Property="ActiveCaption" Value="{DynamicResource EnvironmentMainWindowActiveCaption}" />
        <Setter Property="ActiveCaptionText" Value="{DynamicResource EnvironmentMainWindowActiveCaptionText}" />
        <Setter Property="ActiveDebuggingBorder" Value="{DynamicResource EnvironmentMainWindowActiveDebuggingBorder}" />
        <Setter Property="ActiveDefaultBorder" Value="{DynamicResource EnvironmentMainWindowActiveDefaultBorder}" />
        <Setter Property="InactiveBorder" Value="{DynamicResource EnvironmentMainWindowInactiveBorder}" />
        <Setter Property="InactiveCaption" Value="{DynamicResource EnvironmentMainWindowInactiveCaption}" />
        <Setter Property="InactiveCaptionText" Value="{DynamicResource EnvironmentMainWindowInactiveCaptionText}" />
        <Setter Property="ButtonInactiveBorder" Value="{DynamicResource EnvironmentMainWindowButtonInactiveBorder}" />
        <Setter Property="ButtonInactiveGlyph" Value="{DynamicResource EnvironmentMainWindowButtonInactiveGlyph}" />
        <Setter Property="ButtonHoverInactive" Value="{DynamicResource EnvironmentMainWindowButtonHoverInactive}" />
        <Setter Property="ButtonHoverInactiveBorder" Value="{DynamicResource EnvironmentMainWindowButtonHoverInactiveBorder}" />
        <Setter Property="ButtonHoverInactiveGlyph" Value="{DynamicResource EnvironmentMainWindowButtonHoverInactiveGlyph}" />
        <Setter Property="ShowMenuButton" Value="True" />
        <Setter Property="ShowMinimizeButton" Value="True" />
        <Setter Property="ShowMaximizeButton" Value="True" />
        <Setter Property="ShowCloseButton" Value="True" />
    </Style>
    <Style x:Key="DialogWindowStyle" TargetType="{x:Type ctrls2:MetroWindow}" BasedOn="{StaticResource {x:Type ctrls2:MetroWindow}}">
        <Setter Property="Foreground" Value="{DynamicResource DialogWindowForeground}"/>
        <Setter Property="Background" Value="{DynamicResource DialogWindowBackground}"/>
        <Setter Property="ActiveCaption" Value="{DynamicResource DialogWindowActiveCaption}" />
        <Setter Property="ActiveCaptionText" Value="{DynamicResource DialogWindowActiveCaptionText}" />
        <Setter Property="ActiveDebuggingBorder" Value="{DynamicResource DialogWindowActiveDebuggingBorder}" />
        <Setter Property="ActiveDefaultBorder" Value="{DynamicResource DialogWindowActiveDefaultBorder}" />
        <Setter Property="InactiveBorder" Value="{DynamicResource DialogWindowInactiveBorder}" />
        <Setter Property="InactiveCaption" Value="{DynamicResource DialogWindowInactiveCaption}" />
        <Setter Property="InactiveCaptionText" Value="{DynamicResource DialogWindowInactiveCaptionText}" />
        <Setter Property="ButtonInactiveBorder" Value="{DynamicResource DialogWindowButtonInactiveBorder}" />
        <Setter Property="ButtonInactiveGlyph" Value="{DynamicResource DialogWindowButtonInactiveGlyph}" />
        <Setter Property="ButtonHoverInactive" Value="{DynamicResource DialogWindowButtonHoverInactive}" />
        <Setter Property="ButtonHoverInactiveBorder" Value="{DynamicResource DialogWindowButtonHoverInactiveBorder}" />
        <Setter Property="ButtonHoverInactiveGlyph" Value="{DynamicResource DialogWindowButtonHoverInactiveGlyph}" />
        <Setter Property="ShowMenuButton" Value="False" />
        <Setter Property="ShowMinimizeButton" Value="False" />
        <Setter Property="ShowMaximizeButton" Value="False" />
        <Setter Property="ShowCloseButton" Value="True" />
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
    </Style>
    <Style x:Key="DialogBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource TabItemSelectedBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource SystemColorsControl}"/>
    </Style>
    <Style x:Key="DialogButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="10,1,10,1" />
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="OtherDialogButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="23"/>
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="EllipsisButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="7 0 7 0" />
        <Setter Property="Content" Value="..." />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="TextEditorButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="10,1,10,1" />
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="Cursor" Value="Arrow" />
    </Style>

    <Style x:Key="FileTabGroupTabControlStyle"
           BasedOn="{StaticResource {x:Type TabControl}}"
           TargetType="{x:Type TabControl}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Padding"
                Value="0 2 0 0"/>
        <Setter Property="BorderThickness"
                Value="0 0 0 0"/>
        <Setter Property="Background"
                Value="{DynamicResource TransparentBrush}"/>
        <Setter Property="Visibility"
                Value="{Binding HasOpenedDoc, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true"
                          ClipToBounds="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  mvvm:IsDraggableAP.IsDraggable="True"
                                  Panel.ZIndex ="1" 
                                  KeyboardNavigation.TabIndex="1"
                                  Grid.Column="0"
                                  Grid.Row="0"
                                  Margin="0 0 0 0"
                                  IsItemsHost="true"/>
                        <Border x:Name="ContentPanel"
                                mvvm:IsDraggableAP.IsDraggable="False"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                Grid.Column="0"
                                Grid.Row="1">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Active" Binding="{Binding Path=DataContext.TabGroupState, RelativeSource={RelativeSource Self}}">
                            <Setter Property="Background" Value="{DynamicResource EnvironmentFileTabSelectedGradient}" />
                        </DataTrigger>
                        <DataTrigger Value="Inactive" Binding="{Binding Path=DataContext.TabGroupState, RelativeSource={RelativeSource Self}}">
                            <Setter Property="Background" Value="{DynamicResource EnvironmentFileTabInactiveGradient}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileTabGroupTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border ToolTip="{Binding ToolTip}" mvvm:IsDraggableAP.IsDraggable="True">
                        <Border>
                            <Border Name="Border"
                                    Background="{DynamicResource EnvironmentFileTabBackground}"
                                    BorderBrush="{DynamicResource EnvironmentFileTabBorder}"
                                    BorderThickness="0 2 0 0"
                                    Padding="0 1 0 3">
                                <DockPanel Name="DockPanel" TextBlock.Foreground="{DynamicResource EnvironmentFileTabText}">
                                    <ctrls:TabButton x:Name="CloseButton"
                                                     mvvm:IsDraggableAP.IsDraggable="False"
                                                     DockPanel.Dock="Right"
                                                     Margin="3 0 3 0"
                                                     Command="{Binding CloseCommand}"
                                                     GlyphForeground="Transparent"
                                                     HoverBackground="{DynamicResource EnvironmentFileTabButtonHoverInactive}"
                                                     HoverBorderBrush="{DynamicResource EnvironmentFileTabButtonHoverInactiveBorder}"
                                                     HoverForeground="{DynamicResource EnvironmentFileTabButtonHoverInactiveGlyph}"
                                                     HoverBorderThickness="1"
                                                     PressedBackground="{DynamicResource EnvironmentFileTabButtonDownInactive}"
                                                     PressedBorderBrush="{DynamicResource EnvironmentFileTabButtonDownInactiveBorder}"
                                                     PressedForeground="{DynamicResource EnvironmentFileTabButtonDownInactiveGlyph}"
                                                     PressedBorderThickness="1"
                                                     ToolTip="{x:Static p:dnSpy_Resources.CloseTabButtonToolTip}">
                                        <Path x:Name="CloseButtonCross"
                                              Width="10" Height="8"
                                              Stretch="Uniform"
                                              Data="F1M0,0L2,0 5,3 8,0 10,0 6,4 10,8 8,8 5,5 2,8 0,8 4,4 0,0z"
                                              Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                                    </ctrls:TabButton>
                                    <TextBlock HorizontalAlignment="Stretch"
                                               Margin="4 0 4 0"
                                               VerticalAlignment="Stretch"
                                               Text="{Binding Header}"
                                               MaxWidth="230"
                                               TextTrimming="CharacterEllipsis"
                                               ToolTip="{Binding ToolTip}" />
                                </DockPanel>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource EnvironmentFileTabHotGradient}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource EnvironmentFileTabHotBorder}" />
                            <Setter TargetName="DockPanel" Property="TextBlock.Foreground" Value="{DynamicResource EnvironmentFileTabHotText}" />
                            <Setter TargetName="CloseButton" Property="GlyphForeground" Value="{DynamicResource EnvironmentFileTabHotGlyph}" />
                        </DataTrigger>
                        <DataTrigger Value="True" Binding="{Binding IsSelected}">
                            <Setter Property="UIElement.Focusable" Value="False" />
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding Path=IsActive}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource EnvironmentFileTabSelectedGradient}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource EnvironmentFileTabSelectedBorder}" />
                            <Setter TargetName="DockPanel" Property="TextBlock.Foreground" Value="{DynamicResource EnvironmentFileTabSelectedText}" />
                            <Setter TargetName="CloseButton" Property="HoverBackground" Value="{DynamicResource EnvironmentFileTabButtonHoverSelectedActive}" />
                            <Setter TargetName="CloseButton" Property="HoverBorderBrush" Value="{DynamicResource EnvironmentFileTabButtonHoverSelectedActiveBorder}" />
                            <Setter TargetName="CloseButton" Property="HoverForeground" Value="{DynamicResource EnvironmentFileTabButtonHoverSelectedActiveGlyph}" />
                            <Setter TargetName="CloseButton" Property="PressedBackground" Value="{DynamicResource EnvironmentFileTabButtonDownSelectedActive}" />
                            <Setter TargetName="CloseButton" Property="PressedBorderBrush" Value="{DynamicResource EnvironmentFileTabButtonDownSelectedActiveBorder}" />
                            <Setter TargetName="CloseButton" Property="PressedForeground" Value="{DynamicResource EnvironmentFileTabButtonDownSelectedActiveGlyph}" />
                            <Setter TargetName="CloseButton" Property="GlyphForeground" Value="{DynamicResource EnvironmentFileTabButtonSelectedActiveGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding Path=IsActive}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource EnvironmentFileTabInactiveGradient}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource EnvironmentFileTabInactiveBorder}" />
                            <Setter TargetName="DockPanel" Property="TextBlock.Foreground" Value="{DynamicResource EnvironmentFileTabInactiveText}" />
                            <Setter TargetName="CloseButton" Property="HoverBackground" Value="{DynamicResource EnvironmentFileTabButtonHoverSelectedInactive}" />
                            <Setter TargetName="CloseButton" Property="HoverBorderBrush" Value="{DynamicResource EnvironmentFileTabButtonHoverSelectedInactiveBorder}" />
                            <Setter TargetName="CloseButton" Property="HoverForeground" Value="{DynamicResource EnvironmentFileTabButtonHoverSelectedInactiveGlyph}" />
                            <Setter TargetName="CloseButton" Property="PressedBackground" Value="{DynamicResource EnvironmentFileTabButtonDownSelectedInactive}" />
                            <Setter TargetName="CloseButton" Property="PressedBorderBrush" Value="{DynamicResource EnvironmentFileTabButtonDownSelectedInactiveBorder}" />
                            <Setter TargetName="CloseButton" Property="PressedForeground" Value="{DynamicResource EnvironmentFileTabButtonDownSelectedInactiveGlyph}" />
                            <Setter TargetName="CloseButton" Property="GlyphForeground" Value="{DynamicResource EnvironmentFileTabButtonSelectedInactiveGlyph}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolWindowGroupTabControlStyle"
           BasedOn="{StaticResource {x:Type TabControl}}"
           TargetType="{x:Type TabControl}">
        <Setter Property="Foreground"
                Value="{DynamicResource SystemColorsControlText}"/>
        <Setter Property="Padding"
                Value="0 0 0 0"/>
        <Setter Property="BorderThickness"
                Value="0 0 0 0"/>
        <Setter Property="Background"
                Value="{DynamicResource EnvironmentToolWindow}"/>
        <Setter Property="Visibility"
                Value="{Binding HasOpenedDoc, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true"
                          ClipToBounds="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  mvvm:IsDraggableAP.IsDraggable="True"
                                  Panel.ZIndex ="1"
                                  KeyboardNavigation.TabIndex="1"
                                  Grid.Column="0"
                                  Grid.Row="1"
                                  Margin="0 -1 0 0"
                                  IsItemsHost="true"/>
                        <Border x:Name="ContentPanel"
                                mvvm:IsDraggableAP.IsDraggable="False"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1 1 1 1"
                                BorderBrush="{DynamicResource EnvironmentToolWindowBorder}"
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                Grid.Column="0"
                                Grid.Row="0">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="1" Binding="{Binding Path=Items.Count, RelativeSource={RelativeSource Self}}">
                            <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolWindowGroupTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Name="TabBorder"
                            mvvm:IsDraggableAP.IsDraggable="True"
                            ToolTip="{Binding ToolTip}"
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="Stretch"
                            BorderBrush="{DynamicResource EnvironmentToolWindowBorder}"
                            BorderThickness="0 1 0 0">
                        <Border Name="Border"
                                Background="{DynamicResource EnvironmentToolWindowTabGradient}"
                                BorderBrush="{DynamicResource EnvironmentToolWindowTabBorder}"
                                BorderThickness="0 0 0 2"
                                Padding="0 0 0 1">
                            <DockPanel Name="DockPanel" TextBlock.Foreground="{DynamicResource EnvironmentToolWindowTabText}">
                                <TextBlock HorizontalAlignment="Stretch"
                                           Margin="5 2 5 0"
                                           VerticalAlignment="Stretch"
                                           Text="{Binding Header}"
                                           MaxWidth="230"
                                           TextTrimming="CharacterEllipsis"
                                           ToolTip="{Binding ToolTip}" />
                            </DockPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource EnvironmentToolWindowTabMouseOverBackgroundGradient}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource EnvironmentToolWindowTabMouseOverBorder}" />
                            <Setter TargetName="DockPanel" Property="TextBlock.Foreground" Value="{DynamicResource EnvironmentToolWindowTabMouseOverText}" />
                        </DataTrigger>
                        <DataTrigger Value="True" Binding="{Binding IsSelected}">
                            <Setter Property="Panel.ZIndex" Value="-1" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource EnvironmentToolWindowTabSelectedTab}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource EnvironmentToolWindowTabSelectedBorder}" />
                            <Setter TargetName="TabBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter Property="Focusable" Value="False" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False" Binding="{Binding IsActive}" />
                                <Condition Value="True" Binding="{Binding IsSelected}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="DockPanel" Property="TextBlock.Foreground" Value="{DynamicResource EnvironmentToolWindowTabSelectedText}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding Path=IsSelected}" />
                                <Condition Value="True" Binding="{Binding Path=IsActive}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="DockPanel" Property="TextBlock.Foreground" Value="{DynamicResource EnvironmentToolWindowTabSelectedActiveText}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type tw:TabContentImpl}">
        <Border Background="Transparent">
            <DockPanel>
                <Border Name="Bd"
                        mvvm:IsDraggableAP.IsDraggable="True"
                        BorderThickness="0,0,0,0"
                        MinHeight="19"
                        Padding="1,3,1,3"
                        Focusable="False"
                        BorderBrush="{DynamicResource EnvironmentTitleBarInactiveBorder}"
                        Background="{DynamicResource EnvironmentTitleBarInactiveGradient}"
                        TextBlock.Foreground="{DynamicResource EnvironmentTitleBarInactiveText}"
                        DockPanel.Dock="Top">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Title}" Margin="3,0" VerticalAlignment="Center"/>
                        <Rectangle Grid.Column="1" Name="Rect" Height="5" VerticalAlignment="Center" Margin="8 0 4 0" Fill="{DynamicResource EnvironmentTitleBarDragHandle}" />
                        <ctrls:TabButton x:Name="MenuButton"
                                         Grid.Column="2"
                                         mvvm:IsDraggableAP.IsDraggable="False"
                                         Margin="3 -1 3 0"
                                         ClickMode="Press"
                                         Command="{Binding ShowWindowPositionCommand}"
                                         CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                                         GlyphForeground="{DynamicResource EnvironmentToolWindowButtonInactiveGlyph}"
                                         HoverBackground="{DynamicResource EnvironmentToolWindowButtonHoverInactive}"
                                         HoverBorderBrush="{DynamicResource EnvironmentToolWindowButtonHoverInactiveBorder}"
                                         HoverForeground="{DynamicResource EnvironmentToolWindowButtonHoverInactiveGlyph}"
                                         HoverBorderThickness="1"
                                         PressedBackground="{DynamicResource EnvironmentToolWindowButtonDown}"
                                         PressedBorderBrush="{DynamicResource EnvironmentToolWindowButtonDownBorder}"
                                         PressedForeground="{DynamicResource EnvironmentToolWindowButtonDownActiveGlyph}"
                                         PressedBorderThickness="1"
                                         ToolTip="{x:Static p:dnSpy_Resources.ToolWindowWinPosButtonToolTip}">
                            <Path Width="8" Height="4"
                                  Stretch="Uniform"
                                  Data="F1 M0,0 L4,4 L8,0 L0,0"
                                  Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                        </ctrls:TabButton>
                        <ctrls:TabButton x:Name="PART_Close"
                                         Grid.Column="3"
                                         mvvm:IsDraggableAP.IsDraggable="False"
                                         Margin="0 -1 3 0"
                                         Command="{Binding CloseCommand}"
                                         GlyphForeground="{DynamicResource EnvironmentToolWindowButtonInactiveGlyph}"
                                         HoverBackground="{DynamicResource EnvironmentToolWindowButtonHoverInactive}"
                                         HoverBorderBrush="{DynamicResource EnvironmentToolWindowButtonHoverInactiveBorder}"
                                         HoverForeground="{DynamicResource EnvironmentToolWindowButtonHoverInactiveGlyph}"
                                         HoverBorderThickness="1"
                                         PressedBackground="{DynamicResource EnvironmentToolWindowButtonDown}"
                                         PressedBorderBrush="{DynamicResource EnvironmentToolWindowButtonDownBorder}"
                                         PressedForeground="{DynamicResource EnvironmentToolWindowButtonDownActiveGlyph}"
                                         PressedBorderThickness="1"
                                         ToolTip="{x:Static p:dnSpy_Resources.CloseTabButtonToolTip}">
                            <Path x:Name="CloseButtonCross"
                                  Width="10" Height="8"
                                  Stretch="Uniform"
                                  Data="F1M0,0L2,0 5,3 8,0 10,0 6,4 10,8 8,8 5,5 2,8 0,8 4,4 0,0z"
                                  Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                        </ctrls:TabButton>
                    </Grid>
                </Border>
                <ContentPresenter Content="{Binding ContentUIObject}" />
            </DockPanel>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Value="True" Binding="{Binding IsActive}">
                <Setter TargetName="Bd" Value="{DynamicResource EnvironmentTitleBarActiveGradient}" Property="Background" />
                <Setter TargetName="Bd" Value="{DynamicResource EnvironmentTitleBarActiveBorder}" Property="BorderBrush" />
                <Setter TargetName="Bd" Value="{DynamicResource EnvironmentTitleBarActiveText}" Property="TextElement.Foreground" />
                <Setter TargetName="PART_Close" Value="{DynamicResource EnvironmentToolWindowButtonHoverActive}" Property="HoverBackground" />
                <Setter TargetName="PART_Close" Value="{DynamicResource EnvironmentToolWindowButtonHoverActiveBorder}" Property="HoverBorderBrush" />
                <Setter TargetName="PART_Close" Value="{DynamicResource EnvironmentToolWindowButtonHoverActiveGlyph}" Property="HoverForeground" />
                <Setter TargetName="PART_Close" Value="{DynamicResource EnvironmentToolWindowButtonActiveGlyph}" Property="GlyphForeground" />
                <Setter TargetName="MenuButton" Value="{DynamicResource EnvironmentToolWindowButtonHoverActive}" Property="HoverBackground" />
                <Setter TargetName="MenuButton" Value="{DynamicResource EnvironmentToolWindowButtonHoverActiveBorder}" Property="HoverBorderBrush" />
                <Setter TargetName="MenuButton" Value="{DynamicResource EnvironmentToolWindowButtonHoverActiveGlyph}" Property="HoverForeground" />
                <Setter TargetName="MenuButton" Value="{DynamicResource EnvironmentToolWindowButtonActiveGlyph}" Property="GlyphForeground" />
                <Setter TargetName="Rect" Value="{DynamicResource EnvironmentTitleBarDragHandleActive}" Property="Fill" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="GlyphTextMarkerToolTipStyle"
           BasedOn="{StaticResource {x:Type ToolTip}}"
           TargetType="{x:Type ToolTip}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource ScreenTipBorder}"/>
        <Setter Property="Background"
                Value="{DynamicResource ScreenTipBackground}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource ScreenTipText}"/>
        <Setter Property="Padding"
                Value="1,1,1,1"/>
    </Style>

    <Style x:Key="CompletionToolTipStyle"
           BasedOn="{StaticResource {x:Type ToolTip}}"
           TargetType="{x:Type ToolTip}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource CompletionToolTipBorder}"/>
        <Setter Property="Background"
                Value="{DynamicResource CompletionToolTipBackground}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource CompletionToolTipText}"/>
        <Setter Property="Padding"
                Value="3,3,3,3"/>
    </Style>

    <DataTemplate DataType="{x:Type tabssettings:AssemblyExplorerAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" Grid.Column="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Label Grid.Row="0" Grid.Column="0" Margin="-5 0 5 0" Content="{x:Static p:dnSpy_Resources.AssemblyExplorerSettings_Filter}"/>
                <ComboBox Grid.Row="0" Grid.Column="1" Margin="0 0 0 0" HorizontalAlignment="Stretch" ItemsSource="{Binding DocumentFilterTypes}" SelectedItem="{Binding FilterDraggedItems}" DisplayMemberPath="Text" VerticalContentAlignment="Stretch"/>
            </Grid>
            <CheckBox Grid.Row="1" Grid.Column="0" Margin="0 5 0 0" IsChecked="{Binding ShowToken}" Content="{x:Static p:dnSpy_Resources.DisplaySettings_ShowTokens}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Margin="0 5 0 0" IsChecked="{Binding ShowAssemblyVersion}" Content="{x:Static p:dnSpy_Resources.DisplaySettings_ShowAssemblyVersion}" />
            <CheckBox Grid.Row="3" Grid.Column="0" Margin="0 5 0 0" IsChecked="{Binding ShowAssemblyPublicKeyToken}" Content="{x:Static p:dnSpy_Resources.DisplaySettings_ShowAssemblyPublicKeyToken}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Margin="0 5 0 0" IsChecked="{Binding SingleClickExpandsTreeViewChildren}" Content="{x:Static p:dnSpy_Resources.AssemblyExplorerSettings_SingleClickExpandNodes}" />
            <CheckBox Grid.Row="5" Grid.Column="0" Margin="0 5 0 0" IsChecked="{Binding SyntaxHighlight}" Content="{x:Static p:dnSpy_Resources.AssemblyExplorerSettings_SyntaxHighlight}" />
            <GroupBox Grid.Row="6" Grid.Column="0" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.AssemblyExplorerSettings_Order}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ComboBox Grid.Row="0" Margin="0 5 0 0" HorizontalAlignment="Stretch" ItemsSource="{Binding MemberKindsArray}" SelectedItem="{Binding MemberKind0}" DisplayMemberPath="Text" />
                    <ComboBox Grid.Row="1" Margin="0 5 0 0" HorizontalAlignment="Stretch" ItemsSource="{Binding MemberKindsArray}" SelectedItem="{Binding MemberKind1}" DisplayMemberPath="Text" />
                    <ComboBox Grid.Row="2" Margin="0 5 0 0" HorizontalAlignment="Stretch" ItemsSource="{Binding MemberKindsArray}" SelectedItem="{Binding MemberKind2}" DisplayMemberPath="Text" />
                    <ComboBox Grid.Row="3" Margin="0 5 0 0" HorizontalAlignment="Stretch" ItemsSource="{Binding MemberKindsArray}" SelectedItem="{Binding MemberKind3}" DisplayMemberPath="Text" />
                    <ComboBox Grid.Row="4" Margin="0 5 0 0" HorizontalAlignment="Stretch" ItemsSource="{Binding MemberKindsArray}" SelectedItem="{Binding MemberKind4}" DisplayMemberPath="Text" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type search:SearchResult}">
        <Grid ToolTip="{Binding ToolTip}" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <img:DsImage Grid.Column="0" ImageReference="{Binding ObjectImageReference}" HorizontalAlignment="Center" />
            <ContentPresenter Grid.Column="1" Content="{Binding NameUI}" />
            <Grid Grid.Column="2" HorizontalAlignment="Right">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="20" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <img:DsImage Grid.Column="0" ImageReference="{Binding LocationImageReference}" HorizontalAlignment="Center" />
                <ContentPresenter Grid.Column="1" Content="{Binding LocationUI}" Margin="0 0 2 0" />
            </Grid>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type bgImg:AppSettingsPageImpl}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ComboBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="4" Margin="0 0 0 0" HorizontalAlignment="Stretch" Name="settingsComboBox" DisplayMemberPath="Name" ItemsSource="{Binding Settings}" SelectedItem="{Binding CurrentItem}" VerticalContentAlignment="Center" />

            <ctrls2:TextControl Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Margin="0 5 5 5" TextWrapping="Wrap" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Images}" />
            <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="4">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0" Margin="0 0 5 0"
                         IsEnabled="{Binding IsEnabled}"
                         Text="{Binding Images, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"
                         HorizontalAlignment="Stretch"
                         VerticalAlignment="Stretch"
                         VerticalContentAlignment="Top"
                         ScrollViewer.HorizontalScrollBarVisibility="Auto"
                         ScrollViewer.VerticalScrollBarVisibility="Auto"
                         MinLines="3"
                         MaxLines="3"
                         AllowDrop="True"
                         AcceptsReturn="True" />
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Button Grid.Row="0" Margin="0 0 0 0" Style="{StaticResource EllipsisButton}" Command="{Binding PickFilenamesCommand}" />
                    <Button Grid.Row="1" Margin="0 5 0 0" Style="{StaticResource EllipsisButton}" Command="{Binding PickDirectoryCommand}" />
                </Grid>
            </Grid>

            <Label Grid.Row="3" Grid.Column="0" Margin="-5 0 5 0" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Placement}" Target="{Binding ElementName=imagePlacementComboBox}" IsEnabled="{Binding IsEnabled}" />
            <ComboBox Grid.Row="3" Grid.Column="1" Margin="0 0 5 0" HorizontalAlignment="Stretch" Name="imagePlacementComboBox" DisplayMemberPath="Name" ItemsSource="{Binding ImagePlacementVM.Items}" SelectedIndex="{Binding ImagePlacementVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="3" Grid.Column="2" Margin="0 0 5 0" Target="{Binding ElementName=opacityTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Opacity}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="3" Grid.Column="3" Margin="0 0 0 0" Name="opacityTextBox" Text="{Binding OpacityVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />

            <Label Grid.Row="4" Grid.Column="0" Margin="-5 0 5 0" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Stretch}" Target="{Binding ElementName=stretchComboBox}" IsEnabled="{Binding IsEnabled}" />
            <ComboBox Grid.Row="4" Grid.Column="1" Margin="0 0 5 0" HorizontalAlignment="Stretch" Name="stretchComboBox" DisplayMemberPath="Name" ItemsSource="{Binding StretchVM.Items}" SelectedIndex="{Binding StretchVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="4" Grid.Column="2" Margin="0 0 5 0" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Direction}" Target="{Binding ElementName=stretchDirectionComboBox}" IsEnabled="{Binding IsEnabled}" />
            <ComboBox Grid.Row="4" Grid.Column="3" Margin="0 0 0 0" HorizontalAlignment="Stretch" Name="stretchDirectionComboBox" DisplayMemberPath="Name" ItemsSource="{Binding StretchDirectionVM.Items}" SelectedIndex="{Binding StretchDirectionVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding IsEnabled}" />

            <Label Grid.Row="5" Grid.Column="0" Margin="-5 0 5 0" Target="{Binding ElementName=intervalTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Interval}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="5" Grid.Column="1" Margin="0 0 5 0" Name="intervalTextBox" Text="{Binding IntervalVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="5" Grid.Column="2" Margin="0 0 5 0" Target="{Binding ElementName=zoomTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Zoom}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="5" Grid.Column="3" Margin="0 0 0 0" Name="zoomTextBox" Text="{Binding ZoomVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />

            <CheckBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 0 5 0" IsChecked="{Binding IsRandom}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_RandomImage}" IsEnabled="{Binding IsEnabled}" />
            <CheckBox Grid.Row="6" Grid.Column="2" Grid.ColumnSpan="2" Margin="5 0 0 0" IsChecked="{Binding IsEnabled}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_ShowImages}" />

            <Label Grid.Row="7" Grid.Column="0" Margin="-5 0 5 0" Target="{Binding ElementName=horizontalOffsetTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_HorizontalOffset}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="7" Grid.Column="1" Margin="0 0 5 0" Name="horizontalOffsetTextBox" Text="{Binding HorizontalOffsetVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="7" Grid.Column="2" Margin="0 0 5 0" Target="{Binding ElementName=verticalOffsetTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_VerticalOffset}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="7" Grid.Column="3" Margin="0 0 0 0" Name="verticalOffsetTextBox" Text="{Binding VerticalOffsetVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />

            <Label Grid.Row="8" Grid.Column="0" Margin="-5 0 5 0" Target="{Binding ElementName=leftMarginPercentTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_LeftMarginPercent}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="8" Grid.Column="1" Margin="0 0 5 0" Name="leftMarginPercentTextBox" Text="{Binding LeftMarginWidthPercentVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="8" Grid.Column="2" Margin="0 0 5 0" Target="{Binding ElementName=rightMarginPercentTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_RightMarginPercent}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="8" Grid.Column="3" Margin="0 0 0 0" Name="rightMarginPercentTextBox" Text="{Binding RightMarginWidthPercentVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />

            <Label Grid.Row="9" Grid.Column="0" Margin="-5 0 5 0" Target="{Binding ElementName=topMarginPercentTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_TopMarginPercent}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="9" Grid.Column="1" Margin="0 0 5 0" Name="topMarginPercentTextBox" Text="{Binding TopMarginHeightPercentVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="9" Grid.Column="2" Margin="0 0 5 0" Target="{Binding ElementName=bottomMarginPercentTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_BottomMarginPercent}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="9" Grid.Column="3" Margin="0 0 0 0" Name="bottomMarginPercentTextBox" Text="{Binding BottomMarginHeightPercentVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />

            <Label Grid.Row="10" Grid.Column="0" Margin="-5 0 5 0" Target="{Binding ElementName=maxWidthTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_MaxWidth}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="10" Grid.Column="1" Margin="0 0 5 0" Name="maxWidthTextBox" Text="{Binding MaxWidthVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />
            <Label Grid.Row="10" Grid.Column="2" Margin="0 0 5 0" Target="{Binding ElementName=maxHeightTextBox}" Content="{x:Static p:dnSpy_Resources.BgImgSettings_MaxHeight}" IsEnabled="{Binding IsEnabled}" />
            <TextBox Grid.Row="10" Grid.Column="3" Margin="0 0 0 0" Name="maxHeightTextBox" Text="{Binding MaxHeightVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnabled}" />

            <Button Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="4" Margin="0 0 0 0" Content="{x:Static p:dnSpy_Resources.BgImgSettings_Reset}" Command="{Binding ResetCommand}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type mainappsettings:GeneralAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Margin="-5 0 5 0" Content="{x:Static p:dnSpy_Resources.GeneralSettings_Theme}" Target="{Binding ElementName=themeComboBox}" />
            <ComboBox Grid.Row="0" Grid.Column="1" Margin="0 0 5 0" HorizontalAlignment="Stretch" Name="themeComboBox" DisplayMemberPath="Name" ItemsSource="{Binding ThemesVM}" SelectedItem="{Binding SelectedThemeVM}" VerticalContentAlignment="Center" />
            <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding WindowsExplorerIntegration}" Content="{x:Static p:dnSpy_Resources.IntegrateWithWindowsExplorer}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AllowMoreThanOneInstance}" Content="{x:Static p:dnSpy_Resources.AllowMoreThanOneInstance}" />
            <CheckBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding DecompileFullType}" Content="{x:Static p:dnSpy_Resources.DisplaySettings_DecompileType}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding RestoreTabs}" Content="{x:Static p:dnSpy_Resources.DisplaySettings_RestoreTabs}" />
            <CheckBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UseMemoryMappedIO}" Content="{x:Static p:dnSpy_Resources.Options_Misc_UseMmapdIO}" />
            <Button Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Content="{x:Static p:dnSpy_Resources.Options_Misc_Button_EnableAllWarnings}" Command="{Binding ClearAllWarningsCommand}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type mainappsettings:FontAppSettingsPage}">
        <Grid Margin="5">
            <Grid.Resources>
                <mvvmvc:FontSizeConverter x:Key="fontSizeConverter" />
                <mainappsettings:FontFamilyVMConverter x:Key="fontFamilyVMConverter" />
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="100" />
            </Grid.ColumnDefinitions>
            <ComboBox Grid.Row="0" Grid.Column="0" Margin="0 0 0 0" HorizontalAlignment="Stretch" VerticalContentAlignment="Center" SelectedItem="{Binding SelectedFontAndColorOptions}" ItemsSource="{Binding FontAndColorOptions}" DisplayMemberPath="DisplayName" />
            <ComboBox Grid.Row="1" Grid.Column="0" Margin="0 5 0 0" HorizontalAlignment="Stretch" VerticalContentAlignment="Center" SelectedItem="{Binding SelectedFontAndColorOptions.FontFamilyVM}" ItemsSource="{Binding SelectedFontAndColorOptions.FontCollection.FontFamilies}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <ContentPresenter Content="{Binding Converter={StaticResource fontFamilyVMConverter}, Mode=OneWay}" />
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <ComboBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedFontAndColorOptions.FontSize, Converter={StaticResource fontSizeConverter}}" IsEditable="True" Margin="5 5 0 0" HorizontalAlignment="Stretch">
                <ComboBoxItem>6</ComboBoxItem>
                <ComboBoxItem>7</ComboBoxItem>
                <ComboBoxItem>8</ComboBoxItem>
                <ComboBoxItem>9</ComboBoxItem>
                <ComboBoxItem>10</ComboBoxItem>
                <ComboBoxItem>11</ComboBoxItem>
                <ComboBoxItem>12</ComboBoxItem>
                <ComboBoxItem>13</ComboBoxItem>
                <ComboBoxItem>14</ComboBoxItem>
                <ComboBoxItem>15</ComboBoxItem>
                <ComboBoxItem>16</ComboBoxItem>
                <ComboBoxItem>17</ComboBoxItem>
                <ComboBoxItem>18</ComboBoxItem>
                <ComboBoxItem>19</ComboBoxItem>
                <ComboBoxItem>20</ComboBoxItem>
                <ComboBoxItem>21</ComboBoxItem>
                <ComboBoxItem>22</ComboBoxItem>
                <ComboBoxItem>23</ComboBoxItem>
                <ComboBoxItem>24</ComboBoxItem>
            </ComboBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type codesettings:GeneralAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding UseVirtualSpace}" IsEnabled="{Binding UseVirtualSpaceEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorVirtualSpace}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding WordWrap}" IsEnabled="{Binding WordWrapEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorWordWrap}" />
            <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding ShowLineNumbers}" Content="{x:Static p:dnSpy_Resources.TextEditorLineNumbers}" />
            <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding HighlightCurrentLine}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightCurrentLine}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type codesettings:ScrollBarsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding HorizontalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorHorizontalScrollBar}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding VerticalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorVerticalScrollBar}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type codesettings:TabsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=tabSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorTabSize}" />
            <TextBox Grid.Row="0" Grid.Column="1" Margin="5 5 0 0" Name="tabSizeTextBox" Text="{Binding TabSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="1" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=indentSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorIndentSize}" />
            <TextBox Grid.Row="1" Grid.Column="1" Margin="5 5 0 0" Name="indentSizeTextBox" Text="{Binding IndentSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ConvertTabsToSpaces}" Content="{x:Static p:dnSpy_Resources.TextEditorConvertTabsToSpaces}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type codesettings:AdvancedAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--
            <GroupBox Grid.Row="0" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.GeneralSettings}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding ReferenceHighlighting}" Content="{x:Static p:dnSpy_Resources.TextEditorReferenceHighlighting}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding HighlightRelatedKeywords}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightRelatedKeywords}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding HighlightMatchingBrace}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightMatchingBrace}" />
                    <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding LineSeparators}" Content="{x:Static p:dnSpy_Resources.TextEditorLineSeparators}" />
                    <CheckBox Grid.Row="4" Margin="0 5 0 0" IsChecked="{Binding ShowBlockStructure}" Content="{x:Static p:dnSpy_Resources.TextEditorShowStructureLines}" />
                    <ComboBox Grid.Row="5" Margin="0 5 0 0" HorizontalAlignment="Stretch" Name="blockStructureLineKindComboBox" DisplayMemberPath="Name" ItemsSource="{Binding BlockStructureLineKindVM.Items}" SelectedIndex="{Binding BlockStructureLineKindVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding ShowBlockStructure}" />
                </Grid>
            </GroupBox>
            -->
            <GroupBox Grid.Row="1" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorLineHeight}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding CompressEmptyOrWhitespaceLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressEmptyOrWhitespaceLines}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding CompressNonLetterLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressNonLetterLines}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding MinimumLineSpacing}" Content="{x:Static p:dnSpy_Resources.TextEditorMinimumLineSpacing}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorMargins}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding SelectionMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorSelectionMargin}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding GlyphMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorGlyphMargin}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="3" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorZoom}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding MouseWheelZoom}" Content="{x:Static p:dnSpy_Resources.TextEditorMouseWheelZoom}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding ZoomControl}" Content="{x:Static p:dnSpy_Resources.TextEditorZoomControl}" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type replsettings:GeneralAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--TODO: ReplEditorOperations doesn't support virtual space
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding UseVirtualSpace}" IsEnabled="{Binding UseVirtualSpaceEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorVirtualSpace}" />
            -->
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding WordWrap}" IsEnabled="{Binding WordWrapEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorWordWrap}" />
            <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding ShowLineNumbers}" Content="{x:Static p:dnSpy_Resources.TextEditorLineNumbers}" />
            <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding HighlightCurrentLine}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightCurrentLine}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type replsettings:ScrollBarsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding HorizontalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorHorizontalScrollBar}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding VerticalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorVerticalScrollBar}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type replsettings:TabsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=tabSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorTabSize}" />
            <TextBox Grid.Row="0" Grid.Column="1" Margin="5 5 0 0" Name="tabSizeTextBox" Text="{Binding TabSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="1" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=indentSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorIndentSize}" />
            <TextBox Grid.Row="1" Grid.Column="1" Margin="5 5 0 0" Name="indentSizeTextBox" Text="{Binding IndentSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ConvertTabsToSpaces}" Content="{x:Static p:dnSpy_Resources.TextEditorConvertTabsToSpaces}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type replsettings:AdvancedAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--
            <GroupBox Grid.Row="0" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.GeneralSettings}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding ReferenceHighlighting}" Content="{x:Static p:dnSpy_Resources.TextEditorReferenceHighlighting}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding HighlightRelatedKeywords}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightRelatedKeywords}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding HighlightMatchingBrace}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightMatchingBrace}" />
                    <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding LineSeparators}" Content="{x:Static p:dnSpy_Resources.TextEditorLineSeparators}" />
                    <CheckBox Grid.Row="4" Margin="0 5 0 0" IsChecked="{Binding ShowBlockStructure}" Content="{x:Static p:dnSpy_Resources.TextEditorShowStructureLines}" />
                    <ComboBox Grid.Row="5" Margin="0 5 0 0" HorizontalAlignment="Stretch" Name="blockStructureLineKindComboBox" DisplayMemberPath="Name" ItemsSource="{Binding BlockStructureLineKindVM.Items}" SelectedIndex="{Binding BlockStructureLineKindVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding ShowBlockStructure}" />
                </Grid>
            </GroupBox>
            -->
            <GroupBox Grid.Row="1" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorLineHeight}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding CompressEmptyOrWhitespaceLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressEmptyOrWhitespaceLines}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding CompressNonLetterLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressNonLetterLines}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding MinimumLineSpacing}" Content="{x:Static p:dnSpy_Resources.TextEditorMinimumLineSpacing}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorMargins}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding SelectionMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorSelectionMargin}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding GlyphMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorGlyphMargin}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="3" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorZoom}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding MouseWheelZoom}" Content="{x:Static p:dnSpy_Resources.TextEditorMouseWheelZoom}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding ZoomControl}" Content="{x:Static p:dnSpy_Resources.TextEditorZoomControl}" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type docvwrsettings:GeneralAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding UseVirtualSpace}" IsEnabled="{Binding UseVirtualSpaceEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorVirtualSpace}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding WordWrap}" IsEnabled="{Binding WordWrapEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorWordWrap}" />
            <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding ShowLineNumbers}" Content="{x:Static p:dnSpy_Resources.TextEditorLineNumbers}" />
            <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding HighlightCurrentLine}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightCurrentLine}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type docvwrsettings:ScrollBarsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding HorizontalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorHorizontalScrollBar}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding VerticalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorVerticalScrollBar}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type docvwrsettings:TabsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=tabSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorTabSize}" />
            <TextBox Grid.Row="0" Grid.Column="1" Margin="5 5 0 0" Name="tabSizeTextBox" Text="{Binding TabSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="1" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=indentSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorIndentSize}" IsEnabled="False" />
            <TextBox Grid.Row="1" Grid.Column="1" Margin="5 5 0 0" Name="indentSizeTextBox" Text="{Binding IndentSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="False" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ConvertTabsToSpaces}" Content="{x:Static p:dnSpy_Resources.TextEditorConvertTabsToSpaces}" IsEnabled="False" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type docvwrsettings:AdvancedAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <GroupBox Grid.Row="0" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.GeneralSettings}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding ReferenceHighlighting}" Content="{x:Static p:dnSpy_Resources.TextEditorReferenceHighlighting}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding HighlightRelatedKeywords}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightRelatedKeywords}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding HighlightMatchingBrace}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightMatchingBrace}" />
                    <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding LineSeparators}" Content="{x:Static p:dnSpy_Resources.TextEditorLineSeparators}" />
                    <CheckBox Grid.Row="4" Margin="0 5 0 0" IsChecked="{Binding ShowBlockStructure}" Content="{x:Static p:dnSpy_Resources.TextEditorShowStructureLines}" />
                    <ComboBox Grid.Row="5" Margin="0 5 0 0" HorizontalAlignment="Stretch" Name="blockStructureLineKindComboBox" DisplayMemberPath="Name" ItemsSource="{Binding BlockStructureLineKindVM.Items}" SelectedIndex="{Binding BlockStructureLineKindVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding ShowBlockStructure}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="1" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorLineHeight}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding CompressEmptyOrWhitespaceLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressEmptyOrWhitespaceLines}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding CompressNonLetterLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressNonLetterLines}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding MinimumLineSpacing}" Content="{x:Static p:dnSpy_Resources.TextEditorMinimumLineSpacing}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorMargins}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding SelectionMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorSelectionMargin}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding GlyphMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorGlyphMargin}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="3" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorZoom}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding MouseWheelZoom}" Content="{x:Static p:dnSpy_Resources.TextEditorMouseWheelZoom}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding ZoomControl}" Content="{x:Static p:dnSpy_Resources.TextEditorZoomControl}" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type outputsettings:GeneralAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UseVirtualSpace}" IsEnabled="{Binding UseVirtualSpaceEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorVirtualSpace}" />
            <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding WordWrap}" IsEnabled="{Binding WordWrapEnabled}" Content="{x:Static p:dnSpy_Resources.TextEditorWordWrap}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowLineNumbers}" Content="{x:Static p:dnSpy_Resources.TextEditorLineNumbers}" />
            <CheckBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding HighlightCurrentLine}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightCurrentLine}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowTimestamps}" Content="{x:Static p:dnSpy_Resources.TextEditorShowTimestamps}" />
            <Label Grid.Row="5" Grid.Column="0" Margin="-5 5 0 0" Content="{x:Static p:dnSpy_Resources.TimestampDateTimeFormat}" />
            <TextBox Grid.Row="5" Grid.Column="1" Margin="5 5 0 0" Text="{Binding TimestampDateTimeFormat, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type outputsettings:ScrollBarsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding HorizontalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorHorizontalScrollBar}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding VerticalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorVerticalScrollBar}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type outputsettings:TabsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=tabSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorTabSize}" />
            <TextBox Grid.Row="0" Grid.Column="1" Margin="5 5 0 0" Name="tabSizeTextBox" Text="{Binding TabSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="1" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=indentSizeTextBox}" Content="{x:Static p:dnSpy_Resources.TextEditorIndentSize}" IsEnabled="False" />
            <TextBox Grid.Row="1" Grid.Column="1" Margin="5 5 0 0" Name="indentSizeTextBox" Text="{Binding IndentSizeVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="False" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ConvertTabsToSpaces}" Content="{x:Static p:dnSpy_Resources.TextEditorConvertTabsToSpaces}" IsEnabled="False" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type outputsettings:AdvancedAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--
            <GroupBox Grid.Row="0" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.GeneralSettings}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding ReferenceHighlighting}" Content="{x:Static p:dnSpy_Resources.TextEditorReferenceHighlighting}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding HighlightRelatedKeywords}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightRelatedKeywords}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding HighlightMatchingBrace}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightMatchingBrace}" />
                    <CheckBox Grid.Row="3" Margin="0 5 0 0" IsChecked="{Binding LineSeparators}" Content="{x:Static p:dnSpy_Resources.TextEditorLineSeparators}" />
                    <CheckBox Grid.Row="4" Margin="0 5 0 0" IsChecked="{Binding ShowBlockStructure}" Content="{x:Static p:dnSpy_Resources.TextEditorShowStructureLines}" />
                    <ComboBox Grid.Row="5" Margin="0 5 0 0" HorizontalAlignment="Stretch" Name="blockStructureLineKindComboBox" DisplayMemberPath="Name" ItemsSource="{Binding BlockStructureLineKindVM.Items}" SelectedIndex="{Binding BlockStructureLineKindVM.SelectedIndex}" VerticalContentAlignment="Center" IsEnabled="{Binding ShowBlockStructure}" />
                </Grid>
            </GroupBox>
            -->
            <GroupBox Grid.Row="1" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorLineHeight}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding CompressEmptyOrWhitespaceLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressEmptyOrWhitespaceLines}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding CompressNonLetterLines}" Content="{x:Static p:dnSpy_Resources.TextEditorCompressNonLetterLines}" />
                    <CheckBox Grid.Row="2" Margin="0 5 0 0" IsChecked="{Binding MinimumLineSpacing}" Content="{x:Static p:dnSpy_Resources.TextEditorMinimumLineSpacing}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorMargins}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding SelectionMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorSelectionMargin}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding GlyphMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorGlyphMargin}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="3" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorZoom}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding MouseWheelZoom}" Content="{x:Static p:dnSpy_Resources.TextEditorMouseWheelZoom}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding ZoomControl}" Content="{x:Static p:dnSpy_Resources.TextEditorZoomControl}" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type hexedsettings:GeneralAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding EnableHighlightCurrentLine}" Content="{x:Static p:dnSpy_Resources.TextEditorHighlightCurrentLine}" />
            <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding HighlightCurrentValue}" Content="{x:Static p:dnSpy_Resources.HexEditorHighlightCurrentValue}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding HighlightStructureUnderMouseCursor}" Content="{x:Static p:dnSpy_Resources.HexEditorHighlightStructureUnderMouseCursor}" />
            <CheckBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ValuesLowerCaseHex}" Content="{x:Static p:dnSpy_Resources.HexEditorValuesLowerCaseHex}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding OffsetLowerCaseHex}" Content="{x:Static p:dnSpy_Resources.HexEditorOffsetLowerCaseHex}" />
            <CheckBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding EnableColorization}" Content="{x:Static p:dnSpy_Resources.OptionColorizeText}" />
            <Label Grid.Row="6" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=groupSizeInBytesTextBox}" Content="{x:Static p:dnSpy_Resources.HexEditorGroupSizeInBytes}" />
            <TextBox Grid.Row="6" Grid.Column="1" Margin="5 5 0 0" Name="groupSizeInBytesTextBox" Text="{Binding GroupSizeInBytesVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="7" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexOffsetFormatComboBox}" Content="{x:Static p:dnSpy_Resources.HexEditorOffsetFormat}" />
            <ComboBox Grid.Row="7" Grid.Column="1" Margin="5 5 0 0" HorizontalAlignment="Stretch" Name="hexOffsetFormatComboBox" DisplayMemberPath="Name" ItemsSource="{Binding HexOffsetFormatVM.Items}" SelectedIndex="{Binding HexOffsetFormatVM.SelectedIndex}" VerticalContentAlignment="Center" />
            <Label Grid.Row="8" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=encodingComboBox}" Content="{x:Static p:dnSpy_Resources.HexEditorEncoding}" />
            <ComboBox Grid.Row="8" Grid.Column="1" Margin="5 5 0 0" HorizontalAlignment="Stretch" Name="encodingComboBox" DisplayMemberPath="Name" ItemsSource="{Binding EncodingInfoVM.Items}" SelectedIndex="{Binding EncodingInfoVM.SelectedIndex}" VerticalContentAlignment="Center" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type hexedsettings:ScrollBarsAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding HorizontalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorHorizontalScrollBar}" />
            <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding VerticalScrollBar}" Content="{x:Static p:dnSpy_Resources.TextEditorVerticalScrollBar}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type hexedsettings:AdvancedAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <GroupBox Grid.Row="0" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.GeneralSettings}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding ShowColumnLines}" Content="{x:Static p:dnSpy_Resources.HexEditorShowColumnLineSeparators}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding RemoveExtraTextLineVerticalPixels}" Content="{x:Static p:dnSpy_Resources.TextEditorMinimumLineSpacing}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="2" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorMargins}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding SelectionMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorSelectionMargin}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding GlyphMargin}" Content="{x:Static p:dnSpy_Resources.TextEditorGlyphMargin}" />
                </Grid>
            </GroupBox>
            <GroupBox Grid.Row="3" Margin="0 5 0 0" Header="{x:Static p:dnSpy_Resources.TextEditorZoom}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Margin="0 5 0 0" IsChecked="{Binding EnableMouseWheelZoom}" Content="{x:Static p:dnSpy_Resources.TextEditorMouseWheelZoom}" />
                    <CheckBox Grid.Row="1" Margin="0 5 0 0" IsChecked="{Binding ZoomControl}" Content="{x:Static p:dnSpy_Resources.TextEditorZoomControl}" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

    <Style x:Key="BookmarksTableGridViewScrollViewerStyle"
           BasedOn="{StaticResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>

    <DataTemplate DataType="{x:Type bm:BookmarksAppSettingsPage}">
        <Grid Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Margin="0 0 0 0" IsChecked="{Binding Settings.SyntaxHighlight}" Content="{x:Static p:dnSpy_Resources.BookmarksSettings_SyntaxHighlight}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type disasmviewersettings:DisassemblyAppSettingsPage}">
        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Margin="-5 0 5 0" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_X86AssemblerSyntax}" Target="{Binding ElementName=x86DisassemblerComboBox}" />
            <ComboBox Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Margin="0 0 5 0" HorizontalAlignment="Stretch" Name="x86DisassemblerComboBox" DisplayMemberPath="Name" ItemsSource="{Binding X86DisassemblerVM}" SelectedItem="{Binding SelectedX86DisassemblerVM}" VerticalContentAlignment="Center" />
            <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding NewTab}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_NewTab}"/>
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.ShowInstructionAddress}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowInstructionAddress}"/>
            <CheckBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.ShowInstructionBytes}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowInstructionBytes}"/>
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.ShowILCode}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowILCode}"/>
            <CheckBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.ShowCode}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowCode}"/>
            <CheckBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.EmptyLineBetweenBasicBlocks}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_EmptyLineBetweenBasicBlocks}"/>
            <CheckBox Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.AddLabels}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AddLabels}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type disasmsettingsx86:MasmAppSettingsPage}">
        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercasePrefixes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCasePrefixes}"/>
            <TextBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercasePrefixes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseMnemonics.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseMnemonics}"/>
            <TextBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseMnemonics.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseRegisters.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseRegisters}"/>
            <TextBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseRegisters.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseKeywords.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseKeywords}"/>
            <TextBox Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseKeywords.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseHex.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseHex}"/>
            <TextBox Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseHex.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="10" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseAll.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseAll}"/>
            <TextBox Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseAll.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceAfterOperandSeparator.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterOperandSeparator}"/>
            <TextBox Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceAfterOperandSeparator.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceAfterMemoryBracket.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterMemoryBracket}"/>
            <TextBox Grid.Row="15" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceAfterMemoryBracket.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="16" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceBetweenMemoryAddOperators.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpacesBetweenMemoryAddOperators}"/>
            <TextBox Grid.Row="17" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceBetweenMemoryAddOperators.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="18" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceBetweenMemoryMulOperators.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpacesBetweenMemoryMulOperators}"/>
            <TextBox Grid.Row="19" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceBetweenMemoryMulOperators.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="20" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ScaleBeforeIndex.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ScaleBeforeIndex}"/>
            <TextBox Grid.Row="21" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ScaleBeforeIndex.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="22" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowScale.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowScale}"/>
            <TextBox Grid.Row="23" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowScale.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="24" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowSegmentRegister.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowSegmentRegister}"/>
            <TextBox Grid.Row="25" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowSegmentRegister.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="26" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowZeroDisplacements.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowZeroDisplacements}"/>
            <TextBox Grid.Row="27" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowZeroDisplacements.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="28" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding LeadingZeroes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_LeadingZeroes}"/>
            <TextBox Grid.Row="29" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding LeadingZeroes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="30" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding BranchLeadingZeroes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_BranchLeadingZeroes}"/>
            <TextBox Grid.Row="31" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding BranchLeadingZeroes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="32" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SmallHexNumbersInDecimal.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SmallHexNumbersInDecimal}"/>
            <TextBox Grid.Row="33" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SmallHexNumbersInDecimal.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="34" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AddLeadingZeroToHexNumbers.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AddLeadingZeroToHexNumbers}"/>
            <TextBox Grid.Row="35" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AddLeadingZeroToHexNumbers.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="36" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SignedImmediateOperands.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SignedImmediateOperands}"/>
            <TextBox Grid.Row="37" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SignedImmediateOperands.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="38" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SignedMemoryDisplacements.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SignedMemoryDisplacements}"/>
            <TextBox Grid.Row="39" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SignedMemoryDisplacements.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="40" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowMemorySize.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowMemorySize}"/>
            <TextBox Grid.Row="41" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowMemorySize.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="42" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding RipRelativeAddresses.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_RipRelativeAddresses}"/>
            <TextBox Grid.Row="43" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding RipRelativeAddresses.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="44" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowBranchSize.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowBranchSize}"/>
            <TextBox Grid.Row="45" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowBranchSize.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="46" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UsePseudoOps.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UsePseudoOps}"/>
            <TextBox Grid.Row="47" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UsePseudoOps.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="48" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowSymbolAddress.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowSymbolAddress}"/>
            <TextBox Grid.Row="49" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowSymbolAddress.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="50" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UseHexNumbers.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UseHexNumbers}"/>
            <TextBox Grid.Row="51" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UseHexNumbers.Disassembly, Mode=OneWay}" />
            <Label Grid.Row="52" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=opColumnTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_OperandColumn}" />
            <TextBox Grid.Row="52" Grid.Column="1" Margin="5 5 0 0" Name="opColumnTextBox" Text="{Binding OperandColumnVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="53" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexPrefixTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_HexPrefix}" />
            <TextBox Grid.Row="53" Grid.Column="1" Margin="5 5 0 0" Name="hexPrefixTextBox" Text="{Binding HexPrefix, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="54" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexSuffixTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_HexSuffix}" />
            <TextBox Grid.Row="54" Grid.Column="1" Margin="5 5 0 0" Name="hexSuffixTextBox" Text="{Binding HexSuffix, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="55" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=digitSeparatorTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_DigitSeparator}" />
            <TextBox Grid.Row="55" Grid.Column="1" Margin="5 5 0 0" Name="digitSeparatorTextBox" Text="{Binding DigitSeparator, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type disasmsettingsx86:NasmAppSettingsPage}">
        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercasePrefixes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCasePrefixes}"/>
            <TextBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercasePrefixes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseMnemonics.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseMnemonics}"/>
            <TextBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseMnemonics.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseRegisters.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseRegisters}"/>
            <TextBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseRegisters.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseKeywords.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseKeywords}"/>
            <TextBox Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseKeywords.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseHex.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseHex}"/>
            <TextBox Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseHex.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="10" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseAll.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseAll}"/>
            <TextBox Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseAll.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceAfterOperandSeparator.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterOperandSeparator}"/>
            <TextBox Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceAfterOperandSeparator.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceAfterMemoryBracket.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterMemoryBracket}"/>
            <TextBox Grid.Row="15" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceAfterMemoryBracket.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="16" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceBetweenMemoryAddOperators.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpacesBetweenMemoryAddOperators}"/>
            <TextBox Grid.Row="17" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceBetweenMemoryAddOperators.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="18" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceBetweenMemoryMulOperators.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpacesBetweenMemoryMulOperators}"/>
            <TextBox Grid.Row="19" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceBetweenMemoryMulOperators.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="20" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ScaleBeforeIndex.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ScaleBeforeIndex}"/>
            <TextBox Grid.Row="21" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ScaleBeforeIndex.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="22" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowScale.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowScale}"/>
            <TextBox Grid.Row="23" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowScale.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="24" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowSegmentRegister.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowSegmentRegister}"/>
            <TextBox Grid.Row="25" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowSegmentRegister.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="26" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowZeroDisplacements.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowZeroDisplacements}"/>
            <TextBox Grid.Row="27" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowZeroDisplacements.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="28" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding LeadingZeroes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_LeadingZeroes}"/>
            <TextBox Grid.Row="29" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding LeadingZeroes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="30" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding BranchLeadingZeroes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_BranchLeadingZeroes}"/>
            <TextBox Grid.Row="31" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding BranchLeadingZeroes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="32" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SmallHexNumbersInDecimal.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SmallHexNumbersInDecimal}"/>
            <TextBox Grid.Row="33" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SmallHexNumbersInDecimal.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="34" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AddLeadingZeroToHexNumbers.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AddLeadingZeroToHexNumbers}"/>
            <TextBox Grid.Row="35" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AddLeadingZeroToHexNumbers.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="36" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SignedImmediateOperands.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SignedImmediateOperands}"/>
            <TextBox Grid.Row="37" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SignedImmediateOperands.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="38" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SignedMemoryDisplacements.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SignedMemoryDisplacements}"/>
            <TextBox Grid.Row="39" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SignedMemoryDisplacements.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="40" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowMemorySize.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowMemorySize}"/>
            <TextBox Grid.Row="41" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowMemorySize.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="42" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding RipRelativeAddresses.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_RipRelativeAddresses}"/>
            <TextBox Grid.Row="43" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding RipRelativeAddresses.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="44" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowBranchSize.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowBranchSize}"/>
            <TextBox Grid.Row="45" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowBranchSize.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="46" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UsePseudoOps.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UsePseudoOps}"/>
            <TextBox Grid.Row="47" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UsePseudoOps.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="48" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowSymbolAddress.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowSymbolAddress}"/>
            <TextBox Grid.Row="49" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowSymbolAddress.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="50" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UseHexNumbers.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UseHexNumbers}"/>
            <TextBox Grid.Row="51" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UseHexNumbers.Disassembly, Mode=OneWay}" />
            <Label Grid.Row="52" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=opColumnTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_OperandColumn}" />
            <TextBox Grid.Row="52" Grid.Column="1" Margin="5 5 0 0" Name="opColumnTextBox" Text="{Binding OperandColumnVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="53" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexPrefixTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_HexPrefix}" />
            <TextBox Grid.Row="53" Grid.Column="1" Margin="5 5 0 0" Name="hexPrefixTextBox" Text="{Binding HexPrefix, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="54" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexSuffixTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_HexSuffix}" />
            <TextBox Grid.Row="54" Grid.Column="1" Margin="5 5 0 0" Name="hexSuffixTextBox" Text="{Binding HexSuffix, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="55" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=digitSeparatorTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_DigitSeparator}" />
            <TextBox Grid.Row="55" Grid.Column="1" Margin="5 5 0 0" Name="digitSeparatorTextBox" Text="{Binding DigitSeparator, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type disasmsettingsx86:GasAppSettingsPage}">
        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercasePrefixes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCasePrefixes}"/>
            <TextBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercasePrefixes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseMnemonics.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseMnemonics}"/>
            <TextBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseMnemonics.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseRegisters.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseRegisters}"/>
            <TextBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseRegisters.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseHex.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseHex}"/>
            <TextBox Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseHex.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UppercaseAll.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UpperCaseAll}"/>
            <TextBox Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UppercaseAll.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="10" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceAfterOperandSeparator.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterOperandSeparator}"/>
            <TextBox Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceAfterOperandSeparator.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SpaceAfterMemoryBracket.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterMemoryBracket}"/>
            <TextBox Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SpaceAfterMemoryBracket.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding GasSpaceAfterMemoryOperandComma.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SpaceAfterMemoryOperandComma}"/>
            <TextBox Grid.Row="15" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding GasSpaceAfterMemoryOperandComma.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="16" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowScale.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowScale}"/>
            <TextBox Grid.Row="17" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowScale.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="18" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AlwaysShowSegmentRegister.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AlwaysShowSegmentRegister}"/>
            <TextBox Grid.Row="19" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AlwaysShowSegmentRegister.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="20" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowZeroDisplacements.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowZeroDisplacements}"/>
            <TextBox Grid.Row="21" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowZeroDisplacements.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="22" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding LeadingZeroes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_LeadingZeroes}"/>
            <TextBox Grid.Row="23" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding LeadingZeroes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="24" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding BranchLeadingZeroes.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_BranchLeadingZeroes}"/>
            <TextBox Grid.Row="25" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding BranchLeadingZeroes.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="26" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SmallHexNumbersInDecimal.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SmallHexNumbersInDecimal}"/>
            <TextBox Grid.Row="27" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SmallHexNumbersInDecimal.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="28" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding AddLeadingZeroToHexNumbers.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_AddLeadingZeroToHexNumbers}"/>
            <TextBox Grid.Row="29" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding AddLeadingZeroToHexNumbers.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="30" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SignedImmediateOperands.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SignedImmediateOperands}"/>
            <TextBox Grid.Row="31" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SignedImmediateOperands.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="32" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding SignedMemoryDisplacements.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_SignedMemoryDisplacements}"/>
            <TextBox Grid.Row="33" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding SignedMemoryDisplacements.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="34" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding RipRelativeAddresses.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_RipRelativeAddresses}"/>
            <TextBox Grid.Row="35" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding RipRelativeAddresses.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="36" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UsePseudoOps.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UsePseudoOps}"/>
            <TextBox Grid.Row="37" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UsePseudoOps.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="38" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding ShowSymbolAddress.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowSymbolAddress}"/>
            <TextBox Grid.Row="39" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding ShowSymbolAddress.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="40" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding GasNakedRegisters.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_NakedRegisters}"/>
            <TextBox Grid.Row="41" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding GasNakedRegisters.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="42" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding GasShowMnemonicSizeSuffix.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_ShowMnemonicSizeSuffix}"/>
            <TextBox Grid.Row="43" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding GasShowMnemonicSizeSuffix.Disassembly, Mode=OneWay}" />
            <CheckBox Grid.Row="44" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding UseHexNumbers.Value}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_UseHexNumbers}"/>
            <TextBox Grid.Row="45" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" Background="Transparent" IsReadOnly="True" TextWrapping="NoWrap" Text="{Binding UseHexNumbers.Disassembly, Mode=OneWay}" />
            <Label Grid.Row="46" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=opColumnTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_OperandColumn}" />
            <TextBox Grid.Row="46" Grid.Column="1" Margin="5 5 0 0" Name="opColumnTextBox" Text="{Binding OperandColumnVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="47" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexPrefixTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_HexPrefix}" />
            <TextBox Grid.Row="47" Grid.Column="1" Margin="5 5 0 0" Name="hexPrefixTextBox" Text="{Binding HexPrefix, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="48" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=hexSuffixTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_HexSuffix}" />
            <TextBox Grid.Row="48" Grid.Column="1" Margin="5 5 0 0" Name="hexSuffixTextBox" Text="{Binding HexSuffix, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
            <Label Grid.Row="49" Grid.Column="0" Margin="-5 5 0 0" Target="{Binding ElementName=digitSeparatorTextBox}" Content="{x:Static p:dnSpy_Resources.DisassemblySettings_DigitSeparator}" />
            <TextBox Grid.Row="49" Grid.Column="1" Margin="5 5 0 0" Name="digitSeparatorTextBox" Text="{Binding DigitSeparator, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

</ResourceDictionary>
