<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error1" xml:space="preserve">
    <value>错误：{0}</value>
  </data>
  <data name="FileOrDirDoesNotExist" xml:space="preserve">
    <value>文件/目录 '{0}' 不存在</value>
  </data>
  <data name="InvalidOption" xml:space="preserve">
    <value>选项无效：{0}</value>
  </data>
  <data name="InvalidSolutionName" xml:space="preserve">
    <value>.sln 名称 ({0}) 必须相对于工程目录</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>元数据标记无效</value>
  </data>
  <data name="InvalidVSVersion" xml:space="preserve">
    <value>无效的 Visual Studio 版本：{0}</value>
  </data>
  <data name="LanguageDoesNotExist" xml:space="preserve">
    <value>语言 '{0}' 不存在</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>语言：</value>
  </data>
  <data name="LanguageXDoesNotExist" xml:space="preserve">
    <value>语言 {0} 不存在</value>
  </data>
  <data name="MissingAsmSearchPath" xml:space="preserve">
    <value>缺失程序集搜索路径</value>
  </data>
  <data name="MissingDotNetFilename" xml:space="preserve">
    <value>缺失 .NET 文件名</value>
  </data>
  <data name="MissingLanguageName" xml:space="preserve">
    <value>缺失语言名</value>
  </data>
  <data name="MissingMDToken" xml:space="preserve">
    <value>缺失元数据标记</value>
  </data>
  <data name="MissingNumberOfThreads" xml:space="preserve">
    <value>缺失线程数</value>
  </data>
  <data name="MissingOptions" xml:space="preserve">
    <value>未指定选项</value>
  </data>
  <data name="MissingOutputDir" xml:space="preserve">
    <value>缺失输出目录</value>
  </data>
  <data name="MissingSolutionName" xml:space="preserve">
    <value>缺失 .sln 名称</value>
  </data>
  <data name="MissingVSVersion" xml:space="preserve">
    <value>缺失 Visual Studio 版本</value>
  </data>
  <data name="NoLanguagesFound" xml:space="preserve">
    <value>未找到语言。请确保语言 DLL 文件存在于本程序所在文件夹内。</value>
  </data>
  <data name="NotDotNetFile" xml:space="preserve">
    <value>{0} 不是 .NET 文件</value>
  </data>
  <data name="OnlyOneFileCanBeDecompiled" xml:space="preserve">
    <value>当使用 --md 时仅可以反编译一个文件</value>
  </data>
  <data name="MissingUserGacPath" xml:space="preserve">
    <value>缺失用户 GAC（全局程序集缓存）路径</value>
  </data>
  <data name="InvalidMemberToDecompile" xml:space="preserve">
    <value>仅可以反编译类型，方法，字段，事件和属性</value>
  </data>
  <data name="CouldNotFindTypeX" xml:space="preserve">
    <value>未找到类型 {0}</value>
  </data>
  <data name="CouldNotResolveGacFileX" xml:space="preserve">
    <value>无法解析 GAC 程序集 '{0}'</value>
  </data>
  <data name="MissingGacFile" xml:space="preserve">
    <value>缺失 GAC 程序集名称</value>
  </data>
  <data name="MissingTypeName" xml:space="preserve">
    <value>缺失类型的完整名称</value>
  </data>
  <data name="LanguageXDoesNotSupportProjects" xml:space="preserve">
    <value>语言 {0} 不支持创建中的工程文件</value>
  </data>
  <data name="LanguageOptions" xml:space="preserve">
    <value>语言选项：</value>
  </data>
  <data name="LanguageOptionsDesc" xml:space="preserve">
    <value>所有布尔选项可以使用 'no-' 或 'dont-' 显示。如 --dont-sort-members</value>
  </data>
  <data name="MissingOptionArgument" xml:space="preserve">
    <value>缺失选项参数</value>
  </data>
  <data name="InvalidGuid" xml:space="preserve">
    <value>GUID 无效</value>
  </data>
  <data name="CmdLineAssembly" xml:space="preserve">
    <value>程序集</value>
  </data>
  <data name="CmdLineDescription_AsmPath" xml:space="preserve">
    <value>程序集搜索路径。路径可以用 '{0}' 分隔。亦可使用多个--asm-path来指定多个路径。</value>
  </data>
  <data name="CmdLineDescription_GACFile" xml:space="preserve">
    <value>反编译 gac 中的程序集。使用完整的程序集名称来使用准确的版本。</value>
  </data>
  <data name="CmdLineDescription_Language" xml:space="preserve">
    <value>设置语言，默认是 C#。可以使用 Guid。</value>
  </data>
  <data name="CmdLineDescription_MDToken" xml:space="preserve">
    <value>反编译元数据标记 N 的成员到输出窗口</value>
  </data>
  <data name="CmdLineDescription_NoBAML" xml:space="preserve">
    <value>不将BAML反编译为XAML</value>
  </data>
  <data name="CmdLineDescription_NoGAC" xml:space="preserve">
    <value>不从GAC中搜寻程序集。与 --no-stdlib 参数搭配使用</value>
  </data>
  <data name="CmdLineDescription_NoResources" xml:space="preserve">
    <value>不要解包资源文件</value>
  </data>
  <data name="CmdLineDescription_NoResX" xml:space="preserve">
    <value>不要创建.resx 文件</value>
  </data>
  <data name="CmdLineDescription_NoSLN" xml:space="preserve">
    <value>不要创建.sln 文件</value>
  </data>
  <data name="CmdLineDescription_NoStdLib" xml:space="preserve">
    <value>不要让项目引用 mscorlib库</value>
  </data>
  <data name="CmdLineDescription_NumberOfThreads" xml:space="preserve">
    <value>工作线程的数目。默认每个CPU核心使用一个线程。</value>
  </data>
  <data name="CmdLineDescription_OutputDirectory" xml:space="preserve">
    <value>输出目录：</value>
  </data>
  <data name="CmdLineDescription_ProjectGUID" xml:space="preserve">
    <value>项目 guid</value>
  </data>
  <data name="CmdLineDescription_RecursiveSearch" xml:space="preserve">
    <value>递归搜索.NET 文件来反编译</value>
  </data>
  <data name="CmdLineDescription_SlnName" xml:space="preserve">
    <value>.sln 解决方案文件的名称</value>
  </data>
  <data name="CmdLineDescription_Type1" xml:space="preserve">
    <value>反编译指定名称的类型到标准输出流。指定名称的格式为[命名空间.名称] 或 [名称]，不区分大小写</value>
  </data>
  <data name="CmdLineDescription_Type2" xml:space="preserve">
    <value>与 -t 相同</value>
  </data>
  <data name="CmdLineDescription_UserGAC" xml:space="preserve">
    <value>用户 GAC 路径。路径可以用 '{0}' 分隔或你可以使用 --user-gac's 选择</value>
  </data>
  <data name="CmdLineDescription_VSVersion" xml:space="preserve">
    <value>Visual Studio 版本，2005，2008，...，{0}</value>
  </data>
  <data name="CmdLineLanguage" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="CmdLineName" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="CmdLineOutputDir" xml:space="preserve">
    <value>退出路径</value>
  </data>
  <data name="CmdLinePath" xml:space="preserve">
    <value>路径</value>
  </data>
  <data name="ExampleDescription1" xml:space="preserve">
    <value>反编译目录中所有.NET文件并保存到C:\out\path</value>
  </data>
  <data name="ExampleDescription2" xml:space="preserve">
    <value>反编译以上目录及子目录中所有.NET 文件</value>
  </data>
  <data name="ExampleDescription3" xml:space="preserve">
    <value>反编译目录中所有.NET的dll文件并保存到C:\out\path</value>
  </data>
  <data name="ExampleDescription4" xml:space="preserve">
    <value>反编译标记为0x06000123的成员</value>
  </data>
  <data name="ExampleDescription5" xml:space="preserve">
    <value>从 mscorlib 反编译 System.Int32</value>
  </data>
  <data name="ExamplesHeader" xml:space="preserve">
    <value>例如：</value>
  </data>
  <data name="UsageHeader" xml:space="preserve">
    <value>[选项] [文件或路径1] [文件或路径2] [...]</value>
  </data>
  <data name="CmdLineDescription_NoColor" xml:space="preserve">
    <value>不要高亮文本</value>
  </data>
  <data name="CmdLineDescription_Spaces" xml:space="preserve">
    <value>Tab的长度（单位为空格），指定0则使用一个Tab</value>
  </data>
  <data name="InvalidSpacesArgument" xml:space="preserve">
    <value>空格的数量必须在 {0} 和 {1} 之间</value>
  </data>
  <data name="MissingArgument" xml:space="preserve">
    <value>缺少参数</value>
  </data>
</root>