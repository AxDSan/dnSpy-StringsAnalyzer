<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClassesToolTip" xml:space="preserve">
    <value>类</value>
  </data>
  <data name="CompilerSettings_AllowUnsafe" xml:space="preserve">
    <value>允许不安全代码</value>
  </data>
  <data name="CompilerSettings_CheckOverflow" xml:space="preserve">
    <value>检查算术溢出/下溢</value>
  </data>
  <data name="CompilerSettings_EmbedVBRuntime" xml:space="preserve">
    <value>嵌入的 Visual Basic runtime</value>
  </data>
  <data name="CompilerSettings_Optimize" xml:space="preserve">
    <value>优化代码</value>
  </data>
  <data name="CompilerSettings_OptionCompareBinary" xml:space="preserve">
    <value>选项 比较：二进制</value>
  </data>
  <data name="CompilerSettings_OptionExplicit" xml:space="preserve">
    <value>选项 显式</value>
  </data>
  <data name="CompilerSettings_OptionInfer" xml:space="preserve">
    <value>选项 推断</value>
  </data>
  <data name="CompilerSettings_OptionStrict" xml:space="preserve">
    <value>选项 严格</value>
  </data>
  <data name="CompilerSettings_PreprocessorSymbols" xml:space="preserve">
    <value>条件编译符号</value>
  </data>
  <data name="CompletionSet_All" xml:space="preserve">
    <value>全部</value>
  </data>
  <data name="ConstantsToolTip" xml:space="preserve">
    <value>常量</value>
  </data>
  <data name="DebuggerExpressionHasNoValue" xml:space="preserve">
    <value>表达式已计算，但是没有值</value>
  </data>
  <data name="DebuggerVarsWindow_CSharp_StaticMembers" xml:space="preserve">
    <value>静态成员</value>
  </data>
  <data name="DebuggerVarsWindow_DynamicView" xml:space="preserve">
    <value>动态视图</value>
  </data>
  <data name="DebuggerVarsWindow_Error_PropertyName" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="DebuggerVarsWindow_ExpandDynamicViewMessage" xml:space="preserve">
    <value>展开动态视图将获得该对象的动态成员</value>
  </data>
  <data name="DebuggerVarsWindow_ExpandResultsViewMessage" xml:space="preserve">
    <value>展开“结果”视图将枚举IEnumerable</value>
  </data>
  <data name="DebuggerVarsWindow_InstanceMembers" xml:space="preserve">
    <value>实例成员</value>
  </data>
  <data name="DebuggerVarsWindow_RawView" xml:space="preserve">
    <value>原始视图</value>
  </data>
  <data name="DebuggerVarsWindow_ResultsView" xml:space="preserve">
    <value>结果视图</value>
  </data>
  <data name="DebuggerVarsWindow_VisualBasic_SharedMembers" xml:space="preserve">
    <value>共享的成员</value>
  </data>
  <data name="DelegatesToolTip" xml:space="preserve">
    <value>委托</value>
  </data>
  <data name="DynamicViewAssemblyNotLoaded" xml:space="preserve">
    <value>动态视图要求引用 {0}</value>
  </data>
  <data name="DynamicView_MustBeDynamicOrComType" xml:space="preserve">
    <value>只有 COM 或动态对象才能具有动态视图</value>
  </data>
  <data name="EnumsToolTip" xml:space="preserve">
    <value>枚举</value>
  </data>
  <data name="EventsToolTip" xml:space="preserve">
    <value>事件</value>
  </data>
  <data name="ExtensionMethodsToolTip" xml:space="preserve">
    <value>扩展方法</value>
  </data>
  <data name="FieldsToolTip" xml:space="preserve">
    <value>字段</value>
  </data>
  <data name="FilterExpressionEvaluator_CompiledExpressionThrewAnException" xml:space="preserve">
    <value>已编译的表达式抛出了异常: {0}</value>
  </data>
  <data name="FilterExpressionEvaluator_InvalidExpression" xml:space="preserve">
    <value>表达式无效</value>
  </data>
  <data name="InterfacesToolTip" xml:space="preserve">
    <value>接口</value>
  </data>
  <data name="KeywordsToolTip" xml:space="preserve">
    <value>关键字</value>
  </data>
  <data name="LocalsAndParametersToolTip" xml:space="preserve">
    <value>局部变量和参数</value>
  </data>
  <data name="LocalsWindow_MethodOrProperty_Returned" xml:space="preserve">
    <value>{0} 返回</value>
  </data>
  <data name="LocalsWindow_TypeVariables" xml:space="preserve">
    <value>类型变量</value>
  </data>
  <data name="MethodsToolTip" xml:space="preserve">
    <value>方法</value>
  </data>
  <data name="ModulesToolTip" xml:space="preserve">
    <value>模块</value>
  </data>
  <data name="NamespacesToolTip" xml:space="preserve">
    <value>命名空间</value>
  </data>
  <data name="PropertiesToolTip" xml:space="preserve">
    <value>属性</value>
  </data>
  <data name="ResultsView_MustBeEnumerableType" xml:space="preserve">
    <value>只有可枚举类型才能具有结果视图</value>
  </data>
  <data name="SnippetsToolTip" xml:space="preserve">
    <value>代码块</value>
  </data>
  <data name="StructuresToolTip" xml:space="preserve">
    <value>结构</value>
  </data>
  <data name="SystemCoreDllNotLoaded" xml:space="preserve">
    <value>结果视图要求引用 {0}</value>
  </data>
  <data name="TypeDoesNotExistInAssembly" xml:space="preserve">
    <value>程序集 '{1}' 中不存在类型 '{0}' </value>
  </data>
</root>