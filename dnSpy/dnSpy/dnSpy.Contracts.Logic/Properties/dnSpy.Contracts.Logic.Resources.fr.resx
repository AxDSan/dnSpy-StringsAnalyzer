<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidBoolean" xml:space="preserve">
    <value>La valeur doit être une valeur booléenne (True ou False)</value>
  </data>
  <data name="InvalidChar" xml:space="preserve">
    <value>Un caractère doit être placé entre des guillemets simples (')</value>
  </data>
  <data name="InvalidDateTime" xml:space="preserve">
    <value>La valeur doit être une valeur de type DateTime</value>
  </data>
  <data name="InvalidDecimal" xml:space="preserve">
    <value>La valeur doit être une valeur de type Decimal</value>
  </data>
  <data name="InvalidDouble" xml:space="preserve">
    <value>La valeur doit être une valeur de type 64-bit floating point number</value>
  </data>
  <data name="InvalidEscapeSequence" xml:space="preserve">
    <value>Séquence d’échappement de caractère inconnu : \{0}</value>
  </data>
  <data name="InvalidEscapeSequence2" xml:space="preserve">
    <value>Séquence d’échappement de chaîne inconnue : \{0}</value>
  </data>
  <data name="InvalidHexCharacter" xml:space="preserve">
    <value>Une chaîne hexadécimale doit contenir uniquement des caractères hexadécimaux : 0-9 et A-F</value>
  </data>
  <data name="InvalidHexStringSize" xml:space="preserve">
    <value>Une chaîne hexadécimale doit contenir un nombre pair de caractères hexadécimaux</value>
  </data>
  <data name="InvalidInteger1" xml:space="preserve">
    <value>La valeur n'est pas un entier hexadécimal ou décimal</value>
  </data>
  <data name="InvalidInteger2" xml:space="preserve">
    <value>La valeur est trop petite</value>
  </data>
  <data name="InvalidInteger3" xml:space="preserve">
    <value>La valeur est trop grande</value>
  </data>
  <data name="InvalidInteger4" xml:space="preserve">
    <value>Valeur doit être comprise entre {0} et {1} (0 x{1:X}) inclus</value>
  </data>
  <data name="InvalidInteger5" xml:space="preserve">
    <value>La valeur doit être comprise entre {0} ({2}0 x{0:X}) et {1} (0 x{1:X}) inclus</value>
  </data>
  <data name="InvalidListValue" xml:space="preserve">
    <value>La valeur dans la liste ne peut pas être vide</value>
  </data>
  <data name="InvalidListValue2" xml:space="preserve">
    <value>La liste des éléments doivent être séparés par des virgules</value>
  </data>
  <data name="InvalidSingle" xml:space="preserve">
    <value>La valeur doit être un nombre à virgule flottante 32 bits</value>
  </data>
  <data name="InvalidString1" xml:space="preserve">
    <value>Une chaîne doit contenir la valeur « null » ou doit être entourée de guillemets doubles (")</value>
  </data>
  <data name="InvalidString2" xml:space="preserve">
    <value>Une chaîne doit être placée entre guillemets (")</value>
  </data>
  <data name="InvalidTimeSpan" xml:space="preserve">
    <value>La valeur doit être un TimeSpan</value>
  </data>
  <data name="InvalidUnsignedInteger1" xml:space="preserve">
    <value>Uniquement des entiers non négatifs sont autorisés</value>
  </data>
  <data name="InvalidUnsignedInteger2" xml:space="preserve">
    <value>La valeur n’est pas un entier hexadécimal ou décimal non signé</value>
  </data>
  <data name="InvalidUnsignedInteger3" xml:space="preserve">
    <value>Valeur doit être comprise entre {0} et {1} (0 x{1:X}) inclus</value>
  </data>
  <data name="InvalidUnsignedInteger4" xml:space="preserve">
    <value>La aleur doit être comprise entre {0} (0 x{0:X}) et {1} (0 x{1:X}) inclus</value>
  </data>
</root>