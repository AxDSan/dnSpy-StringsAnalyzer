<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidBoolean" xml:space="preserve">
    <value>Giá trị phải là giá trị Boolean (True or False)</value>
  </data>
  <data name="InvalidChar" xml:space="preserve">
    <value>Một ký tự phải được đặt trong dấu ngoặc đơn (')</value>
  </data>
  <data name="InvalidDateTime" xml:space="preserve">
    <value>Giá trị phải là DateTime</value>
  </data>
  <data name="InvalidDecimal" xml:space="preserve">
    <value>Giá trị phải là số thập phân</value>
  </data>
  <data name="InvalidDouble" xml:space="preserve">
    <value>Giá trị phải là số phẩy động 64-bit</value>
  </data>
  <data name="InvalidEscapeSequence" xml:space="preserve">
    <value>Trình tự thoát ký tự không xác định: \{0}</value>
  </data>
  <data name="InvalidEscapeSequence2" xml:space="preserve">
    <value>Trình tự thoát chuỗi không xác định: \{0}</value>
  </data>
  <data name="InvalidHexCharacter" xml:space="preserve">
    <value>Chuỗi hex phải chỉ chứa các chữ số hex: 0-9 và A-F</value>
  </data>
  <data name="InvalidHexStringSize" xml:space="preserve">
    <value>Một chuỗi hex phải chứa một số chẵn các chữ số hex</value>
  </data>
  <data name="InvalidInteger1" xml:space="preserve">
    <value>Giá trị không phải là số nguyên thập phân hoặc thập lục phân</value>
  </data>
  <data name="InvalidInteger2" xml:space="preserve">
    <value>Giá trị quá nhỏ</value>
  </data>
  <data name="InvalidInteger3" xml:space="preserve">
    <value>Giá trị quá lớn</value>
  </data>
  <data name="InvalidInteger4" xml:space="preserve">
    <value>Giá trị phải nằm trong khoảng {0} và {1} (0x {1:X})</value>
  </data>
  <data name="InvalidInteger5" xml:space="preserve">
    <value>Giá trị phải nằm trong khoảng {0} ({2}0x{0:X}) và {1} (0x {1:X})</value>
  </data>
  <data name="InvalidListValue" xml:space="preserve">
    <value>Giá trị trong danh sách không thể để trống</value>
  </data>
  <data name="InvalidListValue2" xml:space="preserve">
    <value>Danh sách các yếu tố phải được phân tách bằng dấu phẩy</value>
  </data>
  <data name="InvalidSingle" xml:space="preserve">
    <value>Giá trị phải là số phẩy động 32 bit</value>
  </data>
  <data name="InvalidString1" xml:space="preserve">
    <value>Một chuỗi phải chứa giá trị 'null' hoặc phải được đặt trong dấu ngoặc kép (")</value>
  </data>
  <data name="InvalidString2" xml:space="preserve">
    <value>Một chuỗi phải được đặt trong dấu ngoặc kép (")</value>
  </data>
  <data name="InvalidTimeSpan" xml:space="preserve">
    <value>Giá trị phải là TimeSpan</value>
  </data>
  <data name="InvalidUnsignedInteger1" xml:space="preserve">
    <value>Chỉ cho phép số nguyên không âm</value>
  </data>
  <data name="InvalidUnsignedInteger2" xml:space="preserve">
    <value>Giá trị không phải là số nguyên thập lục phân hoặc thập phân không dấu</value>
  </data>
  <data name="InvalidUnsignedInteger3" xml:space="preserve">
    <value>Giá trị phải nằm trong khoảng {0} và {1} (0x {1:X})</value>
  </data>
  <data name="InvalidUnsignedInteger4" xml:space="preserve">
    <value>Giá trị phải nằm trong khoảng {0} (0x{0:X}) và {1} (0x{1:X})</value>
  </data>
</root>